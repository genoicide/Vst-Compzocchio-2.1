; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Mattia\Desktop\Audio plugin developement\esempi\CompzocchioGui 2.10\zlib\contrib\minizip\zip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_zip_copyright
_BSS	SEGMENT
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
CONST	SEGMENT
_zip_copyright DB ' zip 1.01 Copyright 1998-2004 Gilles Vollant - http://'
	DB	'www.winimage.com/zLibDll', 00H
CONST	ENDS
PUBLIC	_zipOpen
PUBLIC	_zipOpen64
PUBLIC	_zipOpen2
PUBLIC	_zipOpen2_64
PUBLIC	_zipOpenNewFileInZip
PUBLIC	_zipOpenNewFileInZip64
PUBLIC	_zipOpenNewFileInZip2
PUBLIC	_zipOpenNewFileInZip2_64
PUBLIC	_zipOpenNewFileInZip3
PUBLIC	_zipOpenNewFileInZip3_64
PUBLIC	_zipOpenNewFileInZip4
PUBLIC	_zipOpenNewFileInZip4_64
PUBLIC	_zipWriteInFileInZip
PUBLIC	_zipCloseFileInZip
PUBLIC	_zipCloseFileInZipRaw
PUBLIC	_zipCloseFileInZipRaw64
PUBLIC	_zipClose
PUBLIC	_zipRemoveExtraInfoBlock
PUBLIC	_LoadCentralDirectoryRecord
PUBLIC	_zipOpen3
PUBLIC	_Write_LocalFileHeader
PUBLIC	_Write_Zip64EndOfCentralDirectoryLocator
PUBLIC	_Write_Zip64EndOfCentralDirectoryRecord
PUBLIC	_Write_EndOfCentralDirectoryRecord
PUBLIC	_Write_GlobalComment
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__time64:PROC
EXTRN	_deflate:PROC
EXTRN	_deflateEnd:PROC
EXTRN	_crc32:PROC
EXTRN	_deflateInit2_:PROC
EXTRN	_get_crc_table:PROC
EXTRN	_fill_fopen64_filefunc:PROC
EXTRN	_call_zopen64:PROC
EXTRN	_call_zseek64:PROC
EXTRN	_call_ztell64:PROC
EXTRN	_fill_zlib_filefunc64_32_def_from_filefunc32:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _Write_GlobalComment
_TEXT	SEGMENT
_zi$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_Write_GlobalComment PROC				; COMDAT

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1863 :   int err = ZIP_OK;
; 1864 :   uInt size_global_comment = 0;
; 1865 : 
; 1866 :   if(global_comment != NULL)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _global_comment$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
  0000b	85 c0		 test	 eax, eax
  0000d	74 0e		 je	 SHORT $LN3@Write_Glob

; 1867 :     size_global_comment = (uInt)strlen(global_comment);

  0000f	8b f0		 mov	 esi, eax
  00011	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL6@Write_Glob:
  00014	8a 06		 mov	 al, BYTE PTR [esi]
  00016	46		 inc	 esi
  00017	84 c0		 test	 al, al
  00019	75 f9		 jne	 SHORT $LL6@Write_Glob
  0001b	2b f1		 sub	 esi, ecx
$LN3@Write_Glob:

; 1868 : 
; 1869 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _zi$[ebp]
  00020	6a 02		 push	 2
  00022	6a 00		 push	 0
  00024	56		 push	 esi
  00025	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 _zip64local_putValue
  0002e	8b f8		 mov	 edi, eax
  00030	83 c4 14	 add	 esp, 20			; 00000014H

; 1870 : 
; 1871 :   if (err == ZIP_OK && size_global_comment > 0)

  00033	85 ff		 test	 edi, edi
  00035	75 1e		 jne	 SHORT $LN7@Write_Glob
  00037	85 f6		 test	 esi, esi
  00039	74 1a		 je	 SHORT $LN7@Write_Glob

; 1872 :   {
; 1873 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  0003b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0003e	56		 push	 esi
  0003f	ff 75 0c	 push	 DWORD PTR _global_comment$[ebp]
  00042	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00045	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00048	ff d1		 call	 ecx
  0004a	83 c9 ff	 or	 ecx, -1
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	3b c6		 cmp	 eax, esi
  00052	0f 45 f9	 cmovne	 edi, ecx
$LN7@Write_Glob:

; 1874 :       err = ZIP_ERRNO;
; 1875 :   }
; 1876 :   return err;

  00055	8b c7		 mov	 eax, edi
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1877 : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
tv183 = -8						; size = 8
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1814 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1815 :   int err = ZIP_OK;
; 1816 : 
; 1817 :   /*signature*/
; 1818 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  00007	8b 75 08	 mov	 esi, DWORD PTR _zi$[ebp]
  0000a	6a 04		 push	 4
  0000c	6a 00		 push	 0
  0000e	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00013	ff 76 2c	 push	 DWORD PTR [esi+44]
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _zip64local_putValue
  0001c	83 c4 14	 add	 esp, 20			; 00000014H

; 1819 : 
; 1820 :   if (err==ZIP_OK) /* number of this disk */

  0001f	85 c0		 test	 eax, eax
  00021	0f 85 06 01 00
	00		 jne	 $LN1@Write_EndO

; 1821 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00027	6a 02		 push	 2
  00029	50		 push	 eax
  0002a	50		 push	 eax
  0002b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _zip64local_putValue
  00034	83 c4 14	 add	 esp, 20			; 00000014H

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00037	85 c0		 test	 eax, eax
  00039	0f 85 ee 00 00
	00		 jne	 $LN1@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  0003f	6a 02		 push	 2
  00041	50		 push	 eax
  00042	50		 push	 eax
  00043	ff 76 2c	 push	 DWORD PTR [esi+44]
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _zip64local_putValue
  0004c	83 c4 14	 add	 esp, 20			; 00000014H

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0004f	85 c0		 test	 eax, eax
  00051	0f 85 d6 00 00
	00		 jne	 $LN1@Write_EndO

; 1827 :   {
; 1828 :     {
; 1829 :       if(zi->number_entry >= 0xFFFF)

  00057	39 86 fc 00 01
	00		 cmp	 DWORD PTR [esi+65788], eax
  0005d	77 17		 ja	 SHORT $LN15@Write_EndO
  0005f	81 be f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [esi+65784], 65535 ; 0000ffffH
  00069	73 0b		 jae	 SHORT $LN15@Write_EndO

; 1831 :       else
; 1832 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  0006b	6a 02		 push	 2
  0006d	50		 push	 eax
  0006e	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  00074	eb 09		 jmp	 SHORT $LN24@Write_EndO
$LN15@Write_EndO:

; 1830 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00076	6a 02		 push	 2
  00078	6a 00		 push	 0
  0007a	68 ff ff 00 00	 push	 65535			; 0000ffffH
$LN24@Write_EndO:
  0007f	ff 76 2c	 push	 DWORD PTR [esi+44]
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 _zip64local_putValue
  00088	83 c4 14	 add	 esp, 20			; 00000014H

; 1833 :     }
; 1834 :   }
; 1835 : 
; 1836 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  0008b	85 c0		 test	 eax, eax
  0008d	0f 85 9a 00 00
	00		 jne	 $LN1@Write_EndO

; 1837 :   {
; 1838 :     if(zi->number_entry >= 0xFFFF)

  00093	39 86 fc 00 01
	00		 cmp	 DWORD PTR [esi+65788], eax
  00099	77 17		 ja	 SHORT $LN16@Write_EndO
  0009b	81 be f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [esi+65784], 65535 ; 0000ffffH
  000a5	73 0b		 jae	 SHORT $LN16@Write_EndO

; 1840 :     else
; 1841 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000a7	6a 02		 push	 2
  000a9	50		 push	 eax
  000aa	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000b0	eb 09		 jmp	 SHORT $LN25@Write_EndO
$LN16@Write_EndO:

; 1839 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000b2	6a 02		 push	 2
  000b4	6a 00		 push	 0
  000b6	68 ff ff 00 00	 push	 65535			; 0000ffffH
$LN25@Write_EndO:
  000bb	ff 76 2c	 push	 DWORD PTR [esi+44]
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 _zip64local_putValue
  000c4	83 c4 14	 add	 esp, 20			; 00000014H

; 1842 :   }
; 1843 : 
; 1844 :   if (err==ZIP_OK) /* size of the central directory */

  000c7	85 c0		 test	 eax, eax
  000c9	75 62		 jne	 SHORT $LN1@Write_EndO

; 1845 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000cb	6a 04		 push	 4
  000cd	50		 push	 eax
  000ce	ff 75 0c	 push	 DWORD PTR _size_centraldir$[ebp]
  000d1	ff 76 2c	 push	 DWORD PTR [esi+44]
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 _zip64local_putValue
  000da	83 c4 14	 add	 esp, 20			; 00000014H

; 1846 : 
; 1847 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000dd	85 c0		 test	 eax, eax
  000df	75 4c		 jne	 SHORT $LN1@Write_EndO

; 1848 :   {
; 1849 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000e1	8b 55 10	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000e4	8b 45 14	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  000e7	8b ca		 mov	 ecx, edx
  000e9	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000ef	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]

; 1850 :     if(pos >= 0xffffffff)

  000f5	89 45 fc	 mov	 DWORD PTR tv183[ebp+4], eax
  000f8	75 21		 jne	 SHORT $LN17@Write_EndO
  000fa	83 f9 ff	 cmp	 ecx, -1
  000fd	73 1c		 jae	 SHORT $LN17@Write_EndO

; 1853 :     }
; 1854 :     else
; 1855 :                   err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);

  000ff	2b 96 f0 00 01
	00		 sub	 edx, DWORD PTR [esi+65776]
  00105	6a 04		 push	 4
  00107	6a 00		 push	 0
  00109	52		 push	 edx
  0010a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 _zip64local_putValue
  00113	83 c4 14	 add	 esp, 20			; 00000014H
  00116	5e		 pop	 esi

; 1856 :   }
; 1857 : 
; 1858 :    return err;
; 1859 : }

  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN17@Write_EndO:

; 1851 :     {
; 1852 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  0011b	6a 04		 push	 4
  0011d	6a 00		 push	 0
  0011f	6a ff		 push	 -1
  00121	ff 76 2c	 push	 DWORD PTR [esi+44]
  00124	56		 push	 esi
  00125	e8 00 00 00 00	 call	 _zip64local_putValue
  0012a	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Write_EndO:
  0012d	5e		 pop	 esi

; 1856 :   }
; 1857 : 
; 1858 :    return err;
; 1859 : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1776 :   int err = ZIP_OK;
; 1777 : 
; 1778 :   uLong Zip64DataSize = 44;
; 1779 : 
; 1780 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00004	8b 75 08	 mov	 esi, DWORD PTR _zi$[ebp]
  00007	6a 04		 push	 4
  00009	6a 00		 push	 0
  0000b	68 50 4b 06 06	 push	 101075792		; 06064b50H
  00010	ff 76 2c	 push	 DWORD PTR [esi+44]
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _zip64local_putValue
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 1781 : 
; 1782 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 eb 00 00
	00		 jne	 $LN1@Write_Zip6

; 1783 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00024	6a 08		 push	 8
  00026	50		 push	 eax
  00027	6a 2c		 push	 44			; 0000002cH
  00029	ff 76 2c	 push	 DWORD PTR [esi+44]
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _zip64local_putValue
  00032	83 c4 14	 add	 esp, 20			; 00000014H

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* version made by */

  00035	85 c0		 test	 eax, eax
  00037	0f 85 d2 00 00
	00		 jne	 $LN1@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0003d	6a 02		 push	 2
  0003f	50		 push	 eax
  00040	6a 2d		 push	 45			; 0000002dH
  00042	ff 76 2c	 push	 DWORD PTR [esi+44]
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _zip64local_putValue
  0004b	83 c4 14	 add	 esp, 20			; 00000014H

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version needed */

  0004e	85 c0		 test	 eax, eax
  00050	0f 85 b9 00 00
	00		 jne	 $LN1@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00056	6a 02		 push	 2
  00058	50		 push	 eax
  00059	6a 2d		 push	 45			; 0000002dH
  0005b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 _zip64local_putValue
  00064	83 c4 14	 add	 esp, 20			; 00000014H

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* number of this disk */

  00067	85 c0		 test	 eax, eax
  00069	0f 85 a0 00 00
	00		 jne	 $LN1@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0006f	6a 04		 push	 4
  00071	50		 push	 eax
  00072	50		 push	 eax
  00073	ff 76 2c	 push	 DWORD PTR [esi+44]
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _zip64local_putValue
  0007c	83 c4 14	 add	 esp, 20			; 00000014H

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0007f	85 c0		 test	 eax, eax
  00081	0f 85 88 00 00
	00		 jne	 $LN1@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00087	6a 04		 push	 4
  00089	50		 push	 eax
  0008a	50		 push	 eax
  0008b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 _zip64local_putValue
  00094	83 c4 14	 add	 esp, 20			; 00000014H

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00097	85 c0		 test	 eax, eax
  00099	75 74		 jne	 SHORT $LN1@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  0009b	6a 08		 push	 8
  0009d	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000a3	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000a9	ff 76 2c	 push	 DWORD PTR [esi+44]
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 _zip64local_putValue
  000b2	83 c4 14	 add	 esp, 20			; 00000014H

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000b5	85 c0		 test	 eax, eax
  000b7	75 56		 jne	 SHORT $LN1@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000b9	6a 08		 push	 8
  000bb	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000c1	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000c7	ff 76 2c	 push	 DWORD PTR [esi+44]
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 _zip64local_putValue
  000d0	83 c4 14	 add	 esp, 20			; 00000014H

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* size of the central directory */

  000d3	85 c0		 test	 eax, eax
  000d5	75 38		 jne	 SHORT $LN1@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  000d7	6a 08		 push	 8
  000d9	50		 push	 eax
  000da	ff 75 0c	 push	 DWORD PTR _size_centraldir$[ebp]
  000dd	ff 76 2c	 push	 DWORD PTR [esi+44]
  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 _zip64local_putValue
  000e6	83 c4 14	 add	 esp, 20			; 00000014H

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000e9	85 c0		 test	 eax, eax
  000eb	75 22		 jne	 SHORT $LN1@Write_Zip6

; 1807 :   {
; 1808 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000ed	8b 4d 10	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000f0	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000f6	8b 45 14	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  000f9	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]

; 1809 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  000ff	6a 08		 push	 8
  00101	50		 push	 eax
  00102	51		 push	 ecx
  00103	ff 76 2c	 push	 DWORD PTR [esi+44]
  00106	56		 push	 esi
  00107	e8 00 00 00 00	 call	 _zip64local_putValue
  0010c	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Write_Zip6:
  0010f	5e		 pop	 esi

; 1810 :   }
; 1811 :   return err;
; 1812 : }

  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
_zi$ = 8						; size = 4
_zip64eocd_pos_inzip$ = 12				; size = 8
_Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1754 :   int err = ZIP_OK;
; 1755 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writting_offset;

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _zip64eocd_pos_inzip$[ebp+4]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _zi$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _zip64eocd_pos_inzip$[ebp]
  0000f	2b be f0 00 01
	00		 sub	 edi, DWORD PTR [esi+65776]

; 1756 : 
; 1757 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  00015	6a 04		 push	 4
  00017	1b 9e f4 00 01
	00		 sbb	 ebx, DWORD PTR [esi+65780]
  0001d	6a 00		 push	 0
  0001f	68 50 4b 06 07	 push	 117853008		; 07064b50H
  00024	ff 76 2c	 push	 DWORD PTR [esi+44]
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _zip64local_putValue
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 1758 : 
; 1759 :   /*num disks*/
; 1760 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00030	85 c0		 test	 eax, eax
  00032	75 39		 jne	 SHORT $LN1@Write_Zip6

; 1761 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00034	6a 04		 push	 4
  00036	50		 push	 eax
  00037	50		 push	 eax
  00038	ff 76 2c	 push	 DWORD PTR [esi+44]
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _zip64local_putValue
  00041	83 c4 14	 add	 esp, 20			; 00000014H

; 1762 : 
; 1763 :   /*relative offset*/
; 1764 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00044	85 c0		 test	 eax, eax
  00046	75 25		 jne	 SHORT $LN1@Write_Zip6

; 1765 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00048	6a 08		 push	 8
  0004a	53		 push	 ebx
  0004b	57		 push	 edi
  0004c	ff 76 2c	 push	 DWORD PTR [esi+44]
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _zip64local_putValue
  00055	83 c4 14	 add	 esp, 20			; 00000014H

; 1766 : 
; 1767 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1768 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00058	85 c0		 test	 eax, eax
  0005a	75 11		 jne	 SHORT $LN1@Write_Zip6

; 1769 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  0005c	6a 04		 push	 4
  0005e	50		 push	 eax
  0005f	6a 01		 push	 1
  00061	ff 76 2c	 push	 DWORD PTR [esi+44]
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 _zip64local_putValue
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Write_Zip6:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 1770 : 
; 1771 :     return err;
; 1772 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64FlushWriteBuffer
_TEXT	SEGMENT
tv237 = 8						; size = 4
_zi$ = 8						; size = 4
_zip64FlushWriteBuffer PROC				; COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1364 :     int err=ZIP_OK;
; 1365 : 
; 1366 :     if (zi->ci.encrypt != 0)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _zi$[ebp]
  00009	33 db		 xor	 ebx, ebx
  0000b	39 9f ac 00 01
	00		 cmp	 DWORD PTR [edi+65708], ebx
  00011	74 55		 je	 SHORT $LN2@zip64Flush

; 1367 :     {
; 1368 : #ifndef NOCRYPT
; 1369 :         uInt i;
; 1370 :         int t;
; 1371 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00013	39 5f 7c	 cmp	 DWORD PTR [edi+124], ebx
  00016	76 50		 jbe	 SHORT $LN2@zip64Flush
  00018	b9 5c ff ff ff	 mov	 ecx, -164		; ffffff5cH
  0001d	2b cf		 sub	 ecx, edi
  0001f	8d 87 d0 00 01
	00		 lea	 eax, DWORD PTR [edi+65744]
  00025	8d b7 a4 00 00
	00		 lea	 esi, DWORD PTR [edi+164]
  0002b	89 4d 08	 mov	 DWORD PTR tv237[ebp], ecx
  0002e	8b ff		 npad	 2
$LL4@zip64Flush:

; 1372 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	8b 97 dc 00 01
	00		 mov	 edx, DWORD PTR [edi+65756]
  00036	52		 push	 edx
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _decrypt_byte
  0003d	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  00040	51		 push	 ecx
  00041	8b d8		 mov	 ebx, eax
  00043	52		 push	 edx
  00044	8d 87 d0 00 01
	00		 lea	 eax, DWORD PTR [edi+65744]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _update_keys
  00050	30 1e		 xor	 BYTE PTR [esi], bl
  00052	8b 45 08	 mov	 eax, DWORD PTR tv237[ebp]
  00055	46		 inc	 esi
  00056	03 c6		 add	 eax, esi
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	3b 47 7c	 cmp	 eax, DWORD PTR [edi+124]
  0005e	8d 87 d0 00 01
	00		 lea	 eax, DWORD PTR [edi+65744]
  00064	72 ca		 jb	 SHORT $LL4@zip64Flush
  00066	33 db		 xor	 ebx, ebx
$LN2@zip64Flush:

; 1373 : #endif
; 1374 :     }
; 1375 : 
; 1376 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  00068	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  0006b	56		 push	 esi
  0006c	8d 87 a4 00 00
	00		 lea	 eax, DWORD PTR [edi+164]
  00072	50		 push	 eax
  00073	ff 77 2c	 push	 DWORD PTR [edi+44]
  00076	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00079	ff 77 1c	 push	 DWORD PTR [edi+28]
  0007c	ff d0		 call	 eax
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	83 c9 ff	 or	 ecx, -1
  00084	3b c6		 cmp	 eax, esi
  00086	0f 45 d9	 cmovne	 ebx, ecx

; 1377 :       err = ZIP_ERRNO;
; 1378 : 
; 1379 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  00089	01 b7 c0 00 01
	00		 add	 DWORD PTR [edi+65728], esi

; 1380 : 
; 1381 : #ifdef HAVE_BZIP2
; 1382 :     if(zi->ci.method == Z_BZIP2ED)
; 1383 :     {
; 1384 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1385 :       zi->ci.bstream.total_in_lo32 = 0;
; 1386 :       zi->ci.bstream.total_in_hi32 = 0;
; 1387 :     }
; 1388 :     else
; 1389 : #endif
; 1390 :     {
; 1391 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;

  0008f	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]

; 1392 :       zi->ci.stream.total_in = 0;

  00092	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0
  00099	83 97 c4 00 01
	00 00		 adc	 DWORD PTR [edi+65732], 0
  000a0	01 8f c8 00 01
	00		 add	 DWORD PTR [edi+65736], ecx

; 1393 :     }
; 1394 : 
; 1395 : 
; 1396 :     zi->ci.pos_in_buffered_data = 0;

  000a6	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0

; 1397 : 
; 1398 :     return err;

  000ad	8b c3		 mov	 eax, ebx
  000af	83 97 cc 00 01
	00 00		 adc	 DWORD PTR [edi+65740], 0
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx

; 1399 : }

  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _Write_LocalFileHeader
_TEXT	SEGMENT
_zi$ = 8						; size = 4
_filename$ = 12						; size = 4
_size_extrafield_local$ = 16				; size = 4
_extrafield_local$ = 20					; size = 4
_Write_LocalFileHeader PROC				; COMDAT

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _filename$[ebp]
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	8d 49 00	 npad	 3
$LL26@Write_Loca:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL26@Write_Loca

; 963  :   uInt size_extrafield = size_extrafield_local;
; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  00017	8b 75 08	 mov	 esi, DWORD PTR _zi$[ebp]
  0001a	8b 5d 10	 mov	 ebx, DWORD PTR _size_extrafield_local$[ebp]
  0001d	6a 04		 push	 4
  0001f	6a 00		 push	 0
  00021	68 50 4b 03 04	 push	 67324752		; 04034b50H
  00026	ff 76 2c	 push	 DWORD PTR [esi+44]
  00029	2b f9		 sub	 edi, ecx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _zip64local_putValue
  00031	83 c4 14	 add	 esp, 20			; 00000014H

; 966  : 
; 967  :   if (err==ZIP_OK)

  00034	85 c0		 test	 eax, eax
  00036	0f 85 da 00 00
	00		 jne	 $LN8@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)
; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  0003c	6a 02		 push	 2
  0003e	50		 push	 eax
  0003f	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  00045	74 04		 je	 SHORT $LN20@Write_Loca
  00047	6a 2d		 push	 45			; 0000002dH

; 971  :     else

  00049	eb 02		 jmp	 SHORT $LN31@Write_Loca
$LN20@Write_Loca:

; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  0004b	6a 14		 push	 20			; 00000014H
$LN31@Write_Loca:
  0004d	ff 76 2c	 push	 DWORD PTR [esi+44]
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 _zip64local_putValue
  00056	83 c4 14	 add	 esp, 20			; 00000014H

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  00059	85 c0		 test	 eax, eax
  0005b	0f 85 b5 00 00
	00		 jne	 $LN8@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  00061	6a 02		 push	 2
  00063	50		 push	 eax
  00064	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  0006a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 _zip64local_putValue
  00073	83 c4 14	 add	 esp, 20			; 00000014H

; 977  : 
; 978  :   if (err==ZIP_OK)

  00076	85 c0		 test	 eax, eax
  00078	0f 85 98 00 00
	00		 jne	 $LN8@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  0007e	6a 02		 push	 2
  00080	50		 push	 eax
  00081	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  00087	ff 76 2c	 push	 DWORD PTR [esi+44]
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 _zip64local_putValue
  00090	83 c4 14	 add	 esp, 20			; 00000014H

; 980  : 
; 981  :   if (err==ZIP_OK)

  00093	85 c0		 test	 eax, eax
  00095	75 7f		 jne	 SHORT $LN8@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  00097	6a 04		 push	 4
  00099	50		 push	 eax
  0009a	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  000a0	ff 76 2c	 push	 DWORD PTR [esi+44]
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _zip64local_putValue
  000a9	83 c4 14	 add	 esp, 20			; 00000014H

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  000ac	85 c0		 test	 eax, eax
  000ae	75 66		 jne	 SHORT $LN8@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000b0	6a 04		 push	 4
  000b2	50		 push	 eax
  000b3	50		 push	 eax
  000b4	ff 76 2c	 push	 DWORD PTR [esi+44]
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 _zip64local_putValue
  000bd	83 c4 14	 add	 esp, 20			; 00000014H

; 987  :   if (err==ZIP_OK)

  000c0	85 c0		 test	 eax, eax
  000c2	75 52		 jne	 SHORT $LN8@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)
; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  000c4	6a 04		 push	 4
  000c6	50		 push	 eax
  000c7	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  000cd	74 04		 je	 SHORT $LN13@Write_Loca
  000cf	6a ff		 push	 -1

; 991  :     else

  000d1	eb 02		 jmp	 SHORT $LN32@Write_Loca
$LN13@Write_Loca:

; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  000d3	6a 00		 push	 0
$LN32@Write_Loca:
  000d5	ff 76 2c	 push	 DWORD PTR [esi+44]
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 _zip64local_putValue
  000de	83 c4 14	 add	 esp, 20			; 00000014H

; 993  :   }
; 994  :   if (err==ZIP_OK)

  000e1	85 c0		 test	 eax, eax
  000e3	75 31		 jne	 SHORT $LN8@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)
; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  000e5	6a 04		 push	 4
  000e7	50		 push	 eax
  000e8	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  000ee	74 04		 je	 SHORT $LN10@Write_Loca
  000f0	6a ff		 push	 -1

; 998  :     else

  000f2	eb 02		 jmp	 SHORT $LN33@Write_Loca
$LN10@Write_Loca:

; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  000f4	6a 00		 push	 0
$LN33@Write_Loca:
  000f6	ff 76 2c	 push	 DWORD PTR [esi+44]
  000f9	56		 push	 esi
  000fa	e8 00 00 00 00	 call	 _zip64local_putValue
  000ff	83 c4 14	 add	 esp, 20			; 00000014H

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  00102	85 c0		 test	 eax, eax
  00104	75 10		 jne	 SHORT $LN8@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00106	6a 02		 push	 2
  00108	50		 push	 eax
  00109	57		 push	 edi
  0010a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 _zip64local_putValue
  00113	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@Write_Loca:

; 1004 : 
; 1005 :   if(zi->ci.zip64)

  00116	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0

; 1006 :   {
; 1007 :     size_extrafield += 20;

  0011d	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00120	75 02		 jne	 SHORT $LN7@Write_Loca
  00122	8b cb		 mov	 ecx, ebx
$LN7@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  00124	85 c0		 test	 eax, eax
  00126	0f 85 c4 00 00
	00		 jne	 $LN1@Write_Loca

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  0012c	6a 02		 push	 2
  0012e	50		 push	 eax
  0012f	51		 push	 ecx
  00130	ff 76 2c	 push	 DWORD PTR [esi+44]
  00133	56		 push	 esi
  00134	e8 00 00 00 00	 call	 _zip64local_putValue
  00139	8b d8		 mov	 ebx, eax
  0013b	83 c4 14	 add	 esp, 20			; 00000014H

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  0013e	85 db		 test	 ebx, ebx
  00140	0f 85 a8 00 00
	00		 jne	 $LN28@Write_Loca
  00146	85 ff		 test	 edi, edi
  00148	74 20		 je	 SHORT $LN24@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  0014a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0014d	57		 push	 edi
  0014e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00151	ff 76 2c	 push	 DWORD PTR [esi+44]
  00154	ff 76 1c	 push	 DWORD PTR [esi+28]
  00157	ff d0		 call	 eax
  00159	83 c4 10	 add	 esp, 16			; 00000010H
  0015c	3b c7		 cmp	 eax, edi
  0015e	74 0a		 je	 SHORT $LN24@Write_Loca
$LN34@Write_Loca:
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  00162	83 c8 ff	 or	 eax, -1
  00165	5b		 pop	 ebx

; 1045 : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
$LN24@Write_Loca:

; 1016 :       err = ZIP_ERRNO;
; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  0016a	8b 7d 10	 mov	 edi, DWORD PTR _size_extrafield_local$[ebp]
  0016d	85 ff		 test	 edi, edi
  0016f	74 16		 je	 SHORT $LN25@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  00171	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00174	57		 push	 edi
  00175	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00178	ff 76 2c	 push	 DWORD PTR [esi+44]
  0017b	ff 76 1c	 push	 DWORD PTR [esi+28]
  0017e	ff d0		 call	 eax
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	3b c7		 cmp	 eax, edi
  00185	75 d9		 jne	 SHORT $LN34@Write_Loca
$LN25@Write_Loca:

; 1022 :       err = ZIP_ERRNO;
; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  00187	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0
  0018e	74 5e		 je	 SHORT $LN28@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;
; 1030 :       short DataSize = 16;
; 1031 :       ZPOS64_T CompressedSize = 0;
; 1032 :       ZPOS64_T UncompressedSize = 0;
; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  00190	ff 76 2c	 push	 DWORD PTR [esi+44]
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 _call_ztell64

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  00199	6a 02		 push	 2
  0019b	6a 00		 push	 0
  0019d	6a 01		 push	 1
  0019f	ff 76 2c	 push	 DWORD PTR [esi+44]
  001a2	89 86 b8 00 01
	00		 mov	 DWORD PTR [esi+65720], eax
  001a8	56		 push	 esi
  001a9	89 96 bc 00 01
	00		 mov	 DWORD PTR [esi+65724], edx
  001af	e8 00 00 00 00	 call	 _zip64local_putValue

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  001b4	6a 02		 push	 2
  001b6	6a 00		 push	 0
  001b8	6a 10		 push	 16			; 00000010H
  001ba	ff 76 2c	 push	 DWORD PTR [esi+44]
  001bd	56		 push	 esi
  001be	e8 00 00 00 00	 call	 _zip64local_putValue

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  001c3	6a 08		 push	 8
  001c5	6a 00		 push	 0
  001c7	6a 00		 push	 0
  001c9	ff 76 2c	 push	 DWORD PTR [esi+44]
  001cc	56		 push	 esi
  001cd	e8 00 00 00 00	 call	 _zip64local_putValue
  001d2	83 c4 44	 add	 esp, 68			; 00000044H

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  001d5	6a 08		 push	 8
  001d7	6a 00		 push	 0
  001d9	6a 00		 push	 0
  001db	ff 76 2c	 push	 DWORD PTR [esi+44]
  001de	56		 push	 esi
  001df	e8 00 00 00 00	 call	 _zip64local_putValue
  001e4	83 c4 14	 add	 esp, 20			; 00000014H
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx

; 1045 : }

  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
$LN28@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  001ee	8b c3		 mov	 eax, ebx
$LN1@Write_Loca:
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx

; 1045 : }

  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c3		 ret	 0
_Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen3
_TEXT	SEGMENT
_ziinit$ = -65800					; size = 65800
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc64_32_def$ = 20				; size = 4
_zipOpen3 PROC						; COMDAT

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 01 01 00	 mov	 eax, 65800		; 00010108H
  00008	e8 00 00 00 00	 call	 __chkstk

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;
; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;
; 856  :     ziinit.z_filefunc.ztell32_file = NULL;
; 857  :     if (pzlib_filefunc64_32_def==NULL)

  0000d	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00010	53		 push	 ebx
  00011	33 db		 xor	 ebx, ebx
  00013	57		 push	 edi
  00014	89 9d 20 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+40], ebx
  0001a	89 9d 1c ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+36], ebx
  00020	85 c0		 test	 eax, eax
  00022	75 11		 jne	 SHORT $LN11@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00024	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  00030	83 c4 04	 add	 esp, 4

; 859  :     else

  00033	eb 49		 jmp	 SHORT $LN10@zipOpen3
$LN11@zipOpen3:

; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00035	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00039	66 0f d6 85 f8
	fe fe ff	 movq	 QWORD PTR _ziinit$[ebp], xmm0
  00041	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  00046	66 0f d6 85 00
	ff fe ff	 movq	 QWORD PTR _ziinit$[ebp+8], xmm0
  0004e	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00053	66 0f d6 85 08
	ff fe ff	 movq	 QWORD PTR _ziinit$[ebp+16], xmm0
  0005b	f3 0f 7e 40 18	 movq	 xmm0, QWORD PTR [eax+24]
  00060	66 0f d6 85 10
	ff fe ff	 movq	 QWORD PTR _ziinit$[ebp+24], xmm0
  00068	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  0006d	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00070	66 0f d6 85 18
	ff fe ff	 movq	 QWORD PTR _ziinit$[ebp+32], xmm0
  00078	89 85 20 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+40], eax
$LN10@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,
; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));

  0007e	8b 7d 0c	 mov	 edi, DWORD PTR _append$[ebp]
  00081	33 c0		 xor	 eax, eax
  00083	85 ff		 test	 edi, edi
  00085	0f 94 c0	 sete	 al
  00088	8d 04 85 07 00
	00 00		 lea	 eax, DWORD PTR [eax*4+7]
  0008f	50		 push	 eax
  00090	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  00093	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _call_zopen64
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	89 85 24 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+44], eax

; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  000a8	85 c0		 test	 eax, eax
  000aa	75 06		 jne	 SHORT $LN9@zipOpen3
  000ac	5f		 pop	 edi
  000ad	5b		 pop	 ebx

; 917  :     }
; 918  : }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
$LN9@zipOpen3:

; 869  :         return NULL;
; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  000b2	83 ff 01	 cmp	 edi, 1
  000b5	75 1c		 jne	 SHORT $LN8@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000b7	6a 02		 push	 2
  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	50		 push	 eax
  000be	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _call_zseek64
  000ca	8b 85 24 ff fe
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+44]
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000d3	56		 push	 esi
  000d4	50		 push	 eax
  000d5	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _call_ztell64
  000e1	89 45 e0	 mov	 DWORD PTR _ziinit$[ebp+65768], eax

; 875  :     ziinit.in_opened_file_inzip = 0;
; 876  :     ziinit.ci.stream_initialised = 0;
; 877  :     ziinit.number_entry = 0;
; 878  :     ziinit.add_position_when_writting_offset = 0;
; 879  :     init_linkedlist(&(ziinit.central_dir));

  000e4	8d 85 28 ff fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp+48]
  000ea	0f 57 c0	 xorps	 xmm0, xmm0
  000ed	50		 push	 eax
  000ee	89 55 e4	 mov	 DWORD PTR _ziinit$[ebp+65772], edx
  000f1	89 9d 30 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+56], ebx
  000f7	89 9d 70 ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+120], ebx
  000fd	66 0f 13 45 f0	 movlpd	 QWORD PTR _ziinit$[ebp+65784], xmm0
  00102	66 0f 13 45 e8	 movlpd	 QWORD PTR _ziinit$[ebp+65776], xmm0
  00107	e8 00 00 00 00	 call	 _init_linkedlist

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  0010c	68 08 01 01 00	 push	 65800			; 00010108H
  00111	e8 00 00 00 00	 call	 _malloc
  00116	8b f0		 mov	 esi, eax
  00118	83 c4 10	 add	 esp, 16			; 00000010H

; 884  :     if (zi==NULL)

  0011b	85 f6		 test	 esi, esi
  0011d	75 1e		 jne	 SHORT $LN7@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  0011f	ff b5 24 ff fe
	ff		 push	 DWORD PTR _ziinit$[ebp+44]
  00125	ff b5 14 ff fe
	ff		 push	 DWORD PTR _ziinit$[ebp+28]
  0012b	ff 95 0c ff fe
	ff		 call	 DWORD PTR _ziinit$[ebp+20]
  00131	83 c4 08	 add	 esp, 8

; 887  :         return NULL;

  00134	33 c0		 xor	 eax, eax
  00136	5e		 pop	 esi
  00137	5f		 pop	 edi
  00138	5b		 pop	 ebx

; 917  :     }
; 918  : }

  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
$LN7@zipOpen3:

; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  0013d	33 c0		 xor	 eax, eax
  0013f	89 45 f8	 mov	 DWORD PTR _ziinit$[ebp+65792], eax

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  00142	83 ff 02	 cmp	 edi, 2
  00145	75 14		 jne	 SHORT $LN6@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  00147	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _LoadCentralDirectoryRecord
  00153	8b d8		 mov	 ebx, eax
  00155	8b 45 f8	 mov	 eax, DWORD PTR _ziinit$[ebp+65792]
  00158	83 c4 04	 add	 esp, 4
$LN6@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  0015b	8b 4d 10	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  0015e	85 c9		 test	 ecx, ecx
  00160	74 02		 je	 SHORT $LN5@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  00162	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  00164	85 db		 test	 ebx, ebx
  00166	74 1f		 je	 SHORT $LN4@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  00168	85 c0		 test	 eax, eax
  0016a	74 09		 je	 SHORT $LN3@zipOpen3
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _free
  00172	83 c4 04	 add	 esp, 4
$LN3@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  00175	56		 push	 esi
  00176	e8 00 00 00 00	 call	 _free
  0017b	83 c4 04	 add	 esp, 4

; 911  :         return NULL;

  0017e	33 c0		 xor	 eax, eax
  00180	5e		 pop	 esi
  00181	5f		 pop	 edi
  00182	5b		 pop	 ebx

; 917  :     }
; 918  : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN4@zipOpen3:

; 912  :     }
; 913  :     else
; 914  :     {
; 915  :         *zi = ziinit;

  00187	68 08 01 01 00	 push	 65800			; 00010108H
  0018c	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  00192	50		 push	 eax
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 _memcpy
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  :         return (zipFile)zi;

  0019c	8b c6		 mov	 eax, esi
  0019e	5e		 pop	 esi
  0019f	5f		 pop	 edi
  001a0	5b		 pop	 ebx

; 917  :     }
; 918  : }

  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
_zipOpen3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _LoadCentralDirectoryRecord
_TEXT	SEGMENT
_size_central_dir$ = -44				; size = 8
_number_entry_CD$ = -44					; size = 8
_sizeEndOfCentralDirectory$1 = -44			; size = 8
tv558 = -40						; size = 4
_offset_central_dir$ = -36				; size = 8
_number_entry$ = -36					; size = 8
tv559 = -32						; size = 4
tv548 = -32						; size = 4
_number_entry_CD$2$ = -28				; size = 4
_number_entry_CD$1$ = -24				; size = 4
_number_entry$2$ = -20					; size = 4
_buf_read$1$ = -20					; size = 4
_size_comment$1$ = -20					; size = 4
_size_comment$ = -20					; size = 4
_offset_central_dir$2$ = -16				; size = 4
_read_this$1$ = -16					; size = 4
_number_disk_with_CD$ = -16				; size = 4
_byte_before_the_zipfile$2$ = -12			; size = 4
_byte_before_the_zipfile$1$ = -8			; size = 4
_size_central_dir_to_read$2$ = -4			; size = 4
_number_disk$ = -4					; size = 4
_read_this$2$ = 8					; size = 4
_offset_central_dir$1$ = 8				; size = 4
_VersionNeeded$ = 8					; size = 4
_VersionMadeBy$ = 8					; size = 4
_uL$ = 8						; size = 4
_pziinit$ = 8						; size = 4
_LoadCentralDirectoryRecord PROC			; COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 642  :   int err=ZIP_OK;
; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;
; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00008	8b 75 08	 mov	 esi, DWORD PTR _pziinit$[ebp]
  0000b	57		 push	 edi
  0000c	ff 76 2c	 push	 DWORD PTR [esi+44]
  0000f	33 ff		 xor	 edi, edi
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir64
  00017	83 c4 08	 add	 esp, 8
  0001a	8b c8		 mov	 ecx, eax
  0001c	89 4d f4	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], ecx
  0001f	89 55 f8	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], edx

; 666  :   if(central_pos > 0)

  00022	85 d2		 test	 edx, edx
  00024	0f 87 7f 01 00
	00		 ja	 $LN52@LoadCentra
  0002a	72 08		 jb	 SHORT $LN54@LoadCentra
  0002c	85 c9		 test	 ecx, ecx
  0002e	0f 85 75 01 00
	00		 jne	 $LN52@LoadCentra
$LN54@LoadCentra:

; 667  :   {
; 668  :     hasZIP64Record = 1;
; 669  :   }
; 670  :   else if(central_pos == 0)

  00034	0b c2		 or	 eax, edx
  00036	75 14		 jne	 SHORT $LN42@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00038	ff 76 2c	 push	 DWORD PTR [esi+44]
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir
  00041	83 c4 08	 add	 esp, 8
  00044	8b c8		 mov	 ecx, eax
  00046	89 45 f4	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  00049	89 55 f8	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], edx
$LN42@LoadCentra:

; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0004c	6a 00		 push	 0
  0004e	52		 push	 edx
  0004f	51		 push	 ecx
  00050	ff 76 2c	 push	 DWORD PTR [esi+44]
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 _call_zseek64
  00059	83 cb ff	 or	 ebx, -1
  0005c	85 c0		 test	 eax, eax

; 738  :       err=ZIP_ERRNO;
; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  0005e	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  00061	50		 push	 eax
  00062	ff 76 2c	 push	 DWORD PTR [esi+44]
  00065	0f 45 fb	 cmovne	 edi, ebx
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _zip64local_getLong
  0006e	85 c0		 test	 eax, eax

; 742  :       err=ZIP_ERRNO;
; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00070	8d 45 fc	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00073	50		 push	 eax
  00074	ff 76 2c	 push	 DWORD PTR [esi+44]
  00077	0f 45 fb	 cmovne	 edi, ebx
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 _zip64local_getShort
  00080	85 c0		 test	 eax, eax

; 746  :       err=ZIP_ERRNO;
; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00082	8d 45 f0	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00085	50		 push	 eax
  00086	ff 76 2c	 push	 DWORD PTR [esi+44]
  00089	0f 45 fb	 cmovne	 edi, ebx
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 _zip64local_getShort
  00092	85 c0		 test	 eax, eax

; 750  :       err=ZIP_ERRNO;
; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;
; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00094	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  00097	50		 push	 eax
  00098	ff 76 2c	 push	 DWORD PTR [esi+44]
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	56		 push	 esi
  0009f	0f 45 fb	 cmovne	 edi, ebx
  000a2	66 0f 13 45 dc	 movlpd	 QWORD PTR _number_entry$[ebp], xmm0
  000a7	e8 00 00 00 00	 call	 _zip64local_getShort
  000ac	83 c4 44	 add	 esp, 68			; 00000044H
  000af	85 c0		 test	 eax, eax
  000b1	74 0d		 je	 SHORT $LN23@LoadCentra

; 755  :       err=ZIP_ERRNO;
; 756  :     else

  000b3	8b 45 e0	 mov	 eax, DWORD PTR _number_entry$[ebp+4]
  000b6	0b fb		 or	 edi, ebx
  000b8	8b 5d dc	 mov	 ebx, DWORD PTR _number_entry$[ebp]
  000bb	89 45 ec	 mov	 DWORD PTR _number_entry$2$[ebp], eax
  000be	eb 0a		 jmp	 SHORT $LN22@LoadCentra
$LN23@LoadCentra:

; 757  :       number_entry = uL;

  000c0	8b 5d 08	 mov	 ebx, DWORD PTR _uL$[ebp]
  000c3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _number_entry$2$[ebp], 0
$LN22@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;
; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  000ca	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  000cd	50		 push	 eax
  000ce	ff 76 2c	 push	 DWORD PTR [esi+44]
  000d1	0f 57 c0	 xorps	 xmm0, xmm0
  000d4	56		 push	 esi
  000d5	66 0f 13 45 d4	 movlpd	 QWORD PTR _number_entry_CD$[ebp], xmm0
  000da	e8 00 00 00 00	 call	 _zip64local_getShort
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e2	85 c0		 test	 eax, eax
  000e4	74 0b		 je	 SHORT $LN21@LoadCentra

; 762  :       err=ZIP_ERRNO;
; 763  :     else

  000e6	8b 45 d8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  000e9	8b 4d d4	 mov	 ecx, DWORD PTR _number_entry_CD$[ebp]
  000ec	83 cf ff	 or	 edi, -1
  000ef	eb 05		 jmp	 SHORT $LN65@LoadCentra
$LN21@LoadCentra:

; 764  :       number_entry_CD = uL;

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _uL$[ebp]
  000f4	33 c0		 xor	 eax, eax
$LN65@LoadCentra:
  000f6	89 45 e4	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  000f9	89 4d e8	 mov	 DWORD PTR _number_entry_CD$1$[ebp], ecx

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  000fc	3b cb		 cmp	 ecx, ebx
  000fe	75 11		 jne	 SHORT $LN18@LoadCentra
  00100	3b 45 ec	 cmp	 eax, DWORD PTR _number_entry$2$[ebp]
  00103	75 0c		 jne	 SHORT $LN18@LoadCentra
  00105	83 7d f0 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  00109	75 06		 jne	 SHORT $LN18@LoadCentra
  0010b	83 7d fc 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  0010f	74 05		 je	 SHORT $LN19@LoadCentra
$LN18@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  00111	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN19@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;
; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00116	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  00119	50		 push	 eax
  0011a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0011d	0f 57 c0	 xorps	 xmm0, xmm0
  00120	56		 push	 esi
  00121	66 0f 13 45 d4	 movlpd	 QWORD PTR _size_central_dir$[ebp], xmm0
  00126	e8 00 00 00 00	 call	 _zip64local_getLong
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	85 c0		 test	 eax, eax
  00130	74 0e		 je	 SHORT $LN17@LoadCentra

; 772  :       err=ZIP_ERRNO;
; 773  :     else

  00132	8b 45 d8	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  00135	8b 5d d4	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  00138	83 cf ff	 or	 edi, -1
  0013b	89 45 fc	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  0013e	eb 0a		 jmp	 SHORT $LN16@LoadCentra
$LN17@LoadCentra:

; 774  :       size_central_dir = uL;

  00140	8b 5d 08	 mov	 ebx, DWORD PTR _uL$[ebp]
  00143	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], 0
$LN16@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;
; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0014a	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  0014d	50		 push	 eax
  0014e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	56		 push	 esi
  00155	66 0f 13 45 dc	 movlpd	 QWORD PTR _offset_central_dir$[ebp], xmm0
  0015a	e8 00 00 00 00	 call	 _zip64local_getLong
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00162	85 c0		 test	 eax, eax
  00164	74 0e		 je	 SHORT $LN15@LoadCentra

; 779  :       err=ZIP_ERRNO;
; 780  :     else

  00166	8b 45 e0	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  00169	89 45 f0	 mov	 DWORD PTR _offset_central_dir$2$[ebp], eax
  0016c	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp]
  0016f	83 cf ff	 or	 edi, -1
  00172	eb 0a		 jmp	 SHORT $LN66@LoadCentra
$LN15@LoadCentra:

; 781  :       offset_central_dir = uL;

  00174	8b 45 08	 mov	 eax, DWORD PTR _uL$[ebp]
  00177	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _offset_central_dir$2$[ebp], 0
$LN66@LoadCentra:
  0017e	89 45 08	 mov	 DWORD PTR _offset_central_dir$1$[ebp], eax

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  00181	8d 45 ec	 lea	 eax, DWORD PTR _size_comment$[ebp]
  00184	50		 push	 eax
  00185	ff 76 2c	 push	 DWORD PTR [esi+44]
  00188	56		 push	 esi
  00189	e8 00 00 00 00	 call	 _zip64local_getShort
  0018e	8b 55 ec	 mov	 edx, DWORD PTR _size_comment$[ebp]
  00191	8b 4d 08	 mov	 ecx, DWORD PTR _offset_central_dir$1$[ebp]
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH
  00197	85 c0		 test	 eax, eax
  00199	b8 ff ff ff ff	 mov	 eax, -1
  0019e	0f 45 f8	 cmovne	 edi, eax
  001a1	8b 45 f0	 mov	 eax, DWORD PTR _offset_central_dir$2$[ebp]
  001a4	e9 10 01 00 00	 jmp	 $LN67@LoadCentra
$LN52@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)
; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  001a9	6a 00		 push	 0
  001ab	52		 push	 edx
  001ac	51		 push	 ecx
  001ad	ff 76 2c	 push	 DWORD PTR [esi+44]
  001b0	56		 push	 esi
  001b1	e8 00 00 00 00	 call	 _call_zseek64
  001b6	83 cb ff	 or	 ebx, -1
  001b9	85 c0		 test	 eax, eax

; 684  :       err=ZIP_ERRNO;
; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  001bb	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  001be	50		 push	 eax
  001bf	ff 76 2c	 push	 DWORD PTR [esi+44]
  001c2	0f 45 fb	 cmovne	 edi, ebx
  001c5	56		 push	 esi
  001c6	e8 00 00 00 00	 call	 _zip64local_getLong
  001cb	85 c0		 test	 eax, eax

; 688  :       err=ZIP_ERRNO;
; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  001cd	8d 45 d4	 lea	 eax, DWORD PTR _sizeEndOfCentralDirectory$1[ebp]
  001d0	50		 push	 eax
  001d1	ff 76 2c	 push	 DWORD PTR [esi+44]
  001d4	0f 45 fb	 cmovne	 edi, ebx
  001d7	56		 push	 esi
  001d8	e8 00 00 00 00	 call	 _zip64local_getLong64
  001dd	85 c0		 test	 eax, eax

; 692  :       err=ZIP_ERRNO;
; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  001df	8d 45 08	 lea	 eax, DWORD PTR _VersionMadeBy$[ebp]
  001e2	50		 push	 eax
  001e3	ff 76 2c	 push	 DWORD PTR [esi+44]
  001e6	0f 45 fb	 cmovne	 edi, ebx
  001e9	56		 push	 esi
  001ea	e8 00 00 00 00	 call	 _zip64local_getShort
  001ef	85 c0		 test	 eax, eax

; 696  :       err=ZIP_ERRNO;
; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  001f1	8d 45 08	 lea	 eax, DWORD PTR _VersionNeeded$[ebp]
  001f4	50		 push	 eax
  001f5	ff 76 2c	 push	 DWORD PTR [esi+44]
  001f8	0f 45 fb	 cmovne	 edi, ebx
  001fb	56		 push	 esi
  001fc	e8 00 00 00 00	 call	 _zip64local_getShort
  00201	83 c4 44	 add	 esp, 68			; 00000044H
  00204	85 c0		 test	 eax, eax

; 700  :       err=ZIP_ERRNO;
; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00206	8d 45 fc	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00209	50		 push	 eax
  0020a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0020d	0f 45 fb	 cmovne	 edi, ebx
  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 _zip64local_getLong
  00216	85 c0		 test	 eax, eax

; 704  :       err=ZIP_ERRNO;
; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00218	8d 45 f0	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  0021b	50		 push	 eax
  0021c	ff 76 2c	 push	 DWORD PTR [esi+44]
  0021f	0f 45 fb	 cmovne	 edi, ebx
  00222	56		 push	 esi
  00223	e8 00 00 00 00	 call	 _zip64local_getLong
  00228	85 c0		 test	 eax, eax

; 708  :       err=ZIP_ERRNO;
; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  0022a	8d 45 dc	 lea	 eax, DWORD PTR _number_entry$[ebp]
  0022d	50		 push	 eax
  0022e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00231	0f 45 fb	 cmovne	 edi, ebx
  00234	56		 push	 esi
  00235	e8 00 00 00 00	 call	 _zip64local_getLong64
  0023a	85 c0		 test	 eax, eax

; 712  :       err=ZIP_ERRNO;
; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  0023c	8d 45 d4	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  0023f	50		 push	 eax
  00240	ff 76 2c	 push	 DWORD PTR [esi+44]
  00243	0f 45 fb	 cmovne	 edi, ebx
  00246	56		 push	 esi
  00247	e8 00 00 00 00	 call	 _zip64local_getLong64
  0024c	83 c4 30	 add	 esp, 48			; 00000030H
  0024f	85 c0		 test	 eax, eax

; 716  :       err=ZIP_ERRNO;
; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00251	8b 45 d4	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  00254	0f 45 fb	 cmovne	 edi, ebx
  00257	3b 45 dc	 cmp	 eax, DWORD PTR _number_entry$[ebp]
  0025a	89 45 e8	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  0025d	8b 45 d8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  00260	89 45 e4	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  00263	75 11		 jne	 SHORT $LN31@LoadCentra
  00265	3b 45 e0	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  00268	75 0c		 jne	 SHORT $LN31@LoadCentra
  0026a	83 7d f0 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0026e	75 06		 jne	 SHORT $LN31@LoadCentra
  00270	83 7d fc 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00274	74 05		 je	 SHORT $LN32@LoadCentra
$LN31@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  00276	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN32@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  0027b	8d 45 d4	 lea	 eax, DWORD PTR _size_central_dir$[ebp]
  0027e	50		 push	 eax
  0027f	ff 76 2c	 push	 DWORD PTR [esi+44]
  00282	56		 push	 esi
  00283	e8 00 00 00 00	 call	 _zip64local_getLong64
  00288	85 c0		 test	 eax, eax

; 723  :       err=ZIP_ERRNO;
; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  0028a	8d 45 dc	 lea	 eax, DWORD PTR _offset_central_dir$[ebp]
  0028d	50		 push	 eax
  0028e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00291	0f 45 fb	 cmovne	 edi, ebx
  00294	56		 push	 esi
  00295	e8 00 00 00 00	 call	 _zip64local_getLong64

; 728  :       err=ZIP_ERRNO;
; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;
; 733  :   }
; 734  :   else

  0029a	8b 4d dc	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  0029d	83 c4 18	 add	 esp, 24			; 00000018H
  002a0	85 c0		 test	 eax, eax
  002a2	8b 45 d8	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  002a5	89 45 fc	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  002a8	8b 45 e0	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  002ab	0f 45 fb	 cmovne	 edi, ebx
  002ae	8b 5d d4	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  002b1	33 d2		 xor	 edx, edx
  002b3	89 45 f0	 mov	 DWORD PTR _offset_central_dir$2$[ebp], eax
  002b6	89 4d 08	 mov	 DWORD PTR _offset_central_dir$1$[ebp], ecx
$LN67@LoadCentra:

; 786  :       err=ZIP_ERRNO;
; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&
; 790  :     (err==ZIP_OK))

  002b9	03 cb		 add	 ecx, ebx
  002bb	13 45 fc	 adc	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  002be	89 4d e0	 mov	 DWORD PTR tv548[ebp], ecx
  002c1	8b 4d f8	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  002c4	89 55 ec	 mov	 DWORD PTR _size_comment$1$[ebp], edx
  002c7	3b c8		 cmp	 ecx, eax
  002c9	0f 82 7d 01 00
	00		 jb	 $LN51@LoadCentra
  002cf	77 0c		 ja	 SHORT $LN55@LoadCentra
  002d1	8b 45 e0	 mov	 eax, DWORD PTR tv548[ebp]
  002d4	39 45 f4	 cmp	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  002d7	0f 82 6f 01 00
	00		 jb	 $LN51@LoadCentra
$LN55@LoadCentra:

; 791  :     err=ZIP_BADZIPFILE;
; 792  : 
; 793  :   if (err!=ZIP_OK)

  002dd	85 ff		 test	 edi, edi
  002df	0f 85 67 01 00
	00		 jne	 $LN51@LoadCentra

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  002e5	85 d2		 test	 edx, edx
  002e7	74 35		 je	 SHORT $LN9@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  002e9	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 _malloc
  002f2	83 c4 04	 add	 esp, 4
  002f5	89 86 00 01 01
	00		 mov	 DWORD PTR [esi+65792], eax

; 802  :     if (pziinit->globalcomment)

  002fb	85 c0		 test	 eax, eax
  002fd	74 1c		 je	 SHORT $LN63@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  002ff	ff 75 ec	 push	 DWORD PTR _size_comment$1$[ebp]
  00302	50		 push	 eax
  00303	ff 76 2c	 push	 DWORD PTR [esi+44]
  00306	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00309	ff 76 1c	 push	 DWORD PTR [esi+28]
  0030c	ff d0		 call	 eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  0030e	8b 8e 00 01 01
	00		 mov	 ecx, DWORD PTR [esi+65792]
  00314	83 c4 10	 add	 esp, 16			; 00000010H
  00317	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN63@LoadCentra:
  0031b	8b 4d f8	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$1$[ebp]
$LN9@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  0031e	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00321	2b 45 08	 sub	 eax, DWORD PTR _offset_central_dir$1$[ebp]

; 810  :   pziinit->add_position_when_writting_offset = byte_before_the_zipfile;
; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  00324	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  00329	1b 4d f0	 sbb	 ecx, DWORD PTR _offset_central_dir$2$[ebp]
  0032c	2b c3		 sub	 eax, ebx
  0032e	1b 4d fc	 sbb	 ecx, DWORD PTR _size_central_dir_to_read$2$[ebp]
  00331	89 45 f4	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  00334	89 4d f8	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], ecx
  00337	89 86 f0 00 01
	00		 mov	 DWORD PTR [esi+65776], eax
  0033d	89 8e f4 00 01
	00		 mov	 DWORD PTR [esi+65780], ecx
  00343	e8 00 00 00 00	 call	 _malloc

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00348	8b 4d f4	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  0034b	03 4d 08	 add	 ecx, DWORD PTR _offset_central_dir$1$[ebp]
  0034e	89 45 ec	 mov	 DWORD PTR _buf_read$1$[ebp], eax
  00351	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  00354	13 45 f0	 adc	 eax, DWORD PTR _offset_central_dir$2$[ebp]
  00357	6a 00		 push	 0
  00359	50		 push	 eax
  0035a	51		 push	 ecx
  0035b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0035e	89 4d d8	 mov	 DWORD PTR tv558[ebp], ecx
  00361	56		 push	 esi
  00362	89 45 e0	 mov	 DWORD PTR tv559[ebp], eax
  00365	e8 00 00 00 00	 call	 _call_zseek64
  0036a	83 c4 18	 add	 esp, 24			; 00000018H
  0036d	85 c0		 test	 eax, eax
  0036f	b8 ff ff ff ff	 mov	 eax, -1
  00374	0f 45 f8	 cmovne	 edi, eax

; 817  :       err=ZIP_ERRNO;
; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  00377	8b 45 fc	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  0037a	85 c0		 test	 eax, eax
  0037c	75 04		 jne	 SHORT $LL7@LoadCentra
  0037e	85 db		 test	 ebx, ebx
  00380	74 6f		 je	 SHORT $LN62@LoadCentra
$LL7@LoadCentra:
  00382	85 ff		 test	 edi, edi
  00384	75 6b		 jne	 SHORT $LN62@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  00386	bf f0 0f 00 00	 mov	 edi, 4080		; 00000ff0H
  0038b	89 7d f0	 mov	 DWORD PTR _read_this$1$[ebp], edi
  0038e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _read_this$2$[ebp], 0

; 822  :       if (read_this > size_central_dir_to_read)

  00395	85 c0		 test	 eax, eax
  00397	77 0e		 ja	 SHORT $LN5@LoadCentra
  00399	72 04		 jb	 SHORT $LN57@LoadCentra
  0039b	3b df		 cmp	 ebx, edi
  0039d	73 08		 jae	 SHORT $LN5@LoadCentra
$LN57@LoadCentra:

; 823  :         read_this = size_central_dir_to_read;

  0039f	8b fb		 mov	 edi, ebx
  003a1	89 5d f0	 mov	 DWORD PTR _read_this$1$[ebp], ebx
  003a4	89 45 08	 mov	 DWORD PTR _read_this$2$[ebp], eax
$LN5@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  003a7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003aa	57		 push	 edi
  003ab	ff 75 ec	 push	 DWORD PTR _buf_read$1$[ebp]
  003ae	ff 76 2c	 push	 DWORD PTR [esi+44]
  003b1	ff 76 1c	 push	 DWORD PTR [esi+28]
  003b4	ff d0		 call	 eax
  003b6	83 c4 10	 add	 esp, 16			; 00000010H
  003b9	33 c9		 xor	 ecx, ecx
  003bb	3b c7		 cmp	 eax, edi
  003bd	75 19		 jne	 SHORT $LN58@LoadCentra
  003bf	3b 4d 08	 cmp	 ecx, DWORD PTR _read_this$2$[ebp]
  003c2	75 14		 jne	 SHORT $LN58@LoadCentra

; 827  : 
; 828  :       if (err==ZIP_OK)
; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  003c4	57		 push	 edi
  003c5	ff 75 ec	 push	 DWORD PTR _buf_read$1$[ebp]
  003c8	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 _add_data_in_datablock
  003d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d4	8b f8		 mov	 edi, eax
  003d6	eb 03		 jmp	 SHORT $LN3@LoadCentra
$LN58@LoadCentra:

; 826  :         err=ZIP_ERRNO;

  003d8	83 cf ff	 or	 edi, -1
$LN3@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  003db	2b 5d f0	 sub	 ebx, DWORD PTR _read_this$1$[ebp]
  003de	8b 45 fc	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  003e1	1b 45 08	 sbb	 eax, DWORD PTR _read_this$2$[ebp]
  003e4	89 45 fc	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  003e7	85 c0		 test	 eax, eax
  003e9	77 97		 ja	 SHORT $LL7@LoadCentra

; 817  :       err=ZIP_ERRNO;
; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  003eb	72 04		 jb	 SHORT $LN62@LoadCentra
  003ed	85 db		 test	 ebx, ebx
  003ef	75 91		 jne	 SHORT $LL7@LoadCentra
$LN62@LoadCentra:

; 832  :     }
; 833  :     TRYFREE(buf_read);

  003f1	8b 45 ec	 mov	 eax, DWORD PTR _buf_read$1$[ebp]
  003f4	85 c0		 test	 eax, eax
  003f6	74 09		 je	 SHORT $LN2@LoadCentra
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 _free
  003fe	83 c4 04	 add	 esp, 4
$LN2@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  00401	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]

; 836  :   pziinit->number_entry = number_entry_CD;
; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00404	6a 00		 push	 0
  00406	ff 75 e0	 push	 DWORD PTR tv559[ebp]
  00409	89 86 e8 00 01
	00		 mov	 DWORD PTR [esi+65768], eax
  0040f	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  00412	ff 75 d8	 push	 DWORD PTR tv558[ebp]
  00415	89 86 ec 00 01
	00		 mov	 DWORD PTR [esi+65772], eax
  0041b	8b 45 e8	 mov	 eax, DWORD PTR _number_entry_CD$1$[ebp]
  0041e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00421	89 86 f8 00 01
	00		 mov	 DWORD PTR [esi+65784], eax
  00427	8b 45 e4	 mov	 eax, DWORD PTR _number_entry_CD$2$[ebp]
  0042a	56		 push	 esi
  0042b	89 86 fc 00 01
	00		 mov	 DWORD PTR [esi+65788], eax
  00431	e8 00 00 00 00	 call	 _call_zseek64
  00436	83 c4 14	 add	 esp, 20			; 00000014H
  00439	85 c0		 test	 eax, eax
  0043b	b8 ff ff ff ff	 mov	 eax, -1
  00440	0f 45 f8	 cmovne	 edi, eax

; 839  :     err=ZIP_ERRNO;
; 840  : 
; 841  :   return err;

  00443	8b c7		 mov	 eax, edi
  00445	5f		 pop	 edi
  00446	5e		 pop	 esi
  00447	5b		 pop	 ebx

; 842  : }

  00448	8b e5		 mov	 esp, ebp
  0044a	5d		 pop	 ebp
  0044b	c3		 ret	 0
$LN51@LoadCentra:

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  0044c	ff 76 2c	 push	 DWORD PTR [esi+44]
  0044f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00452	ff 76 1c	 push	 DWORD PTR [esi+28]
  00455	ff d1		 call	 ecx
  00457	83 c4 08	 add	 esp, 8

; 796  :     return ZIP_ERRNO;

  0045a	83 c8 ff	 or	 eax, -1
  0045d	5f		 pop	 edi
  0045e	5e		 pop	 esi
  0045f	5b		 pop	 ebx

; 842  : }

  00460	8b e5		 mov	 esp, ebp
  00462	5d		 pop	 ebp
  00463	c3		 ret	 0
_LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir64
_TEXT	SEGMENT
_relativeOffset$ = -40					; size = 8
_uPosFound$ = -40					; size = 8
_uReadPos$1$ = -36					; size = 4
_uBackRead$2$ = -32					; size = 4
_uReadPos$2$ = -28					; size = 4
_uSizeFile$1$ = -24					; size = 4
_uSizeFile$2$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$2$ = -8					; size = 4
_uMaxBack$1$ = -4					; size = 4
_uL$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 548  :   ZPOS64_T uPosFound=0;
; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
  0000e	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00013	6a 02		 push	 2
  00015	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00018	33 c0		 xor	 eax, eax
  0001a	50		 push	 eax
  0001b	50		 push	 eax
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	89 45 f8	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00024	66 0f 13 45 d8	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  00029	e8 00 00 00 00	 call	 _call_zseek64
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	85 c0		 test	 eax, eax
  00033	74 0a		 je	 SHORT $LN25@zip64local

; 553  :     return 0;

  00035	5f		 pop	 edi
  00036	33 c0		 xor	 eax, eax
  00038	33 d2		 xor	 edx, edx
  0003a	5b		 pop	 ebx

; 638  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN25@zip64local:

; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003f	57		 push	 edi
  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 _call_ztell64
  00046	8b ca		 mov	 ecx, edx
  00048	83 c4 08	 add	 esp, 8
  0004b	89 45 e8	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004e	89 4d ec	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  00051	85 c9		 test	 ecx, ecx
  00053	77 0f		 ja	 SHORT $LN24@zip64local
  00055	72 07		 jb	 SHORT $LN40@zip64local
  00057	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005c	73 06		 jae	 SHORT $LN24@zip64local
$LN40@zip64local:

; 558  :     uMaxBack = uSizeFile;

  0005e	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00061	89 4d f8	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN24@zip64local:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00064	56		 push	 esi
  00065	68 04 04 00 00	 push	 1028			; 00000404H
  0006a	e8 00 00 00 00	 call	 _malloc
  0006f	8b f0		 mov	 esi, eax
  00071	83 c4 04	 add	 esp, 4

; 561  :   if (buf==NULL)
; 562  :     return 0;

  00074	33 c0		 xor	 eax, eax
  00076	85 f6		 test	 esi, esi
  00078	0f 84 ca 01 00
	00		 je	 $LN57@zip64local

; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  0007e	8b 55 f8	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  00081	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00084	3b c2		 cmp	 eax, edx
  00086	0f 87 c5 01 00
	00		 ja	 $LN47@zip64local
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  0008f	72 08		 jb	 SHORT $LN45@zip64local
  00091	3b d9		 cmp	 ebx, ecx
  00093	0f 83 b8 01 00
	00		 jae	 $LN47@zip64local
$LN45@zip64local:
  00099	8b 7d dc	 mov	 edi, DWORD PTR _uPosFound$[ebp+4]
  0009c	89 7d f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0009f	8b 7d d8	 mov	 edi, DWORD PTR _uPosFound$[ebp]
  000a2	89 7d f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edi
  000a5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL22@zip64local:

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000b0	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000b6	83 d0 00	 adc	 eax, 0
  000b9	89 45 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000bc	3b c2		 cmp	 eax, edx
  000be	72 0d		 jb	 SHORT $LN20@zip64local
  000c0	77 04		 ja	 SHORT $LN42@zip64local
  000c2	3b d9		 cmp	 ebx, ecx
  000c4	76 07		 jbe	 SHORT $LN20@zip64local
$LN42@zip64local:

; 571  :       uBackRead = uMaxBack;

  000c6	8b d9		 mov	 ebx, ecx
  000c8	8b c2		 mov	 eax, edx
  000ca	89 55 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], edx
$LN20@zip64local:

; 572  :     else
; 573  :       uBackRead+=BUFREADCOMMENT;
; 574  :     uReadPos = uSizeFile-uBackRead ;

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000d0	8b 7d ec	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000d3	8b d1		 mov	 edx, ecx
  000d5	2b d3		 sub	 edx, ebx
  000d7	1b f8		 sbb	 edi, eax

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000d9	8b 45 ec	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000dc	2b ca		 sub	 ecx, edx
  000de	1b c7		 sbb	 eax, edi
  000e0	89 55 dc	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000e3	89 7d e4	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000e6	85 c0		 test	 eax, eax
  000e8	72 11		 jb	 SHORT $LN28@zip64local
  000ea	77 08		 ja	 SHORT $LN43@zip64local
  000ec	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000f2	76 07		 jbe	 SHORT $LN28@zip64local
$LN43@zip64local:
  000f4	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000f9	eb 05		 jmp	 SHORT $LN29@zip64local
$LN28@zip64local:
  000fb	8b 7d e8	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000fe	2b fa		 sub	 edi, edx
$LN29@zip64local:

; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00100	6a 00		 push	 0
  00102	ff 75 e4	 push	 DWORD PTR _uReadPos$2$[ebp]
  00105	52		 push	 edx
  00106	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00109	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0010c	e8 00 00 00 00	 call	 _call_zseek64
  00111	83 c4 14	 add	 esp, 20			; 00000014H
  00114	85 c0		 test	 eax, eax
  00116	75 70		 jne	 SHORT $LN52@zip64local

; 579  :       break;
; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00118	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0011b	57		 push	 edi
  0011c	56		 push	 esi
  0011d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00120	ff 70 1c	 push	 DWORD PTR [eax+28]
  00123	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00126	ff d0		 call	 eax
  00128	83 c4 10	 add	 esp, 16			; 00000010H
  0012b	3b c7		 cmp	 eax, edi
  0012d	75 59		 jne	 SHORT $LN52@zip64local

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  0012f	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00132	85 c0		 test	 eax, eax
  00134	7e 37		 jle	 SHORT $LN48@zip64local
$LL16@zip64local:
  00136	48		 dec	 eax

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00137	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  0013b	75 15		 jne	 SHORT $LN14@zip64local
  0013d	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  00142	75 0e		 jne	 SHORT $LN14@zip64local
  00144	80 7c 30 02 06	 cmp	 BYTE PTR [eax+esi+2], 6
  00149	75 07		 jne	 SHORT $LN14@zip64local
  0014b	80 7c 30 03 07	 cmp	 BYTE PTR [eax+esi+3], 7
  00150	74 06		 je	 SHORT $LN32@zip64local
$LN14@zip64local:

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  00152	85 c0		 test	 eax, eax
  00154	7f e0		 jg	 SHORT $LL16@zip64local
  00156	eb 15		 jmp	 SHORT $LN48@zip64local
$LN32@zip64local:

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  00158	99		 cdq
  00159	03 45 dc	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  0015c	8b fa		 mov	 edi, edx
  0015e	13 7d e4	 adc	 edi, DWORD PTR _uReadPos$2$[ebp]

; 590  :         break;
; 591  :       }
; 592  :     }
; 593  : 
; 594  :       if (uPosFound!=0)

  00161	8b c8		 mov	 ecx, eax
  00163	0b cf		 or	 ecx, edi
  00165	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  00168	89 7d f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0016b	75 1b		 jne	 SHORT $LN52@zip64local
$LN48@zip64local:

; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  0016d	8b 45 e0	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  00170	8b 55 f8	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  00176	3b c2		 cmp	 eax, edx
  00178	0f 82 32 ff ff
	ff		 jb	 $LL22@zip64local
  0017e	77 08		 ja	 SHORT $LN52@zip64local
  00180	3b d9		 cmp	 ebx, ecx
  00182	0f 82 28 ff ff
	ff		 jb	 $LL22@zip64local
$LN52@zip64local:
  00188	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
$LN44@zip64local:

; 595  :         break;
; 596  :   }
; 597  : 
; 598  :   TRYFREE(buf);

  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 _free

; 599  :   if (uPosFound == 0)

  00191	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$2$[ebp]
  00194	8b 4d f0	 mov	 ecx, DWORD PTR _uPosFound$1$[ebp]
  00197	8b c2		 mov	 eax, edx
  00199	83 c4 04	 add	 esp, 4
  0019c	0b c1		 or	 eax, ecx
  0019e	0f 84 a2 00 00
	00		 je	 $LN56@zip64local

; 600  :     return 0;
; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001a4	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a7	6a 00		 push	 0
  001a9	51		 push	 ecx
  001aa	52		 push	 edx
  001ab	57		 push	 edi
  001ac	53		 push	 ebx
  001ad	e8 00 00 00 00	 call	 _call_zseek64
  001b2	83 c4 14	 add	 esp, 20			; 00000014H
  001b5	85 c0		 test	 eax, eax
  001b7	0f 85 89 00 00
	00		 jne	 $LN56@zip64local

; 604  :     return 0;
; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001bd	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001c0	50		 push	 eax
  001c1	57		 push	 edi
  001c2	53		 push	 ebx
  001c3	e8 00 00 00 00	 call	 _zip64local_getLong
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	85 c0		 test	 eax, eax
  001cd	75 77		 jne	 SHORT $LN56@zip64local

; 608  :     return 0;
; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001cf	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001d2	50		 push	 eax
  001d3	57		 push	 edi
  001d4	53		 push	 ebx
  001d5	e8 00 00 00 00	 call	 _zip64local_getLong
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH
  001dd	85 c0		 test	 eax, eax
  001df	75 65		 jne	 SHORT $LN56@zip64local

; 612  :     return 0;
; 613  :   if (uL != 0)

  001e1	39 45 fc	 cmp	 DWORD PTR _uL$[ebp], eax
  001e4	75 60		 jne	 SHORT $LN56@zip64local

; 614  :     return 0;
; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  001e6	8d 45 d8	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  001e9	50		 push	 eax
  001ea	57		 push	 edi
  001eb	53		 push	 ebx
  001ec	e8 00 00 00 00	 call	 _zip64local_getLong64
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f4	85 c0		 test	 eax, eax
  001f6	75 4e		 jne	 SHORT $LN56@zip64local

; 618  :     return 0;
; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001f8	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001fb	50		 push	 eax
  001fc	57		 push	 edi
  001fd	53		 push	 ebx
  001fe	e8 00 00 00 00	 call	 _zip64local_getLong
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH
  00206	85 c0		 test	 eax, eax
  00208	75 3c		 jne	 SHORT $LN56@zip64local

; 622  :     return 0;
; 623  :   if (uL != 1)

  0020a	83 7d fc 01	 cmp	 DWORD PTR _uL$[ebp], 1
  0020e	75 36		 jne	 SHORT $LN56@zip64local

; 624  :     return 0;
; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00210	8b 75 dc	 mov	 esi, DWORD PTR _relativeOffset$[ebp+4]
  00213	8b 7d d8	 mov	 edi, DWORD PTR _relativeOffset$[ebp]
  00216	50		 push	 eax
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0021c	53		 push	 ebx
  0021d	e8 00 00 00 00	 call	 _call_zseek64
  00222	83 c4 14	 add	 esp, 20			; 00000014H
  00225	85 c0		 test	 eax, eax
  00227	75 1d		 jne	 SHORT $LN56@zip64local

; 628  :     return 0;
; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00229	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0022c	50		 push	 eax
  0022d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00230	53		 push	 ebx
  00231	e8 00 00 00 00	 call	 _zip64local_getLong
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH
  00239	85 c0		 test	 eax, eax
  0023b	75 09		 jne	 SHORT $LN56@zip64local

; 632  :     return 0;
; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  0023d	81 7d fc 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  00244	74 1c		 je	 SHORT $LN1@zip64local
$LN56@zip64local:

; 635  :     return 0;

  00246	33 c0		 xor	 eax, eax
$LN57@zip64local:
  00248	5e		 pop	 esi
  00249	5f		 pop	 edi
  0024a	33 d2		 xor	 edx, edx
  0024c	5b		 pop	 ebx

; 638  : }

  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c3		 ret	 0
$LN47@zip64local:

; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  00251	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  00254	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  00257	8b 45 d8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0025a	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0025d	e9 29 ff ff ff	 jmp	 $LN44@zip64local
$LN1@zip64local:

; 636  : 
; 637  :   return relativeOffset;

  00262	8b d6		 mov	 edx, esi
  00264	5e		 pop	 esi
  00265	8b c7		 mov	 eax, edi
  00267	5f		 pop	 edi
  00268	5b		 pop	 ebx

; 638  : }

  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir
_TEXT	SEGMENT
_uPosFound$ = -40					; size = 8
_uReadPos$1$ = -36					; size = 4
_uBackRead$2$ = -32					; size = 4
_uReadPos$2$ = -28					; size = 4
_uSizeFile$1$ = -24					; size = 4
_uSizeFile$2$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uMaxBack$2$ = -4					; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 486  :   ZPOS64_T uPosFound=0;
; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _filestream$[ebp]
  0000e	57		 push	 edi
  0000f	33 c0		 xor	 eax, eax
  00011	6a 02		 push	 2
  00013	50		 push	 eax
  00014	50		 push	 eax
  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	56		 push	 esi
  00019	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  0001e	53		 push	 ebx
  0001f	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00022	89 45 fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00025	66 0f 13 45 d8	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002a	e8 00 00 00 00	 call	 _call_zseek64
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	85 c0		 test	 eax, eax
  00034	74 0b		 je	 SHORT $LN14@zip64local

; 489  :     return 0;

  00036	33 c0		 xor	 eax, eax
$LN38@zip64local:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	33 d2		 xor	 edx, edx
  0003c	5b		 pop	 ebx

; 534  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN14@zip64local:

; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00041	56		 push	 esi
  00042	53		 push	 ebx
  00043	e8 00 00 00 00	 call	 _call_ztell64
  00048	8b ca		 mov	 ecx, edx
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 45 e8	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  00050	89 4d ec	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  00053	85 c9		 test	 ecx, ecx
  00055	77 11		 ja	 SHORT $LN13@zip64local
  00057	72 07		 jb	 SHORT $LN29@zip64local
  00059	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005e	73 08		 jae	 SHORT $LN13@zip64local
$LN29@zip64local:

; 495  :     uMaxBack = uSizeFile;

  00060	8b f8		 mov	 edi, eax
  00062	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00065	89 4d fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN13@zip64local:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00068	68 04 04 00 00	 push	 1028			; 00000404H
  0006d	e8 00 00 00 00	 call	 _malloc
  00072	8b f0		 mov	 esi, eax
  00074	83 c4 04	 add	 esp, 4

; 498  :   if (buf==NULL)
; 499  :     return 0;

  00077	33 c0		 xor	 eax, eax
  00079	85 f6		 test	 esi, esi
  0007b	74 bb		 je	 SHORT $LN38@zip64local

; 500  : 
; 501  :   uBackRead = 4;
; 502  :   while (uBackRead<uMaxBack)

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00080	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00083	3b c1		 cmp	 eax, ecx
  00085	0f 87 ec 00 00
	00		 ja	 $LN36@zip64local
  0008b	72 08		 jb	 SHORT $LN34@zip64local
  0008d	3b df		 cmp	 ebx, edi
  0008f	0f 83 e2 00 00
	00		 jae	 $LN36@zip64local
$LN34@zip64local:
  00095	8b 55 dc	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  00098	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  0009b	8b 55 d8	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  0009e	89 55 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
$LL11@zip64local:

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a1	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000a7	83 d0 00	 adc	 eax, 0
  000aa	89 45 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000ad	3b c1		 cmp	 eax, ecx
  000af	72 0d		 jb	 SHORT $LN9@zip64local
  000b1	77 04		 ja	 SHORT $LN31@zip64local
  000b3	3b df		 cmp	 ebx, edi
  000b5	76 07		 jbe	 SHORT $LN9@zip64local
$LN31@zip64local:

; 508  :       uBackRead = uMaxBack;

  000b7	8b df		 mov	 ebx, edi
  000b9	8b c1		 mov	 eax, ecx
  000bb	89 4d e0	 mov	 DWORD PTR _uBackRead$2$[ebp], ecx
$LN9@zip64local:

; 509  :     else
; 510  :       uBackRead+=BUFREADCOMMENT;
; 511  :     uReadPos = uSizeFile-uBackRead ;

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000c1	8b 7d ec	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000c4	8b d1		 mov	 edx, ecx
  000c6	2b d3		 sub	 edx, ebx
  000c8	1b f8		 sbb	 edi, eax

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000cd	2b ca		 sub	 ecx, edx
  000cf	1b c7		 sbb	 eax, edi
  000d1	89 55 dc	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000d4	89 7d e4	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000d7	85 c0		 test	 eax, eax
  000d9	72 11		 jb	 SHORT $LN17@zip64local
  000db	77 08		 ja	 SHORT $LN32@zip64local
  000dd	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000e3	76 07		 jbe	 SHORT $LN17@zip64local
$LN32@zip64local:
  000e5	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000ea	eb 05		 jmp	 SHORT $LN18@zip64local
$LN17@zip64local:
  000ec	8b 7d e8	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000ef	2b fa		 sub	 edi, edx
$LN18@zip64local:

; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f1	6a 00		 push	 0
  000f3	ff 75 e4	 push	 DWORD PTR _uReadPos$2$[ebp]
  000f6	52		 push	 edx
  000f7	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000fa	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000fd	e8 00 00 00 00	 call	 _call_zseek64
  00102	83 c4 14	 add	 esp, 20			; 00000014H
  00105	85 c0		 test	 eax, eax
  00107	75 7a		 jne	 SHORT $LN33@zip64local

; 516  :       break;
; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00109	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0010c	57		 push	 edi
  0010d	56		 push	 esi
  0010e	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00111	ff 70 1c	 push	 DWORD PTR [eax+28]
  00114	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00117	ff d0		 call	 eax
  00119	83 c4 10	 add	 esp, 16			; 00000010H
  0011c	3b c7		 cmp	 eax, edi
  0011e	75 63		 jne	 SHORT $LN33@zip64local

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  00120	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00123	85 c0		 test	 eax, eax
  00125	7e 33		 jle	 SHORT $LN37@zip64local
$LL5@zip64local:
  00127	48		 dec	 eax

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00128	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  0012c	75 15		 jne	 SHORT $LN3@zip64local
  0012e	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  00133	75 0e		 jne	 SHORT $LN3@zip64local
  00135	80 7c 30 02 05	 cmp	 BYTE PTR [eax+esi+2], 5
  0013a	75 07		 jne	 SHORT $LN3@zip64local
  0013c	80 7c 30 03 06	 cmp	 BYTE PTR [eax+esi+3], 6
  00141	74 06		 je	 SHORT $LN21@zip64local
$LN3@zip64local:

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  00143	85 c0		 test	 eax, eax
  00145	7f e0		 jg	 SHORT $LL5@zip64local
  00147	eb 11		 jmp	 SHORT $LN37@zip64local
$LN21@zip64local:

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  00149	99		 cdq
  0014a	03 45 dc	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  0014d	13 55 e4	 adc	 edx, DWORD PTR _uReadPos$2$[ebp]
  00150	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax

; 526  :         break;
; 527  :       }
; 528  : 
; 529  :       if (uPosFound!=0)

  00153	0b c2		 or	 eax, edx
  00155	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  00158	75 29		 jne	 SHORT $LN33@zip64local
$LN37@zip64local:

; 500  : 
; 501  :   uBackRead = 4;
; 502  :   while (uBackRead<uMaxBack)

  0015a	8b 45 e0	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00160	8b 7d f8	 mov	 edi, DWORD PTR _uMaxBack$1$[ebp]
  00163	3b c1		 cmp	 eax, ecx
  00165	0f 82 36 ff ff
	ff		 jb	 $LL11@zip64local
  0016b	77 16		 ja	 SHORT $LN33@zip64local
  0016d	3b df		 cmp	 ebx, edi
  0016f	0f 82 2c ff ff
	ff		 jb	 $LL11@zip64local
  00175	eb 0c		 jmp	 SHORT $LN33@zip64local
$LN36@zip64local:
  00177	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  0017a	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  0017d	8b 45 d8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00180	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
$LN33@zip64local:

; 530  :         break;
; 531  :   }
; 532  :   TRYFREE(buf);

  00183	56		 push	 esi
  00184	e8 00 00 00 00	 call	 _free

; 533  :   return uPosFound;

  00189	8b 45 f4	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  0018c	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]
  0018f	83 c4 04	 add	 esp, 4
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	5b		 pop	 ebx

; 534  : }

  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
_zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong64
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;
; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	e8 00 00 00 00	 call	 _zip64local_getByte

; 433  :   x = (ZPOS64_T)i;

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00020	8b f0		 mov	 esi, eax
  00022	8b c1		 mov	 eax, ecx
  00024	99		 cdq
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	8b f8		 mov	 edi, eax
  0002a	8b da		 mov	 ebx, edx

; 434  : 
; 435  :   if (err==ZIP_OK)

  0002c	85 f6		 test	 esi, esi
  0002e	75 17		 jne	 SHORT $LN9@zip64local

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00033	50		 push	 eax
  00034	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00037	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0003a	e8 00 00 00 00	 call	 _zip64local_getByte
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	8b f0		 mov	 esi, eax
$LN9@zip64local:

; 437  :   x += ((ZPOS64_T)i)<<8;

  00047	8b c1		 mov	 eax, ecx
  00049	99		 cdq
  0004a	0f a4 c2 08	 shld	 edx, eax, 8
  0004e	c1 e0 08	 shl	 eax, 8
  00051	03 f8		 add	 edi, eax
  00053	13 da		 adc	 ebx, edx

; 438  : 
; 439  :   if (err==ZIP_OK)

  00055	85 f6		 test	 esi, esi
  00057	75 17		 jne	 SHORT $LN8@zip64local

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00059	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0005c	50		 push	 eax
  0005d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00060	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00063	e8 00 00 00 00	 call	 _zip64local_getByte
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	8b f0		 mov	 esi, eax
$LN8@zip64local:

; 441  :   x += ((ZPOS64_T)i)<<16;

  00070	8b c1		 mov	 eax, ecx
  00072	99		 cdq
  00073	0f a4 c2 10	 shld	 edx, eax, 16
  00077	c1 e0 10	 shl	 eax, 16			; 00000010H
  0007a	03 f8		 add	 edi, eax
  0007c	13 da		 adc	 ebx, edx

; 442  : 
; 443  :   if (err==ZIP_OK)

  0007e	85 f6		 test	 esi, esi
  00080	75 17		 jne	 SHORT $LN7@zip64local

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00082	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00085	50		 push	 eax
  00086	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00089	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0008c	e8 00 00 00 00	 call	 _zip64local_getByte
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b f0		 mov	 esi, eax
$LN7@zip64local:

; 445  :   x += ((ZPOS64_T)i)<<24;

  00099	8b c1		 mov	 eax, ecx
  0009b	99		 cdq
  0009c	0f a4 c2 18	 shld	 edx, eax, 24
  000a0	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a3	03 f8		 add	 edi, eax
  000a5	13 da		 adc	 ebx, edx

; 446  : 
; 447  :   if (err==ZIP_OK)

  000a7	85 f6		 test	 esi, esi
  000a9	75 17		 jne	 SHORT $LN6@zip64local

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000ab	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000ae	50		 push	 eax
  000af	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000b2	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000b5	e8 00 00 00 00	 call	 _zip64local_getByte
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	8b f0		 mov	 esi, eax
$LN6@zip64local:

; 449  :   x += ((ZPOS64_T)i)<<32;

  000c2	8b c1		 mov	 eax, ecx
  000c4	99		 cdq
  000c5	83 c7 00	 add	 edi, 0
  000c8	13 d8		 adc	 ebx, eax

; 450  : 
; 451  :   if (err==ZIP_OK)

  000ca	85 f6		 test	 esi, esi
  000cc	75 17		 jne	 SHORT $LN5@zip64local

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000ce	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000d1	50		 push	 eax
  000d2	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000d5	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000d8	e8 00 00 00 00	 call	 _zip64local_getByte
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	8b f0		 mov	 esi, eax
$LN5@zip64local:

; 453  :   x += ((ZPOS64_T)i)<<40;

  000e5	8b c1		 mov	 eax, ecx
  000e7	99		 cdq
  000e8	c1 e0 08	 shl	 eax, 8
  000eb	83 c7 00	 add	 edi, 0
  000ee	13 d8		 adc	 ebx, eax

; 454  : 
; 455  :   if (err==ZIP_OK)

  000f0	85 f6		 test	 esi, esi
  000f2	75 17		 jne	 SHORT $LN4@zip64local

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000f4	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000f7	50		 push	 eax
  000f8	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000fb	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000fe	e8 00 00 00 00	 call	 _zip64local_getByte
  00103	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	8b f0		 mov	 esi, eax
$LN4@zip64local:

; 457  :   x += ((ZPOS64_T)i)<<48;

  0010b	8b c1		 mov	 eax, ecx
  0010d	99		 cdq
  0010e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00111	83 c7 00	 add	 edi, 0
  00114	13 d8		 adc	 ebx, eax

; 458  : 
; 459  :   if (err==ZIP_OK)

  00116	85 f6		 test	 esi, esi
  00118	75 36		 jne	 SHORT $LN2@zip64local

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0011a	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0011d	50		 push	 eax
  0011e	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00121	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00124	e8 00 00 00 00	 call	 _zip64local_getByte
  00129	8b f0		 mov	 esi, eax
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  :   x += ((ZPOS64_T)i)<<56;
; 462  : 
; 463  :   if (err==ZIP_OK)

  0012e	85 f6		 test	 esi, esi
  00130	75 1e		 jne	 SHORT $LN2@zip64local

; 464  :     *pX = x;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00135	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  00138	99		 cdq
  00139	33 d2		 xor	 edx, edx
  0013b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0013e	03 d7		 add	 edx, edi
  00140	13 c3		 adc	 eax, ebx
  00142	5f		 pop	 edi
  00143	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 467  : 
; 468  :   return err;

  00146	8b c6		 mov	 eax, esi
  00148	5e		 pop	 esi
  00149	89 11		 mov	 DWORD PTR [ecx], edx
  0014b	5b		 pop	 ebx

; 469  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
$LN2@zip64local:

; 465  :   else
; 466  :     *pX = 0;

  00150	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00153	5f		 pop	 edi
  00154	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0015a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 467  : 
; 468  :   return err;

  00161	8b c6		 mov	 eax, esi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx

; 469  : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
_zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong PROC				; COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 397  :     uLong x ;
; 398  :     int i = 0;
; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
  0000d	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001a	e8 00 00 00 00	 call	 _zip64local_getByte

; 402  :     x = (uLong)i;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00022	8b d0		 mov	 edx, eax
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	8b f1		 mov	 esi, ecx

; 403  : 
; 404  :     if (err==ZIP_OK)

  00029	85 d2		 test	 edx, edx
  0002b	75 13		 jne	 SHORT $LN5@zip64local

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002d	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _zip64local_getByte
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	8b d0		 mov	 edx, eax
$LN5@zip64local:

; 406  :     x += ((uLong)i)<<8;

  00040	8b c1		 mov	 eax, ecx
  00042	c1 e0 08	 shl	 eax, 8
  00045	03 f0		 add	 esi, eax

; 407  : 
; 408  :     if (err==ZIP_OK)

  00047	85 d2		 test	 edx, edx
  00049	75 13		 jne	 SHORT $LN4@zip64local

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004b	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _zip64local_getByte
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	8b d0		 mov	 edx, eax
$LN4@zip64local:

; 410  :     x += ((uLong)i)<<16;

  0005e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00061	03 f1		 add	 esi, ecx

; 411  : 
; 412  :     if (err==ZIP_OK)

  00063	85 d2		 test	 edx, edx
  00065	75 2a		 jne	 SHORT $LN2@zip64local

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00067	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0006a	50		 push	 eax
  0006b	57		 push	 edi
  0006c	53		 push	 ebx
  0006d	e8 00 00 00 00	 call	 _zip64local_getByte
  00072	8b d0		 mov	 edx, eax
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  :     x += ((uLong)i)<<24;
; 415  : 
; 416  :     if (err==ZIP_OK)

  00077	85 d2		 test	 edx, edx
  00079	75 16		 jne	 SHORT $LN2@zip64local

; 417  :         *pX = x;

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007e	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00081	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00084	5f		 pop	 edi
  00085	03 ce		 add	 ecx, esi
  00087	5e		 pop	 esi
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 420  :     return err;

  0008a	8b c2		 mov	 eax, edx
  0008c	5b		 pop	 ebx

; 421  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN2@zip64local:

; 418  :     else
; 419  :         *pX = 0;

  00091	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 420  :     return err;

  0009c	8b c2		 mov	 eax, edx
  0009e	5b		 pop	 ebx

; 421  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getShort
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 375  :     uLong x ;
; 376  :     int i = 0;
; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00008	50		 push	 eax
  00009	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00016	e8 00 00 00 00	 call	 _zip64local_getByte

; 380  :     x = (uLong)i;

  0001b	8b 5d fc	 mov	 ebx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 381  : 
; 382  :     if (err==ZIP_OK)

  00023	85 d2		 test	 edx, edx
  00025	75 2c		 jne	 SHORT $LN2@zip64local

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00027	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002a	50		 push	 eax
  0002b	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0002e	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00031	e8 00 00 00 00	 call	 _zip64local_getByte
  00036	8b d0		 mov	 edx, eax
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  :     x += ((uLong)i)<<8;
; 385  : 
; 386  :     if (err==ZIP_OK)

  0003b	85 d2		 test	 edx, edx
  0003d	75 14		 jne	 SHORT $LN2@zip64local

; 387  :         *pX = x;

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00042	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00045	c1 e1 08	 shl	 ecx, 8
  00048	03 cb		 add	 ecx, ebx
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 390  :     return err;

  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx

; 391  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN2@zip64local:

; 388  :     else
; 389  :         *pX = 0;

  00053	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00056	5b		 pop	 ebx
  00057	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 390  :     return err;

  0005d	8b c2		 mov	 eax, edx

; 391  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getByte
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_c$ = 11						; size = 1
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_zip64local_getByte PROC				; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  00007	6a 01		 push	 1
  00009	8d 45 0b	 lea	 eax, DWORD PTR _c$[ebp]
  0000c	50		 push	 eax
  0000d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00010	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00013	ff 76 1c	 push	 DWORD PTR [esi+28]
  00016	ff d0		 call	 eax
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 353  :     if (err==1)

  0001b	83 f8 01	 cmp	 eax, 1
  0001e	75 0e		 jne	 SHORT $LN4@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  00020	0f b6 4d 0b	 movzx	 ecx, BYTE PTR _c$[ebp]
  00024	8b 45 10	 mov	 eax, DWORD PTR _pi$[ebp]
  00027	5e		 pop	 esi
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 356  :         return ZIP_OK;

  0002a	33 c0		 xor	 eax, eax

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN4@zip64local:

; 357  :     }
; 358  :     else
; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0002e	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00031	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00034	ff 76 1c	 push	 DWORD PTR [esi+28]
  00037	ff d0		 call	 eax
  00039	83 c4 08	 add	 esp, 8
  0003c	f7 d8		 neg	 eax
  0003e	1b c0		 sbb	 eax, eax
  00040	5e		 pop	 esi

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_TmzDateToDosDate
_TEXT	SEGMENT
_ptm$ = 8						; size = 4
_zip64local_TmzDateToDosDate PROC			; COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 334  :     uLong year = (uLong)ptm->tm_year;

  00004	8b 75 08	 mov	 esi, DWORD PTR _ptm$[ebp]
  00007	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 335  :     if (year>=1980)

  0000a	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  00010	72 08		 jb	 SHORT $LN3@zip64local

; 336  :         year-=1980;

  00012	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  00018	eb 08		 jmp	 SHORT $LN1@zip64local
$LN3@zip64local:

; 337  :     else if (year>=80)

  0001a	83 fa 50	 cmp	 edx, 80			; 00000050H
  0001d	72 03		 jb	 SHORT $LN1@zip64local

; 338  :         year-=80;

  0001f	83 ea 50	 sub	 edx, 80			; 00000050H
$LN1@zip64local:

; 339  :     return
; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00027	c1 e0 06	 shl	 eax, 6
  0002a	03 46 04	 add	 eax, DWORD PTR [esi+4]
  0002d	d1 e9		 shr	 ecx, 1
  0002f	c1 e0 05	 shl	 eax, 5
  00032	03 c1		 add	 eax, ecx
  00034	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00037	41		 inc	 ecx
  00038	c1 e2 04	 shl	 edx, 4
  0003b	03 ca		 add	 ecx, edx
  0003d	c1 e1 05	 shl	 ecx, 5
  00040	03 4e 0c	 add	 ecx, DWORD PTR [esi+12]
  00043	5e		 pop	 esi
  00044	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00047	0b c1		 or	 eax, ecx

; 342  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue_inmemory
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_x$ = 12						; size = 8
_nbByte$ = 20						; size = 4
_zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  :     unsigned char* buf=(unsigned char*)dest;
; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  00003	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp+4]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 14	 mov	 esi, DWORD PTR _nbByte$[ebp]
  0000d	33 d2		 xor	 edx, edx
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _dest$[ebp]
  00013	85 f6		 test	 esi, esi
  00015	7e 0f		 jle	 SHORT $LN5@zip64local
$LL14@zip64local:

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  00017	88 0c 3a	 mov	 BYTE PTR [edx+edi], cl

; 317  :         x >>= 8;

  0001a	0f ac c1 08	 shrd	 ecx, eax, 8
  0001e	42		 inc	 edx
  0001f	c1 e8 08	 shr	 eax, 8
  00022	3b d6		 cmp	 edx, esi
  00024	7c f1		 jl	 SHORT $LL14@zip64local
$LN5@zip64local:

; 318  :     }
; 319  : 
; 320  :     if (x != 0)

  00026	0b c8		 or	 ecx, eax
  00028	74 17		 je	 SHORT $LN3@zip64local

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  0002a	85 f6		 test	 esi, esi
  0002c	7e 13		 jle	 SHORT $LN3@zip64local
  0002e	8b ce		 mov	 ecx, esi
  00030	8b d1		 mov	 edx, ecx
  00032	c1 e9 02	 shr	 ecx, 2
  00035	83 c8 ff	 or	 eax, -1
  00038	f3 ab		 rep stosd
  0003a	8b ca		 mov	 ecx, edx
  0003c	83 e1 03	 and	 ecx, 3
  0003f	f3 aa		 rep stosb
$LN3@zip64local:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 323  :        {
; 324  :           buf[n] = 0xff;
; 325  :        }
; 326  :     }
; 327  : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_buf$ = 16						; size = 8
_x$ = 16						; size = 8
_nbByte$ = 24						; size = 4
_zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00003	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp+4]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR _nbByte$[ebp]
  0000d	33 d2		 xor	 edx, edx
  0000f	85 f6		 test	 esi, esi
  00011	7e 10		 jle	 SHORT $LN7@zip64local
$LL16@zip64local:

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00013	88 4c 15 10	 mov	 BYTE PTR _buf$[ebp+edx], cl

; 294  :         x >>= 8;

  00017	0f ac c1 08	 shrd	 ecx, eax, 8
  0001b	42		 inc	 edx
  0001c	c1 e8 08	 shr	 eax, 8
  0001f	3b d6		 cmp	 edx, esi
  00021	7c f0		 jl	 SHORT $LL16@zip64local
$LN7@zip64local:

; 295  :     }
; 296  :     if (x != 0)

  00023	0b c8		 or	 ecx, eax
  00025	74 1c		 je	 SHORT $LN5@zip64local

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00027	85 f6		 test	 esi, esi
  00029	7e 18		 jle	 SHORT $LN5@zip64local
  0002b	57		 push	 edi
  0002c	8b ce		 mov	 ecx, esi
  0002e	8b d1		 mov	 edx, ecx
  00030	c1 e9 02	 shr	 ecx, 2
  00033	83 c8 ff	 or	 eax, -1
  00036	8d 7d 10	 lea	 edi, DWORD PTR _buf$[ebp]
  00039	f3 ab		 rep stosd
  0003b	8b ca		 mov	 ecx, edx
  0003d	83 e1 03	 and	 ecx, 3
  00040	f3 aa		 rep stosb
  00042	5f		 pop	 edi
$LN5@zip64local:

; 299  :         {
; 300  :           buf[n] = 0xff;
; 301  :         }
; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00043	56		 push	 esi
  00044	8d 45 10	 lea	 eax, DWORD PTR _buf$[ebp]
  00047	50		 push	 eax
  00048	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0004e	ff 70 1c	 push	 DWORD PTR [eax+28]
  00051	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00054	ff d0		 call	 eax
  00056	2b c6		 sub	 eax, esi
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	f7 d8		 neg	 eax
  0005d	1b c0		 sbb	 eax, eax
  0005f	5e		 pop	 esi

; 305  :         return ZIP_ERRNO;
; 306  :     else
; 307  :         return ZIP_OK;
; 308  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _ll$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 08		 jne	 SHORT $LN12@add_data_i
$LN25@add_data_i:

; 231  :         return ZIP_INTERNALERROR;

  0000b	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00010	5f		 pop	 edi

; 274  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN12@add_data_i:

; 232  : 
; 233  :     if (ll->last_block == NULL)

  00013	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00017	75 0e		 jne	 SHORT $LN10@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00019	e8 00 00 00 00	 call	 _allocate_new_datablock
  0001e	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00021	89 07		 mov	 DWORD PTR [edi], eax

; 236  :         if (ll->first_block == NULL)

  00023	85 c0		 test	 eax, eax
  00025	74 e4		 je	 SHORT $LN25@add_data_i
$LN10@add_data_i:
  00027	53		 push	 ebx

; 237  :             return ZIP_INTERNALERROR;
; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;
; 241  :     from_copy = (unsigned char*)buf;
; 242  : 
; 243  :     while (len>0)

  00028	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0002b	56		 push	 esi
  0002c	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002f	85 db		 test	 ebx, ebx
  00031	74 53		 je	 SHORT $LN22@add_data_i
$LL9@add_data_i:

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  00033	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00037	75 10		 jne	 SHORT $LN7@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  00039	e8 00 00 00 00	 call	 _allocate_new_datablock
  0003e	89 06		 mov	 DWORD PTR [esi], eax

; 252  :             if (ldi->next_datablock == NULL)

  00040	85 c0		 test	 eax, eax
  00042	74 49		 je	 SHORT $LN17@add_data_i

; 254  :             ldi = ldi->next_datablock ;

  00044	8b f0		 mov	 esi, eax

; 255  :             ll->last_block = ldi;

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN7@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  00049	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;
; 260  :         else
; 261  :             copy_this = (uInt)len;
; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  0004c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004f	8b d3		 mov	 edx, ebx
  00051	0f 42 56 04	 cmovb	 edx, DWORD PTR [esi+4]
  00055	83 c0 10	 add	 eax, 16			; 00000010H
  00058	03 c6		 add	 eax, esi

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  0005a	85 d2		 test	 edx, edx
  0005c	74 18		 je	 SHORT $LN1@add_data_i
  0005e	8b 5d 0c	 mov	 ebx, DWORD PTR _buf$[ebp]
  00061	2b d8		 sub	 ebx, eax
  00063	8b fa		 mov	 edi, edx
$LL3@add_data_i:

; 266  :             *(to_copy+i)=*(from_copy+i);

  00065	8a 0c 03	 mov	 cl, BYTE PTR [ebx+eax]
  00068	88 08		 mov	 BYTE PTR [eax], cl
  0006a	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0006d	4f		 dec	 edi
  0006e	75 f5		 jne	 SHORT $LL3@add_data_i
  00070	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00073	8b 7d 08	 mov	 edi, DWORD PTR _ll$[ebp]
$LN1@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  00076	01 56 08	 add	 DWORD PTR [esi+8], edx

; 269  :         ldi->avail_in_this_block -= copy_this;

  00079	29 56 04	 sub	 DWORD PTR [esi+4], edx

; 270  :         from_copy += copy_this ;

  0007c	01 55 0c	 add	 DWORD PTR _buf$[ebp], edx

; 271  :         len -= copy_this;

  0007f	2b da		 sub	 ebx, edx
  00081	89 5d 10	 mov	 DWORD PTR _len$[ebp], ebx
  00084	75 ad		 jne	 SHORT $LL9@add_data_i
$LN22@add_data_i:
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 272  :     }
; 273  :     return ZIP_OK;

  00088	33 c0		 xor	 eax, eax
  0008a	5f		 pop	 edi

; 274  : }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN17@add_data_i:
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 253  :                 return ZIP_INTERNALERROR;

  0008f	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00094	5f		 pop	 edi

; 274  : }

  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _free_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_free_linkedlist PROC					; COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  :     free_datablock(ll->first_block);

  00004	8b 75 08	 mov	 esi, DWORD PTR _ll$[ebp]
  00007	ff 36		 push	 DWORD PTR [esi]
  00009	e8 00 00 00 00	 call	 _free_datablock
  0000e	83 c4 04	 add	 esp, 4

; 221  :     ll->first_block = ll->last_block = NULL;

  00011	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001e	5e		 pop	 esi

; 222  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_init_linkedlist PROC					; COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  :     ll->first_block = ll->last_block = NULL;

  00003	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 216  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _free_datablock
_TEXT	SEGMENT
_ldi$ = 8						; size = 4
_free_datablock PROC					; COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  :     while (ldi!=NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _ldi$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 18		 je	 SHORT $LN2@free_datab
  0000a	56		 push	 esi
  0000b	eb 03 8d 49 00	 npad	 5
$LL3@free_datab:

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00010	8b 30		 mov	 esi, DWORD PTR [eax]

; 208  :         TRYFREE(ldi);

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4

; 209  :         ldi = ldinext;

  0001b	8b c6		 mov	 eax, esi
  0001d	85 f6		 test	 esi, esi
  0001f	75 ef		 jne	 SHORT $LL3@free_datab
  00021	5e		 pop	 esi
$LN2@free_datab:

; 210  :     }
; 211  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_allocate_new_datablock PROC				; COMDAT

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)
; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00000	68 00 10 00 00	 push	 4096			; 00001000H
  00005	e8 00 00 00 00	 call	 _malloc
  0000a	83 c4 04	 add	 esp, 4

; 194  :     if (ldi!=NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 14		 je	 SHORT $LN1@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0001e	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$LN1@allocate_n:

; 199  :     }
; 200  :     return ldi;
; 201  : }

  00025	c3		 ret	 0
_allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h
; File c:\program files\microsoft visual studio 11.0\vc\include\time.inl
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -16						; size = 10
tv268 = -4						; size = 4
_c$1$ = -4						; size = 4
_passwd$ = 8						; size = 4
_buf$ = 12						; size = 4
_t$3$ = 16						; size = 4
_n$1$ = 16						; size = 4
_bufSize$ = 16						; size = 4
tv261 = 19						; size = 1
_pkeys$ = 20						; size = 4
_pcrc_32_tab$ = 24					; size = 4
_crcForCrypting$ = 28					; size = 4
_crypthead PROC						; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)

  00006	83 7d 10 0c	 cmp	 DWORD PTR _bufSize$[ebp], 12 ; 0000000cH
  0000a	7d 06		 jge	 SHORT $LN8@crypthead

; 104  :       return 0;

  0000c	33 c0		 xor	 eax, eax

; 128  :     return n;
; 129  : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN8@crypthead:

; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00017	40		 inc	 eax
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 15		 jne	 SHORT $LN7@crypthead
; File c:\program files\microsoft visual studio 11.0\vc\include\time.inl

; 133  :     return _time64(_Time);

  00022	6a 00		 push	 0
  00024	e8 00 00 00 00	 call	 __time64
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h

; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00029	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _srand
  00034	83 c4 08	 add	 esp, 8
$LN7@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00037	53		 push	 ebx
  00038	56		 push	 esi
  00039	8b 75 18	 mov	 esi, DWORD PTR _pcrc_32_tab$[ebp]
  0003c	57		 push	 edi
  0003d	8b 7d 14	 mov	 edi, DWORD PTR _pkeys$[ebp]
  00040	56		 push	 esi
  00041	57		 push	 edi
  00042	ff 75 08	 push	 DWORD PTR _passwd$[ebp]
  00045	e8 00 00 00 00	 call	 _init_keys
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0004d	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _n$1$[ebp], 0
$LL6@crypthead:

; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00054	e8 00 00 00 00	 call	 _rand
  00059	8b d0		 mov	 edx, eax
  0005b	c1 fa 07	 sar	 edx, 7

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  0005e	56		 push	 esi
  0005f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00065	57		 push	 edi
  00066	89 55 fc	 mov	 DWORD PTR _c$1$[ebp], edx
  00069	e8 00 00 00 00	 call	 _decrypt_byte
  0006e	52		 push	 edx
  0006f	56		 push	 esi
  00070	57		 push	 edi
  00071	8b d8		 mov	 ebx, eax
  00073	e8 00 00 00 00	 call	 _update_keys
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _n$1$[ebp]
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _c$1$[ebp]
  0007e	32 c3		 xor	 al, bl
  00080	88 44 0d f0	 mov	 BYTE PTR _header$[ebp+ecx], al
  00084	41		 inc	 ecx
  00085	83 c4 14	 add	 esp, 20			; 00000014H
  00088	89 4d 10	 mov	 DWORD PTR _n$1$[ebp], ecx
  0008b	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0008e	7c c4		 jl	 SHORT $LL6@crypthead

; 119  :     }
; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00090	56		 push	 esi
  00091	57		 push	 edi
  00092	ff 75 08	 push	 DWORD PTR _passwd$[ebp]
  00095	e8 00 00 00 00	 call	 _init_keys

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0009d	8d 4d f0	 lea	 ecx, DWORD PTR _header$[ebp]
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	33 ff		 xor	 edi, edi
  000a5	2b c1		 sub	 eax, ecx
  000a7	89 45 fc	 mov	 DWORD PTR tv268[ebp], eax
  000aa	8d 9b 00 00 00
	00		 npad	 6
$LL3@crypthead:

; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000b0	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  000b3	56		 push	 esi
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _decrypt_byte
  000ba	0f b6 4c 3d f0	 movzx	 ecx, BYTE PTR _header$[ebp+edi]
  000bf	51		 push	 ecx
  000c0	56		 push	 esi
  000c1	52		 push	 edx
  000c2	8b d8		 mov	 ebx, eax
  000c4	e8 00 00 00 00	 call	 _update_keys
  000c9	8b 45 fc	 mov	 eax, DWORD PTR tv268[ebp]
  000cc	8a 4c 3d f0	 mov	 cl, BYTE PTR _header$[ebp+edi]
  000d0	03 c7		 add	 eax, edi
  000d2	32 cb		 xor	 cl, bl
  000d4	47		 inc	 edi
  000d5	83 c4 14	 add	 esp, 20			; 00000014H
  000d8	88 4c 05 f0	 mov	 BYTE PTR _header$[ebp+eax], cl
  000dc	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  000df	7c cf		 jl	 SHORT $LL3@crypthead

; 125  :     }
; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000e1	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  000e4	56		 push	 esi
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _decrypt_byte
  000eb	8b 75 1c	 mov	 esi, DWORD PTR _crcForCrypting$[ebp]
  000ee	8b de		 mov	 ebx, esi
  000f0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000f3	0f b6 cb	 movzx	 ecx, bl
  000f6	51		 push	 ecx
  000f7	ff 75 18	 push	 DWORD PTR _pcrc_32_tab$[ebp]
  000fa	89 45 10	 mov	 DWORD PTR _t$3$[ebp], eax
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 _update_keys

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00103	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00106	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00109	32 5d 10	 xor	 bl, BYTE PTR _t$3$[ebp]
  0010c	52		 push	 edx
  0010d	ff 75 14	 push	 DWORD PTR _pkeys$[ebp]
  00110	88 1c 07	 mov	 BYTE PTR [edi+eax], bl
  00113	e8 00 00 00 00	 call	 _decrypt_byte
  00118	c1 ee 18	 shr	 esi, 24			; 00000018H
  0011b	56		 push	 esi
  0011c	52		 push	 edx
  0011d	ff 75 14	 push	 DWORD PTR _pkeys$[ebp]
  00120	8b d8		 mov	 ebx, eax
  00122	e8 00 00 00 00	 call	 _update_keys
  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  0012a	83 c4 28	 add	 esp, 40			; 00000028H
  0012d	8b c6		 mov	 eax, esi
  0012f	32 c3		 xor	 al, bl
  00131	88 44 0f 01	 mov	 BYTE PTR [edi+ecx+1], al
  00135	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00138	5f		 pop	 edi
  00139	5e		 pop	 esi
  0013a	5b		 pop	 ebx

; 128  :     return n;
; 129  : }

  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
_crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h
;	COMDAT _init_keys
_TEXT	SEGMENT
_passwd$ = 8						; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_init_keys PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 67   :     *(pkeys+0) = 305419896L;
; 68   :     *(pkeys+1) = 591751049L;
; 69   :     *(pkeys+2) = 878082192L;
; 70   :     while (*passwd != '\0') {

  00004	8b 75 08	 mov	 esi, DWORD PTR _passwd$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _pkeys$[ebp]
  0000b	c7 07 78 56 34
	12		 mov	 DWORD PTR [edi], 305419896 ; 12345678H
  00011	c7 47 04 89 67
	45 23		 mov	 DWORD PTR [edi+4], 591751049 ; 23456789H
  00018	c7 47 08 90 78
	56 34		 mov	 DWORD PTR [edi+8], 878082192 ; 34567890H
  0001f	8a 06		 mov	 al, BYTE PTR [esi]
  00021	84 c0		 test	 al, al
  00023	74 24		 je	 SHORT $LN1@init_keys
  00025	53		 push	 ebx
  00026	8b 5d 10	 mov	 ebx, DWORD PTR _pcrc_32_tab$[ebp]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL2@init_keys:

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00030	0f be c0	 movsx	 eax, al
  00033	50		 push	 eax
  00034	53		 push	 ebx
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 _update_keys
  0003b	8a 46 01	 mov	 al, BYTE PTR [esi+1]

; 72   :         passwd++;

  0003e	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	84 c0		 test	 al, al
  00046	75 e8		 jne	 SHORT $LL2@init_keys
  00048	5b		 pop	 ebx
$LN1@init_keys:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 73   :     }
; 74   : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h
;	COMDAT _update_keys
_TEXT	SEGMENT
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_c$ = 16						; size = 4
_update_keys PROC					; COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _pkeys$[ebp]
  0000a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0000c	8b c1		 mov	 eax, ecx
  0000e	33 45 10	 xor	 eax, DWORD PTR _c$[ebp]
  00011	c1 e9 08	 shr	 ecx, 8
  00014	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00019	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001c	33 c1		 xor	 eax, ecx

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;
; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;
; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);
; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0001e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00021	89 07		 mov	 DWORD PTR [edi], eax
  00023	0f b6 c0	 movzx	 eax, al
  00026	03 47 04	 add	 eax, DWORD PTR [edi+4]
  00029	69 c0 05 84 08
	08		 imul	 eax, 134775813		; 08088405H
  0002f	40		 inc	 eax
  00030	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00033	c1 e8 18	 shr	 eax, 24			; 00000018H
  00036	33 c1		 xor	 eax, ecx
  00038	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0003d	c1 e9 08	 shr	 ecx, 8
  00040	33 0c 82	 xor	 ecx, DWORD PTR [edx+eax*4]

; 56   :     }
; 57   :     return c;

  00043	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  00046	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00049	5f		 pop	 edi

; 58   : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\crypt.h
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_decrypt_byte PROC					; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	81 e1 fd ff 00
	00		 and	 ecx, 65533		; 0000fffdH
  0000f	83 c9 02	 or	 ecx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00012	8b c1		 mov	 eax, ecx
  00014	83 f0 01	 xor	 eax, 1
  00017	0f af c1	 imul	 eax, ecx
  0001a	c1 e8 08	 shr	 eax, 8
  0001d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipRemoveExtraInfoBlock
_TEXT	SEGMENT
tv198 = -8						; size = 4
_pNewHeader$1$ = -4					; size = 4
_size$1$ = 8						; size = 4
_pData$ = 8						; size = 4
_dataLen$ = 12						; size = 4
_sHeader$ = 16						; size = 2
_zipRemoveExtraInfoBlock PROC				; COMDAT

; 1949 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1950 :   char* p = pData;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pData$[ebp]
  0000a	56		 push	 esi

; 1951 :   int size = 0;

  0000b	33 f6		 xor	 esi, esi
  0000d	57		 push	 edi
  0000e	8b fb		 mov	 edi, ebx
  00010	89 75 08	 mov	 DWORD PTR _size$1$[ebp], esi

; 1952 :   char* pNewHeader;
; 1953 :   char* pTmp;
; 1954 :   short header;
; 1955 :   short dataSize;
; 1956 : 
; 1957 :   int retVal = ZIP_OK;
; 1958 : 
; 1959 :   if(pData == NULL || *dataLen < 4)

  00013	85 db		 test	 ebx, ebx
  00015	0f 84 b9 00 00
	00		 je	 $LN9@zipRemoveE
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dataLen$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	89 45 f8	 mov	 DWORD PTR tv198[ebp], eax
  00023	83 f8 04	 cmp	 eax, 4
  00026	0f 8c a8 00 00
	00		 jl	 $LN9@zipRemoveE

; 1961 : 
; 1962 :   pNewHeader = (char*)ALLOC(*dataLen);

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _malloc

; 1963 :   pTmp = pNewHeader;
; 1964 : 
; 1965 :   while(p < (pData + *dataLen))

  00032	8b 4d f8	 mov	 ecx, DWORD PTR tv198[ebp]
  00035	03 cb		 add	 ecx, ebx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b d0		 mov	 edx, eax
  0003c	89 55 fc	 mov	 DWORD PTR _pNewHeader$1$[ebp], edx
  0003f	3b d9		 cmp	 ebx, ecx
  00041	73 49		 jae	 SHORT $LN7@zipRemoveE
$LL8@zipRemoveE:

; 1966 :   {
; 1967 :     header = *(short*)p;
; 1968 :     dataSize = *(((short*)p)+1);
; 1969 : 
; 1970 :     if( header == sHeader ) // Header found.

  00043	66 8b 45 10	 mov	 ax, WORD PTR _sHeader$[ebp]
  00047	0f b7 4f 02	 movzx	 ecx, WORD PTR [edi+2]
  0004b	66 39 07	 cmp	 WORD PTR [edi], ax
  0004e	75 0a		 jne	 SHORT $LN6@zipRemoveE

; 1971 :     {
; 1972 :       p += dataSize + 4; // skip it. do not copy to temp buffer

  00050	0f bf c1	 movsx	 eax, cx
  00053	83 c7 04	 add	 edi, 4
  00056	03 f8		 add	 edi, eax

; 1973 :     }
; 1974 :     else

  00058	eb 24		 jmp	 SHORT $LN5@zipRemoveE
$LN6@zipRemoveE:

; 1975 :     {
; 1976 :       // Extra Info block should not be removed, So copy it to the temp buffer.
; 1977 :       memcpy(pTmp, p, dataSize + 4);

  0005a	0f bf f1	 movsx	 esi, cx
  0005d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _memcpy

; 1978 :       p += dataSize + 4;
; 1979 :       size += dataSize + 4;

  00068	8b 45 08	 mov	 eax, DWORD PTR _size$1$[ebp]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _pNewHeader$1$[ebp]
  0006e	83 c7 04	 add	 edi, 4
  00071	83 c0 04	 add	 eax, 4
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	03 fe		 add	 edi, esi
  00079	03 c6		 add	 eax, esi
  0007b	89 45 08	 mov	 DWORD PTR _size$1$[ebp], eax
$LN5@zipRemoveE:

; 1963 :   pTmp = pNewHeader;
; 1964 : 
; 1965 :   while(p < (pData + *dataLen))

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _dataLen$[ebp]
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	03 c3		 add	 eax, ebx
  00085	3b f8		 cmp	 edi, eax
  00087	72 ba		 jb	 SHORT $LL8@zipRemoveE
  00089	8b 75 08	 mov	 esi, DWORD PTR _size$1$[ebp]
$LN7@zipRemoveE:

; 1980 :     }
; 1981 : 
; 1982 :   }
; 1983 : 
; 1984 :   if(size < *dataLen)

  0008c	8b 7d 0c	 mov	 edi, DWORD PTR _dataLen$[ebp]
  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	3b f0		 cmp	 esi, eax
  00093	7d 23		 jge	 SHORT $LN4@zipRemoveE

; 1985 :   {
; 1986 :     // clean old extra info block.
; 1987 :     memset(pData,0, *dataLen);

  00095	50		 push	 eax
  00096	6a 00		 push	 0
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 _memset
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1988 : 
; 1989 :     // copy the new extra info block over the old
; 1990 :     if(size > 0)

  000a1	85 f6		 test	 esi, esi
  000a3	7e 0d		 jle	 SHORT $LN3@zipRemoveE

; 1991 :       memcpy(pData, pNewHeader, size);

  000a5	56		 push	 esi
  000a6	ff 75 fc	 push	 DWORD PTR _pNewHeader$1$[ebp]
  000a9	53		 push	 ebx
  000aa	e8 00 00 00 00	 call	 _memcpy
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@zipRemoveE:

; 1992 : 
; 1993 :     // set the new extra info size
; 1994 :     *dataLen = size;

  000b2	89 37		 mov	 DWORD PTR [edi], esi

; 1995 : 
; 1996 :     retVal = ZIP_OK;

  000b4	33 f6		 xor	 esi, esi

; 1997 :   }
; 1998 :   else

  000b6	eb 03		 jmp	 SHORT $LN2@zipRemoveE
$LN4@zipRemoveE:

; 1999 :     retVal = ZIP_ERRNO;

  000b8	83 ce ff	 or	 esi, -1
$LN2@zipRemoveE:

; 2000 : 
; 2001 :   TRYFREE(pNewHeader);

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _pNewHeader$1$[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	74 09		 je	 SHORT $LN1@zipRemoveE
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _free
  000c8	83 c4 04	 add	 esp, 4
$LN1@zipRemoveE:

; 2002 : 
; 2003 :   return retVal;

  000cb	5f		 pop	 edi
  000cc	8b c6		 mov	 eax, esi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 2004 : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN9@zipRemoveE:
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi

; 1960 :     return ZIP_PARAMERROR;

  000d6	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  000db	5b		 pop	 ebx

; 2004 : }

  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_zipRemoveExtraInfoBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipClose
_TEXT	SEGMENT
tv325 = -20						; size = 8
_centraldir_pos_inzip$1$ = -12				; size = 4
_err$1$ = -8						; size = 4
_size_centraldir$1$ = -4				; size = 4
_centraldir_pos_inzip$2$ = 8				; size = 4
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose PROC						; COMDAT

; 1880 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 1881 :     zip64_internal* zi;
; 1882 :     int err = 0;
; 1883 :     uLong size_centraldir = 0;
; 1884 :     ZPOS64_T centraldir_pos_inzip;
; 1885 :     ZPOS64_T pos;
; 1886 : 
; 1887 :     if (file == NULL)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	89 7d f8	 mov	 DWORD PTR _err$1$[ebp], edi
  00010	89 7d fc	 mov	 DWORD PTR _size_centraldir$1$[ebp], edi
  00013	85 db		 test	 ebx, ebx
  00015	75 09		 jne	 SHORT $LN15@zipClose

; 1888 :         return ZIP_PARAMERROR;

  00017	8d 47 9a	 lea	 eax, DWORD PTR [edi-102]
  0001a	5f		 pop	 edi
  0001b	5b		 pop	 ebx

; 1946 : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN15@zipClose:

; 1889 : 
; 1890 :     zi = (zip64_internal*)file;
; 1891 : 
; 1892 :     if (zi->in_opened_file_inzip == 1)

  00020	83 7b 38 01	 cmp	 DWORD PTR [ebx+56], 1
  00024	75 0e		 jne	 SHORT $LN14@zipClose

; 1893 :     {
; 1894 :         err = zipCloseFileInZip (file);

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _zipCloseFileInZip
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b f8		 mov	 edi, eax
  00031	89 45 f8	 mov	 DWORD PTR _err$1$[ebp], eax
$LN14@zipClose:

; 1895 :     }
; 1896 : 
; 1897 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1898 :     if (global_comment==NULL)

  00034	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00038	75 09		 jne	 SHORT $LN13@zipClose

; 1899 :         global_comment = zi->globalcomment;

  0003a	8b 83 00 01 01
	00		 mov	 eax, DWORD PTR [ebx+65792]
  00040	89 45 0c	 mov	 DWORD PTR _global_comment$[ebp], eax
$LN13@zipClose:

; 1900 : #endif
; 1901 : 
; 1902 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00043	56		 push	 esi
  00044	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 _call_ztell64
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 08	 mov	 DWORD PTR _centraldir_pos_inzip$2$[ebp], eax
  00053	89 55 f4	 mov	 DWORD PTR _centraldir_pos_inzip$1$[ebp], edx

; 1903 : 
; 1904 :     if (err==ZIP_OK)

  00056	85 ff		 test	 edi, edi
  00058	75 44		 jne	 SHORT $LN10@zipClose

; 1905 :     {
; 1906 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0005a	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]

; 1907 :         while (ldi!=NULL)

  0005d	85 f6		 test	 esi, esi
  0005f	74 3d		 je	 SHORT $LN10@zipClose
  00061	33 c0		 xor	 eax, eax
$LL11@zipClose:

; 1908 :         {
; 1909 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00063	85 ff		 test	 edi, edi
  00065	75 28		 jne	 SHORT $LN8@zipClose
  00067	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006a	85 c9		 test	 ecx, ecx
  0006c	74 21		 je	 SHORT $LN8@zipClose

; 1910 :             {
; 1911 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  0006e	51		 push	 ecx
  0006f	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00072	50		 push	 eax
  00073	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00076	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00079	ff 73 1c	 push	 DWORD PTR [ebx+28]
  0007c	ff d0		 call	 eax
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00084	b8 ff ff ff ff	 mov	 eax, -1
  00089	0f 45 f8	 cmovne	 edi, eax
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _size_centraldir$1$[ebp]
$LN8@zipClose:

; 1912 :                     err = ZIP_ERRNO;
; 1913 :             }
; 1914 : 
; 1915 :             size_centraldir += ldi->filled_in_this_block;

  0008f	03 46 08	 add	 eax, DWORD PTR [esi+8]

; 1916 :             ldi = ldi->next_datablock;

  00092	8b 36		 mov	 esi, DWORD PTR [esi]
  00094	89 45 fc	 mov	 DWORD PTR _size_centraldir$1$[ebp], eax
  00097	85 f6		 test	 esi, esi
  00099	75 c8		 jne	 SHORT $LL11@zipClose
  0009b	89 7d f8	 mov	 DWORD PTR _err$1$[ebp], edi
$LN10@zipClose:

; 1917 :         }
; 1918 :     }
; 1919 :     free_linkedlist(&(zi->central_dir));

  0009e	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _free_linkedlist

; 1920 : 
; 1921 :     pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000a7	8b 55 08	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[ebp]
  000aa	8b 75 f4	 mov	 esi, DWORD PTR _centraldir_pos_inzip$1$[ebp]
  000ad	83 c4 04	 add	 esp, 4
  000b0	8b ca		 mov	 ecx, edx
  000b2	2b 8b f0 00 01
	00		 sub	 ecx, DWORD PTR [ebx+65776]
  000b8	8b c6		 mov	 eax, esi
  000ba	1b 83 f4 00 01
	00		 sbb	 eax, DWORD PTR [ebx+65780]

; 1922 :     if(pos >= 0xffffffff)

  000c0	89 45 f0	 mov	 DWORD PTR tv325[ebp+4], eax
  000c3	75 05		 jne	 SHORT $LN21@zipClose
  000c5	83 f9 ff	 cmp	 ecx, -1
  000c8	72 30		 jb	 SHORT $LN7@zipClose
$LN21@zipClose:

; 1923 :     {
; 1924 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000ca	ff 73 2c	 push	 DWORD PTR [ebx+44]
  000cd	53		 push	 ebx
  000ce	e8 00 00 00 00	 call	 _call_ztell64

; 1925 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000d3	ff 75 f4	 push	 DWORD PTR _centraldir_pos_inzip$1$[ebp]
  000d6	8b f8		 mov	 edi, eax
  000d8	ff 75 08	 push	 DWORD PTR _centraldir_pos_inzip$2$[ebp]
  000db	8b f2		 mov	 esi, edx
  000dd	ff 75 fc	 push	 DWORD PTR _size_centraldir$1$[ebp]
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryRecord

; 1926 : 
; 1927 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  000e6	56		 push	 esi
  000e7	57		 push	 edi
  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryLocator
  000ee	8b 7d f8	 mov	 edi, DWORD PTR _err$1$[ebp]
  000f1	8b 55 08	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[ebp]
  000f4	8b 75 f4	 mov	 esi, DWORD PTR _centraldir_pos_inzip$1$[ebp]
  000f7	83 c4 24	 add	 esp, 36			; 00000024H
$LN7@zipClose:

; 1928 :     }
; 1929 : 
; 1930 :     if (err==ZIP_OK)

  000fa	85 ff		 test	 edi, edi
  000fc	75 22		 jne	 SHORT $LN5@zipClose

; 1931 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000fe	56		 push	 esi
  000ff	52		 push	 edx
  00100	ff 75 fc	 push	 DWORD PTR _size_centraldir$1$[ebp]
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 _Write_EndOfCentralDirectoryRecord
  00109	8b f8		 mov	 edi, eax
  0010b	83 c4 10	 add	 esp, 16			; 00000010H

; 1932 : 
; 1933 :     if(err == ZIP_OK)

  0010e	85 ff		 test	 edi, edi
  00110	75 0e		 jne	 SHORT $LN5@zipClose

; 1934 :       err = Write_GlobalComment(zi, global_comment);

  00112	ff 75 0c	 push	 DWORD PTR _global_comment$[ebp]
  00115	53		 push	 ebx
  00116	e8 00 00 00 00	 call	 _Write_GlobalComment
  0011b	83 c4 08	 add	 esp, 8
  0011e	8b f8		 mov	 edi, eax
$LN5@zipClose:

; 1935 : 
; 1936 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  00120	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00123	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00126	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00129	ff d0		 call	 eax
  0012b	83 c4 08	 add	 esp, 8
  0012e	5e		 pop	 esi
  0012f	85 c0		 test	 eax, eax
  00131	74 0a		 je	 SHORT $LN3@zipClose

; 1937 :         if (err == ZIP_OK)

  00133	85 ff		 test	 edi, edi
  00135	b8 ff ff ff ff	 mov	 eax, -1
  0013a	0f 44 f8	 cmove	 edi, eax
$LN3@zipClose:

; 1938 :             err = ZIP_ERRNO;
; 1939 : 
; 1940 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1941 :     TRYFREE(zi->globalcomment);

  0013d	8b 83 00 01 01
	00		 mov	 eax, DWORD PTR [ebx+65792]
  00143	85 c0		 test	 eax, eax
  00145	74 09		 je	 SHORT $LN2@zipClose
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 _free
  0014d	83 c4 04	 add	 esp, 4
$LN2@zipClose:

; 1942 : #endif
; 1943 :     TRYFREE(zi);

  00150	53		 push	 ebx
  00151	e8 00 00 00 00	 call	 _free
  00156	83 c4 04	 add	 esp, 4

; 1944 : 
; 1945 :     return err;

  00159	8b c7		 mov	 eax, edi
  0015b	5f		 pop	 edi
  0015c	5b		 pop	 ebx

; 1946 : }

  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
_zipClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw64
_TEXT	SEGMENT
_cur_pos_inzip$2$ = -24					; size = 4
_cur_pos_inzip$1$ = -20					; size = 4
tv642 = -20						; size = 4
_crc32$1$ = -16						; size = 4
_compressed_size$1$ = -12				; size = 4
_uncompressed_size$1$ = -8				; size = 4
_compressed_size$2$ = -4				; size = 4
_uncompressed_size$2$ = 8				; size = 4
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_crc32$ = 20						; size = 4
_zipCloseFileInZipRaw64 PROC				; COMDAT

; 1514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1515 :     zip64_internal* zi;
; 1516 :     ZPOS64_T compressed_size;
; 1517 :     uLong invalidValue = 0xffffffff;
; 1518 :     short datasize = 0;
; 1519 :     int err=ZIP_OK;
; 1520 : 
; 1521 :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	85 f6		 test	 esi, esi
  0000f	75 0b		 jne	 SHORT $LN43@zipCloseFi
$LN77@zipCloseFi:
  00011	5e		 pop	 esi

; 1522 :         return ZIP_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00017	5b		 pop	 ebx

; 1745 : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN43@zipCloseFi:

; 1523 :     zi = (zip64_internal*)file;
; 1524 : 
; 1525 :     if (zi->in_opened_file_inzip == 0)

  0001c	39 5e 38	 cmp	 DWORD PTR [esi+56], ebx
  0001f	74 f0		 je	 SHORT $LN77@zipCloseFi

; 1526 :         return ZIP_PARAMERROR;
; 1527 :     zi->ci.stream.avail_in = 0;
; 1528 : 
; 1529 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00021	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00028	57		 push	 edi
  00029	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  0002c	75 4e		 jne	 SHORT $LN34@zipCloseFi
  0002e	39 9e a0 00 00
	00		 cmp	 DWORD PTR [esi+160], ebx
  00034	75 46		 jne	 SHORT $LN34@zipCloseFi
$LL66@zipCloseFi:

; 1530 :                 {
; 1531 :                         while (err==ZIP_OK)
; 1532 :                         {
; 1533 :                                 uLong uTotalOutBefore;
; 1534 :                                 if (zi->ci.stream.avail_out == 0)

  00036	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  0003a	8d 5e 40	 lea	 ebx, DWORD PTR [esi+64]
  0003d	75 19		 jne	 SHORT $LN38@zipCloseFi

; 1535 :                                 {
; 1536 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer

; 1537 :                                                 err = ZIP_ERRNO;
; 1538 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1539 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00045	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  0004b	83 c4 04	 add	 esp, 4
  0004e	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H
  00055	89 46 4c	 mov	 DWORD PTR [esi+76], eax
$LN38@zipCloseFi:

; 1540 :                                 }
; 1541 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00058	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1542 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  0005b	6a 04		 push	 4
  0005d	53		 push	 ebx
  0005e	e8 00 00 00 00	 call	 _deflate
  00063	8b d8		 mov	 ebx, eax

; 1543 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00065	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00068	2b c7		 sub	 eax, edi
  0006a	01 46 7c	 add	 DWORD PTR [esi+124], eax
  0006d	83 c4 08	 add	 esp, 8
  00070	85 db		 test	 ebx, ebx
  00072	74 c2		 je	 SHORT $LL66@zipCloseFi

; 1544 :                         }
; 1545 :                 }
; 1546 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1547 :     {
; 1548 : #ifdef HAVE_BZIP2
; 1549 :       err = BZ_FINISH_OK;
; 1550 :       while (err==BZ_FINISH_OK)
; 1551 :       {
; 1552 :         uLong uTotalOutBefore;
; 1553 :         if (zi->ci.bstream.avail_out == 0)
; 1554 :         {
; 1555 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1556 :             err = ZIP_ERRNO;
; 1557 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1558 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1559 :         }
; 1560 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1561 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1562 :         if(err == BZ_STREAM_END)
; 1563 :           err = Z_STREAM_END;
; 1564 : 
; 1565 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1566 :       }
; 1567 : 
; 1568 :       if(err == BZ_FINISH_OK)
; 1569 :         err = ZIP_OK;
; 1570 : #endif
; 1571 :     }
; 1572 : 
; 1573 :     if (err==Z_STREAM_END)

  00074	33 c0		 xor	 eax, eax
  00076	83 fb 01	 cmp	 ebx, 1
  00079	0f 44 d8	 cmove	 ebx, eax
$LN34@zipCloseFi:

; 1574 :         err=ZIP_OK; /* this is normal */
; 1575 : 
; 1576 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  0007c	83 cf ff	 or	 edi, -1
  0007f	83 7e 7c 00	 cmp	 DWORD PTR [esi+124], 0
  00083	76 12		 jbe	 SHORT $LN32@zipCloseFi
  00085	85 db		 test	 ebx, ebx
  00087	75 0e		 jne	 SHORT $LN32@zipCloseFi

; 1577 :                 {
; 1578 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  0008f	83 c4 04	 add	 esp, 4
  00092	3b c7		 cmp	 eax, edi
  00094	0f 44 df	 cmove	 ebx, edi
$LN32@zipCloseFi:

; 1579 :             err = ZIP_ERRNO;
; 1580 :                 }
; 1581 : 
; 1582 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00097	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  0009e	75 21		 jne	 SHORT $LN31@zipCloseFi
  000a0	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000a7	75 35		 jne	 SHORT $LN65@zipCloseFi

; 1583 :     {
; 1584 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000a9	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _deflateEnd
  000b2	83 c4 04	 add	 esp, 4

; 1585 :         if (err == ZIP_OK)

  000b5	85 db		 test	 ebx, ebx
  000b7	0f 44 d8	 cmove	 ebx, eax

; 1586 :             err = tmp_err;
; 1587 :         zi->ci.stream_initialised = 0;

  000ba	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
$LN31@zipCloseFi:

; 1588 :     }
; 1589 : #ifdef HAVE_BZIP2
; 1590 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1591 :     {
; 1592 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1593 :                         if (err==ZIP_OK)
; 1594 :                                 err = tmperr;
; 1595 :                         zi->ci.stream_initialised = 0;
; 1596 :     }
; 1597 : #endif
; 1598 : 
; 1599 :     if (!zi->ci.raw)

  000c1	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000c8	75 14		 jne	 SHORT $LN65@zipCloseFi

; 1600 :     {
; 1601 :         crc32 = (uLong)zi->ci.crc32;

  000ca	8b 86 a8 00 01
	00		 mov	 eax, DWORD PTR [esi+65704]

; 1602 :         uncompressed_size = zi->ci.totalUncompressedData;

  000d0	8b be c8 00 01
	00		 mov	 edi, DWORD PTR [esi+65736]
  000d6	8b 8e cc 00 01
	00		 mov	 ecx, DWORD PTR [esi+65740]
  000dc	eb 09		 jmp	 SHORT $LN73@zipCloseFi
$LN65@zipCloseFi:
  000de	8b 45 14	 mov	 eax, DWORD PTR _crc32$[ebp]
  000e1	8b 4d 10	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp+4]
  000e4	8b 7d 0c	 mov	 edi, DWORD PTR _uncompressed_size$[ebp]
$LN73@zipCloseFi:
  000e7	89 45 f0	 mov	 DWORD PTR _crc32$1$[ebp], eax

; 1603 :     }
; 1604 :     compressed_size = zi->ci.totalCompressedData;
; 1605 : 
; 1606 : #    ifndef NOCRYPT
; 1607 :     compressed_size += zi->ci.crypt_header_size;

  000ea	8b 86 e0 00 01
	00		 mov	 eax, DWORD PTR [esi+65760]
  000f0	99		 cdq
  000f1	03 86 c0 00 01
	00		 add	 eax, DWORD PTR [esi+65728]
  000f7	89 7d f8	 mov	 DWORD PTR _uncompressed_size$1$[ebp], edi
  000fa	13 96 c4 00 01
	00		 adc	 edx, DWORD PTR [esi+65732]
  00100	89 4d 08	 mov	 DWORD PTR _uncompressed_size$2$[ebp], ecx
  00103	89 45 fc	 mov	 DWORD PTR _compressed_size$2$[ebp], eax
  00106	89 55 f4	 mov	 DWORD PTR _compressed_size$1$[ebp], edx

; 1608 : #    endif
; 1609 : 
; 1610 :     // update Current Item crc and sizes,
; 1611 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00109	85 d2		 test	 edx, edx
  0010b	77 24		 ja	 SHORT $LN54@zipCloseFi
  0010d	72 05		 jb	 SHORT $LN52@zipCloseFi
  0010f	83 f8 ff	 cmp	 eax, -1
  00112	73 1d		 jae	 SHORT $LN54@zipCloseFi
$LN52@zipCloseFi:
  00114	85 c9		 test	 ecx, ecx
  00116	77 19		 ja	 SHORT $LN54@zipCloseFi
  00118	72 05		 jb	 SHORT $LN53@zipCloseFi
  0011a	83 ff ff	 cmp	 edi, -1
  0011d	73 12		 jae	 SHORT $LN54@zipCloseFi
$LN53@zipCloseFi:
  0011f	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00126	77 09		 ja	 SHORT $LN54@zipCloseFi
  00128	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  0012f	72 2d		 jb	 SHORT $LN28@zipCloseFi
$LN54@zipCloseFi:

; 1612 :     {
; 1613 :       /*version Made by*/
; 1614 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00131	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00137	6a 02		 push	 2
  00139	6a 00		 push	 0
  0013b	83 c0 04	 add	 eax, 4
  0013e	6a 2d		 push	 45			; 0000002dH
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1615 :       /*version needed*/
; 1616 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00146	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0014c	6a 02		 push	 2
  0014e	6a 00		 push	 0
  00150	83 c0 06	 add	 eax, 6
  00153	6a 2d		 push	 45			; 0000002dH
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0015b	83 c4 20	 add	 esp, 32			; 00000020H
$LN28@zipCloseFi:

; 1617 : 
; 1618 :     }
; 1619 : 
; 1620 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  0015e	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00164	6a 04		 push	 4
  00166	6a 00		 push	 0
  00168	ff 75 f0	 push	 DWORD PTR _crc32$1$[ebp]
  0016b	83 c0 10	 add	 eax, 16			; 00000010H
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1621 : 
; 1622 : 
; 1623 :     if(compressed_size >= 0xffffffff)

  00174	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$1$[ebp]
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	85 c9		 test	 ecx, ecx
  0017c	75 0e		 jne	 SHORT $LN55@zipCloseFi
  0017e	8b 45 fc	 mov	 eax, DWORD PTR _compressed_size$2$[ebp]
  00181	83 f8 ff	 cmp	 eax, -1
  00184	73 06		 jae	 SHORT $LN55@zipCloseFi

; 1625 :     else
; 1626 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  00186	6a 04		 push	 4
  00188	51		 push	 ecx
  00189	50		 push	 eax
  0018a	eb 06		 jmp	 SHORT $LN74@zipCloseFi
$LN55@zipCloseFi:

; 1624 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  0018c	6a 04		 push	 4
  0018e	6a 00		 push	 0
  00190	6a ff		 push	 -1
$LN74@zipCloseFi:
  00192	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00198	83 c0 14	 add	 eax, 20			; 00000014H
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001a1	83 c4 10	 add	 esp, 16			; 00000010H

; 1627 : 
; 1628 :     /// set internal file attributes field
; 1629 :     if (zi->ci.stream.data_type == Z_ASCII)

  001a4	83 7e 6c 01	 cmp	 DWORD PTR [esi+108], 1
  001a8	75 18		 jne	 SHORT $LN24@zipCloseFi

; 1630 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001aa	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001b0	6a 02		 push	 2
  001b2	6a 00		 push	 0
  001b4	83 c0 24	 add	 eax, 36			; 00000024H
  001b7	6a 01		 push	 1
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001bf	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@zipCloseFi:

; 1631 : 
; 1632 :     if(uncompressed_size >= 0xffffffff)

  001c2	8b 45 08	 mov	 eax, DWORD PTR _uncompressed_size$2$[ebp]
  001c5	85 c0		 test	 eax, eax
  001c7	75 0b		 jne	 SHORT $LN56@zipCloseFi
  001c9	83 ff ff	 cmp	 edi, -1
  001cc	73 06		 jae	 SHORT $LN56@zipCloseFi

; 1634 :     else
; 1635 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  001ce	6a 04		 push	 4
  001d0	50		 push	 eax
  001d1	57		 push	 edi
  001d2	eb 06		 jmp	 SHORT $LN75@zipCloseFi
$LN56@zipCloseFi:

; 1633 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  001d4	6a 04		 push	 4
  001d6	6a 00		 push	 0
  001d8	6a ff		 push	 -1
$LN75@zipCloseFi:
  001da	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001e0	83 c0 18	 add	 eax, 24			; 00000018H
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001e9	83 c4 10	 add	 esp, 16			; 00000010H

; 1636 : 
; 1637 :     // Add ZIP64 extra info field for uncompressed size
; 1638 :     if(uncompressed_size >= 0xffffffff)

  001ec	83 7d 08 00	 cmp	 DWORD PTR _uncompressed_size$2$[ebp], 0
  001f0	77 05		 ja	 SHORT $LN57@zipCloseFi
  001f2	83 ff ff	 cmp	 edi, -1
  001f5	72 07		 jb	 SHORT $LN69@zipCloseFi
$LN57@zipCloseFi:

; 1639 :       datasize += 8;

  001f7	b8 08 00 00 00	 mov	 eax, 8
  001fc	eb 02		 jmp	 SHORT $LN21@zipCloseFi
$LN69@zipCloseFi:
  001fe	33 c0		 xor	 eax, eax
$LN21@zipCloseFi:

; 1640 : 
; 1641 :     // Add ZIP64 extra info field for compressed size
; 1642 :     if(compressed_size >= 0xffffffff)

  00200	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$1$[ebp], 0
  00204	77 06		 ja	 SHORT $LN58@zipCloseFi
  00206	83 7d fc ff	 cmp	 DWORD PTR _compressed_size$2$[ebp], -1
  0020a	72 03		 jb	 SHORT $LN20@zipCloseFi
$LN58@zipCloseFi:

; 1643 :       datasize += 8;

  0020c	83 c0 08	 add	 eax, 8
$LN20@zipCloseFi:

; 1644 : 
; 1645 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1646 :     if(zi->ci.pos_local_header >= 0xffffffff)

  0020f	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00216	77 09		 ja	 SHORT $LN59@zipCloseFi
  00218	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  0021f	72 03		 jb	 SHORT $LN19@zipCloseFi
$LN59@zipCloseFi:

; 1647 :       datasize += 8;

  00221	83 c0 08	 add	 eax, 8
$LN19@zipCloseFi:

; 1648 : 
; 1649 :     if(datasize > 0)

  00224	66 85 c0	 test	 ax, ax
  00227	0f 8e e8 00 00
	00		 jle	 $LN18@zipCloseFi

; 1650 :     {
; 1651 :       char* p = NULL;
; 1652 : 
; 1653 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  0022d	98		 cwde
  0022e	89 45 ec	 mov	 DWORD PTR tv642[ebp], eax
  00231	83 c0 04	 add	 eax, 4
  00234	3b 86 94 00 00
	00		 cmp	 eax, DWORD PTR [esi+148]
  0023a	76 0c		 jbe	 SHORT $LN17@zipCloseFi

; 1654 :       {
; 1655 :         // we can not write more data to the buffer that we have room for.
; 1656 :         return ZIP_BADZIPFILE;

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00243	5b		 pop	 ebx

; 1745 : }

  00244	8b e5		 mov	 esp, ebp
  00246	5d		 pop	 ebp
  00247	c3		 ret	 0
$LN17@zipCloseFi:

; 1657 :       }
; 1658 : 
; 1659 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  00248	8b be 88 00 00
	00		 mov	 edi, DWORD PTR [esi+136]
  0024e	03 be 90 00 00
	00		 add	 edi, DWORD PTR [esi+144]

; 1660 : 
; 1661 :       // Add Extra Information Header for 'ZIP64 information'
; 1662 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00254	6a 02		 push	 2
  00256	6a 00		 push	 0
  00258	6a 01		 push	 1
  0025a	57		 push	 edi
  0025b	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1663 :       p += 2;
; 1664 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  00260	8b 45 ec	 mov	 eax, DWORD PTR tv642[ebp]
  00263	99		 cdq
  00264	6a 02		 push	 2
  00266	52		 push	 edx
  00267	50		 push	 eax
  00268	83 c7 02	 add	 edi, 2
  0026b	57		 push	 edi
  0026c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1665 :       p += 2;
; 1666 : 
; 1667 :       if(uncompressed_size >= 0xffffffff)

  00271	8b 4d 08	 mov	 ecx, DWORD PTR _uncompressed_size$2$[ebp]
  00274	8b 45 f8	 mov	 eax, DWORD PTR _uncompressed_size$1$[ebp]
  00277	83 c4 20	 add	 esp, 32			; 00000020H
  0027a	83 c7 02	 add	 edi, 2
  0027d	85 c9		 test	 ecx, ecx
  0027f	75 05		 jne	 SHORT $LN60@zipCloseFi
  00281	83 f8 ff	 cmp	 eax, -1
  00284	72 10		 jb	 SHORT $LN16@zipCloseFi
$LN60@zipCloseFi:

; 1668 :       {
; 1669 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  00286	6a 08		 push	 8
  00288	51		 push	 ecx
  00289	50		 push	 eax
  0028a	57		 push	 edi
  0028b	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00290	83 c4 10	 add	 esp, 16			; 00000010H

; 1670 :         p += 8;

  00293	83 c7 08	 add	 edi, 8
$LN16@zipCloseFi:

; 1671 :       }
; 1672 : 
; 1673 :       if(compressed_size >= 0xffffffff)

  00296	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$1$[ebp]
  00299	8b 45 fc	 mov	 eax, DWORD PTR _compressed_size$2$[ebp]
  0029c	85 c9		 test	 ecx, ecx
  0029e	75 05		 jne	 SHORT $LN61@zipCloseFi
  002a0	83 f8 ff	 cmp	 eax, -1
  002a3	72 10		 jb	 SHORT $LN15@zipCloseFi
$LN61@zipCloseFi:

; 1674 :       {
; 1675 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  002a5	6a 08		 push	 8
  002a7	51		 push	 ecx
  002a8	50		 push	 eax
  002a9	57		 push	 edi
  002aa	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002af	83 c4 10	 add	 esp, 16			; 00000010H

; 1676 :         p += 8;

  002b2	83 c7 08	 add	 edi, 8
$LN15@zipCloseFi:

; 1677 :       }
; 1678 : 
; 1679 :       if(zi->ci.pos_local_header >= 0xffffffff)

  002b5	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  002bb	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  002c1	85 c9		 test	 ecx, ecx
  002c3	75 05		 jne	 SHORT $LN62@zipCloseFi
  002c5	83 f8 ff	 cmp	 eax, -1
  002c8	72 0d		 jb	 SHORT $LN14@zipCloseFi
$LN62@zipCloseFi:

; 1680 :       {
; 1681 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  002ca	6a 08		 push	 8
  002cc	51		 push	 ecx
  002cd	50		 push	 eax
  002ce	57		 push	 edi
  002cf	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002d4	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@zipCloseFi:

; 1682 :         p += 8;
; 1683 :       }
; 1684 : 
; 1685 :       // Update how much extra free space we got in the memory buffer
; 1686 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1687 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1688 :       zi->ci.size_centralExtraFree -= datasize + 4;

  002d7	8b 4d ec	 mov	 ecx, DWORD PTR tv642[ebp]
  002da	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  002df	2b c1		 sub	 eax, ecx
  002e1	01 86 94 00 00
	00		 add	 DWORD PTR [esi+148], eax

; 1689 :       zi->ci.size_centralheader += datasize + 4;

  002e7	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  002ea	01 86 90 00 00
	00		 add	 DWORD PTR [esi+144], eax

; 1690 : 
; 1691 :       // Update the extra info size field
; 1692 :       zi->ci.size_centralExtra += datasize + 4;

  002f0	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  002f3	01 86 8c 00 00
	00		 add	 DWORD PTR [esi+140], eax

; 1693 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  002f9	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  002ff	6a 02		 push	 2
  00301	6a 00		 push	 0
  00303	ff b6 8c 00 00
	00		 push	 DWORD PTR [esi+140]
  00309	83 c0 1e	 add	 eax, 30			; 0000001eH
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00312	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@zipCloseFi:

; 1694 :     }
; 1695 : 
; 1696 :     if (err==ZIP_OK)

  00315	85 db		 test	 ebx, ebx
  00317	75 1a		 jne	 SHORT $LN13@zipCloseFi

; 1697 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  00319	ff b6 90 00 00
	00		 push	 DWORD PTR [esi+144]
  0031f	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  00322	ff b6 88 00 00
	00		 push	 DWORD PTR [esi+136]
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 _add_data_in_datablock
  0032e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00331	8b d8		 mov	 ebx, eax
$LN13@zipCloseFi:

; 1698 : 
; 1699 :     free(zi->ci.central_header);

  00333	ff b6 88 00 00
	00		 push	 DWORD PTR [esi+136]
  00339	e8 00 00 00 00	 call	 _free
  0033e	83 c4 04	 add	 esp, 4

; 1700 : 
; 1701 :     if (err==ZIP_OK)

  00341	85 db		 test	 ebx, ebx
  00343	0f 85 08 01 00
	00		 jne	 $LN1@zipCloseFi

; 1702 :     {
; 1703 :         // Update the LocalFileHeader with the new values.
; 1704 : 
; 1705 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00349	ff 76 2c	 push	 DWORD PTR [esi+44]
  0034c	56		 push	 esi
  0034d	e8 00 00 00 00	 call	 _call_ztell64

; 1706 : 
; 1707 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00352	8b be 80 00 00
	00		 mov	 edi, DWORD PTR [esi+128]
  00358	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  0035e	53		 push	 ebx
  0035f	83 c7 0e	 add	 edi, 14			; 0000000eH
  00362	13 cb		 adc	 ecx, ebx
  00364	51		 push	 ecx
  00365	57		 push	 edi
  00366	ff 76 2c	 push	 DWORD PTR [esi+44]
  00369	89 45 e8	 mov	 DWORD PTR _cur_pos_inzip$2$[ebp], eax
  0036c	56		 push	 esi
  0036d	89 55 ec	 mov	 DWORD PTR _cur_pos_inzip$1$[ebp], edx
  00370	e8 00 00 00 00	 call	 _call_zseek64
  00375	83 c4 1c	 add	 esp, 28			; 0000001cH
  00378	85 c0		 test	 eax, eax
  0037a	74 05		 je	 SHORT $LN50@zipCloseFi

; 1708 :             err = ZIP_ERRNO;

  0037c	83 cb ff	 or	 ebx, -1

; 1709 : 
; 1710 :         if (err==ZIP_OK)

  0037f	eb 15		 jmp	 SHORT $LN10@zipCloseFi
$LN50@zipCloseFi:

; 1711 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  00381	6a 04		 push	 4
  00383	6a 00		 push	 0
  00385	ff 75 f0	 push	 DWORD PTR _crc32$1$[ebp]
  00388	ff 76 2c	 push	 DWORD PTR [esi+44]
  0038b	56		 push	 esi
  0038c	e8 00 00 00 00	 call	 _zip64local_putValue
  00391	83 c4 14	 add	 esp, 20			; 00000014H
  00394	8b d8		 mov	 ebx, eax
$LN10@zipCloseFi:

; 1712 : 
; 1713 :         if(uncompressed_size >= 0xffffffff)

  00396	83 7d 08 00	 cmp	 DWORD PTR _uncompressed_size$2$[ebp], 0
  0039a	8b 7d f8	 mov	 edi, DWORD PTR _uncompressed_size$1$[ebp]
  0039d	77 2f		 ja	 SHORT $LN63@zipCloseFi
  0039f	83 ff ff	 cmp	 edi, -1
  003a2	73 2a		 jae	 SHORT $LN63@zipCloseFi

; 1726 :           }
; 1727 :         }
; 1728 :         else
; 1729 :         {
; 1730 :           if (err==ZIP_OK) /* compressed size, unknown */

  003a4	85 db		 test	 ebx, ebx
  003a6	0f 85 87 00 00
	00		 jne	 $LN2@zipCloseFi

; 1731 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  003ac	6a 04		 push	 4
  003ae	ff 75 f4	 push	 DWORD PTR _compressed_size$1$[ebp]
  003b1	ff 75 fc	 push	 DWORD PTR _compressed_size$2$[ebp]
  003b4	ff 76 2c	 push	 DWORD PTR [esi+44]
  003b7	56		 push	 esi
  003b8	e8 00 00 00 00	 call	 _zip64local_putValue
  003bd	8b d8		 mov	 ebx, eax
  003bf	83 c4 14	 add	 esp, 20			; 00000014H

; 1732 : 
; 1733 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  003c2	85 db		 test	 ebx, ebx
  003c4	75 6d		 jne	 SHORT $LN2@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  003c6	6a 04		 push	 4
  003c8	ff 75 08	 push	 DWORD PTR _uncompressed_size$2$[ebp]
  003cb	57		 push	 edi
  003cc	eb 57		 jmp	 SHORT $LN76@zipCloseFi
$LN63@zipCloseFi:

; 1714 :         {
; 1715 :           if(zi->ci.pos_zip64extrainfo > 0)

  003ce	8b 8e bc 00 01
	00		 mov	 ecx, DWORD PTR [esi+65724]
  003d4	8b 86 b8 00 01
	00		 mov	 eax, DWORD PTR [esi+65720]
  003da	85 c9		 test	 ecx, ecx
  003dc	75 04		 jne	 SHORT $LN64@zipCloseFi
  003de	85 c0		 test	 eax, eax
  003e0	74 51		 je	 SHORT $LN2@zipCloseFi
$LN64@zipCloseFi:

; 1716 :           {
; 1717 :             // Update the size in the ZIP64 extended field.
; 1718 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003e2	83 c0 04	 add	 eax, 4
  003e5	6a 00		 push	 0
  003e7	83 d1 00	 adc	 ecx, 0
  003ea	51		 push	 ecx
  003eb	50		 push	 eax
  003ec	ff 76 2c	 push	 DWORD PTR [esi+44]
  003ef	56		 push	 esi
  003f0	e8 00 00 00 00	 call	 _call_zseek64
  003f5	83 c4 14	 add	 esp, 20			; 00000014H
  003f8	85 c0		 test	 eax, eax
  003fa	74 05		 je	 SHORT $LN7@zipCloseFi

; 1719 :               err = ZIP_ERRNO;

  003fc	83 cb ff	 or	 ebx, -1

; 1720 : 
; 1721 :             if (err==ZIP_OK) /* compressed size, unknown */

  003ff	eb 32		 jmp	 SHORT $LN2@zipCloseFi
$LN7@zipCloseFi:
  00401	85 db		 test	 ebx, ebx
  00403	75 2e		 jne	 SHORT $LN2@zipCloseFi

; 1722 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  00405	6a 08		 push	 8
  00407	ff 75 08	 push	 DWORD PTR _uncompressed_size$2$[ebp]
  0040a	57		 push	 edi
  0040b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0040e	56		 push	 esi
  0040f	e8 00 00 00 00	 call	 _zip64local_putValue
  00414	8b d8		 mov	 ebx, eax
  00416	83 c4 14	 add	 esp, 20			; 00000014H

; 1723 : 
; 1724 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  00419	85 db		 test	 ebx, ebx
  0041b	75 16		 jne	 SHORT $LN2@zipCloseFi

; 1725 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  0041d	6a 08		 push	 8
  0041f	ff 75 f4	 push	 DWORD PTR _compressed_size$1$[ebp]
  00422	ff 75 fc	 push	 DWORD PTR _compressed_size$2$[ebp]
$LN76@zipCloseFi:
  00425	ff 76 2c	 push	 DWORD PTR [esi+44]
  00428	56		 push	 esi
  00429	e8 00 00 00 00	 call	 _zip64local_putValue
  0042e	8b d8		 mov	 ebx, eax
  00430	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@zipCloseFi:

; 1735 :         }
; 1736 : 
; 1737 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00433	6a 00		 push	 0
  00435	ff 75 ec	 push	 DWORD PTR _cur_pos_inzip$1$[ebp]
  00438	ff 75 e8	 push	 DWORD PTR _cur_pos_inzip$2$[ebp]
  0043b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0043e	56		 push	 esi
  0043f	e8 00 00 00 00	 call	 _call_zseek64
  00444	83 c4 14	 add	 esp, 20			; 00000014H
  00447	85 c0		 test	 eax, eax
  00449	b8 ff ff ff ff	 mov	 eax, -1
  0044e	0f 45 d8	 cmovne	 ebx, eax
$LN1@zipCloseFi:

; 1738 :             err = ZIP_ERRNO;
; 1739 :     }
; 1740 : 
; 1741 :     zi->number_entry ++;

  00451	83 86 f8 00 01
	00 01		 add	 DWORD PTR [esi+65784], 1
  00458	5f		 pop	 edi

; 1742 :     zi->in_opened_file_inzip = 0;

  00459	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00460	83 96 fc 00 01
	00 00		 adc	 DWORD PTR [esi+65788], 0
  00467	5e		 pop	 esi

; 1743 : 
; 1744 :     return err;

  00468	8b c3		 mov	 eax, ebx
  0046a	5b		 pop	 ebx

; 1745 : }

  0046b	8b e5		 mov	 esp, ebp
  0046d	5d		 pop	 ebp
  0046e	c3		 ret	 0
_zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw
_TEXT	SEGMENT
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw PROC				; COMDAT

; 1509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1510 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00003	ff 75 10	 push	 DWORD PTR _crc32$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR _uncompressed_size$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000e	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw64
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 1511 : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_zipCloseFileInZipRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZip
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip PROC					; COMDAT

; 1748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1749 :     return zipCloseFileInZipRaw (file,0,0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000a	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1750 : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_zipCloseFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipWriteInFileInZip
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip PROC				; COMDAT

; 1402 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1403 :     zip64_internal* zi;
; 1404 :     int err=ZIP_OK;
; 1405 : 
; 1406 :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN15@zipWriteIn
$LN25@zipWriteIn:

; 1407 :         return ZIP_PARAMERROR;

  0000b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00010	5e		 pop	 esi

; 1506 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN15@zipWriteIn:

; 1408 :     zi = (zip64_internal*)file;
; 1409 : 
; 1410 :     if (zi->in_opened_file_inzip == 0)

  00013	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00017	74 f2		 je	 SHORT $LN25@zipWriteIn

; 1411 :         return ZIP_PARAMERROR;
; 1412 : 
; 1413 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00019	53		 push	 ebx
  0001a	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00021	53		 push	 ebx
  00022	57		 push	 edi
  00023	ff b6 a8 00 01
	00		 push	 DWORD PTR [esi+65704]
  00029	e8 00 00 00 00	 call	 _crc32

; 1414 : 
; 1415 : #ifdef HAVE_BZIP2
; 1416 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1417 :     {
; 1418 :       zi->ci.bstream.next_in = (void*)buf;
; 1419 :       zi->ci.bstream.avail_in = len;
; 1420 :       err = BZ_RUN_OK;
; 1421 : 
; 1422 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1423 :       {
; 1424 :         if (zi->ci.bstream.avail_out == 0)
; 1425 :         {
; 1426 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1427 :             err = ZIP_ERRNO;
; 1428 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1429 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1430 :         }
; 1431 : 
; 1432 : 
; 1433 :         if(err != BZ_RUN_OK)
; 1434 :           break;
; 1435 : 
; 1436 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1437 :         {
; 1438 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1439 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1440 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1441 : 
; 1442 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1443 :         }
; 1444 :       }
; 1445 : 
; 1446 :       if(err == BZ_RUN_OK)
; 1447 :         err = ZIP_OK;
; 1448 :     }
; 1449 :     else
; 1450 : #endif
; 1451 :     {
; 1452 :       zi->ci.stream.next_in = (Bytef*)buf;

  0002e	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	89 39		 mov	 DWORD PTR [ecx], edi

; 1453 :       zi->ci.stream.avail_in = len;

  00036	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00039	83 cf ff	 or	 edi, -1
  0003c	89 86 a8 00 01
	00		 mov	 DWORD PTR [esi+65704], eax
  00042	33 db		 xor	 ebx, ebx
$LL13@zipWriteIn:

; 1454 : 
; 1455 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00044	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  00048	0f 86 a4 00 00
	00		 jbe	 $LN24@zipWriteIn

; 1456 :       {
; 1457 :           if (zi->ci.stream.avail_out == 0)

  0004e	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00052	75 22		 jne	 SHORT $LN11@zipWriteIn

; 1458 :           {
; 1459 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  0005a	83 c4 04	 add	 esp, 4
  0005d	83 f8 ff	 cmp	 eax, -1

; 1460 :                   err = ZIP_ERRNO;
; 1461 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1462 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  00060	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  00066	0f 44 df	 cmove	 ebx, edi
  00069	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H
  00070	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00073	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
$LN11@zipWriteIn:

; 1463 :           }
; 1464 : 
; 1465 : 
; 1466 :           if(err != ZIP_OK)

  00076	85 db		 test	 ebx, ebx
  00078	75 78		 jne	 SHORT $LN24@zipWriteIn

; 1467 :               break;
; 1468 : 
; 1469 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0007a	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00081	75 2b		 jne	 SHORT $LN8@zipWriteIn
  00083	39 9e a0 00 00
	00		 cmp	 DWORD PTR [esi+160], ebx
  00089	75 23		 jne	 SHORT $LN8@zipWriteIn

; 1470 :           {
; 1471 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  0008b	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1472 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  0008e	53		 push	 ebx
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 _deflate

; 1473 :               if(uTotalOutBefore > zi->ci.stream.total_out)
; 1474 :               {
; 1475 :                 int bBreak = 0;
; 1476 :                 bBreak++;
; 1477 :               }
; 1478 : 
; 1479 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00095	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00098	2b cf		 sub	 ecx, edi
  0009a	01 4e 7c	 add	 DWORD PTR [esi+124], ecx
  0009d	8b d8		 mov	 ebx, eax
  0009f	83 c4 08	 add	 esp, 8
  000a2	85 db		 test	 ebx, ebx
  000a4	75 4c		 jne	 SHORT $LN24@zipWriteIn

; 1454 : 
; 1455 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  000a6	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a9	83 cf ff	 or	 edi, -1
  000ac	eb 96		 jmp	 SHORT $LL13@zipWriteIn
$LN8@zipWriteIn:

; 1480 :           }
; 1481 :           else
; 1482 :           {
; 1483 :               uInt copy_this,i;
; 1484 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000ae	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]
  000b1	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  000b4	0f 42 7e 44	 cmovb	 edi, DWORD PTR [esi+68]

; 1485 :                   copy_this = zi->ci.stream.avail_in;
; 1486 :               else
; 1487 :                   copy_this = zi->ci.stream.avail_out;
; 1488 : 
; 1489 :               for (i = 0; i < copy_this; i++)

  000b8	33 d2		 xor	 edx, edx
  000ba	85 ff		 test	 edi, edi
  000bc	74 18		 je	 SHORT $LN1@zipWriteIn
  000be	8b ff		 npad	 2
$LL3@zipWriteIn:

; 1490 :                   *(((char*)zi->ci.stream.next_out)+i) =
; 1491 :                       *(((const char*)zi->ci.stream.next_in)+i);

  000c0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c2	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000c5	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  000c8	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000cb	42		 inc	 edx
  000cc	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000cf	3b d7		 cmp	 edx, edi
  000d1	72 ed		 jb	 SHORT $LL3@zipWriteIn
  000d3	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
$LN1@zipWriteIn:

; 1492 :               {
; 1493 :                   zi->ci.stream.avail_in -= copy_this;

  000d6	29 7e 44	 sub	 DWORD PTR [esi+68], edi

; 1494 :                   zi->ci.stream.avail_out-= copy_this;

  000d9	29 7e 50	 sub	 DWORD PTR [esi+80], edi

; 1495 :                   zi->ci.stream.next_in+= copy_this;

  000dc	01 39		 add	 DWORD PTR [ecx], edi

; 1496 :                   zi->ci.stream.next_out+= copy_this;

  000de	01 7e 4c	 add	 DWORD PTR [esi+76], edi

; 1497 :                   zi->ci.stream.total_in+= copy_this;

  000e1	01 7e 48	 add	 DWORD PTR [esi+72], edi

; 1498 :                   zi->ci.stream.total_out+= copy_this;

  000e4	01 7e 54	 add	 DWORD PTR [esi+84], edi

; 1499 :                   zi->ci.pos_in_buffered_data += copy_this;

  000e7	01 7e 7c	 add	 DWORD PTR [esi+124], edi
  000ea	83 cf ff	 or	 edi, -1
  000ed	e9 52 ff ff ff	 jmp	 $LL13@zipWriteIn
$LN24@zipWriteIn:
  000f2	5f		 pop	 edi

; 1500 :               }
; 1501 :           }
; 1502 :       }// while(...)
; 1503 :     }
; 1504 : 
; 1505 :     return err;

  000f3	8b c3		 mov	 eax, ebx
  000f5	5b		 pop	 ebx
  000f6	5e		 pop	 esi

; 1506 : }

  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_zipWriteInFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip4_64
_TEXT	SEGMENT
_bufHead$1 = -20					; size = 12
_filename$2$ = -8					; size = 4
_i$3$ = -4						; size = 4
_size_comment$1$ = 8					; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zip64$ = 80						; size = 4
_zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;
; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     if (password != NULL)
; 1071 :         return ZIP_PARAMERROR;
; 1072 : #    endif
; 1073 : 
; 1074 :     if (file == NULL)

  00007	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	75 0a		 jne	 SHORT $LN41@zipOpenNew
$LN63@zipOpenNew:

; 1075 :         return ZIP_PARAMERROR;

  0000e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00013	5e		 pop	 esi

; 1262 : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN41@zipOpenNew:

; 1076 : 
; 1077 : #ifdef HAVE_BZIP2
; 1078 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1079 :       return ZIP_PARAMERROR;
; 1080 : #else
; 1081 :     if ((method!=0) && (method!=Z_DEFLATED))

  00018	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN40@zipOpenNew
  0001f	83 f8 08	 cmp	 eax, 8
  00022	75 ea		 jne	 SHORT $LN63@zipOpenNew
$LN40@zipOpenNew:

; 1082 :       return ZIP_PARAMERROR;
; 1083 : #endif
; 1084 : 
; 1085 :     zi = (zip64_internal*)file;
; 1086 : 
; 1087 :     if (zi->in_opened_file_inzip == 1)

  00024	83 7e 38 01	 cmp	 DWORD PTR [esi+56], 1
  00028	75 11		 jne	 SHORT $LN38@zipOpenNew

; 1088 :     {
; 1089 :         err = zipCloseFileInZip (file);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 _zipCloseFileInZip
  00030	83 c4 04	 add	 esp, 4

; 1090 :         if (err != ZIP_OK)

  00033	85 c0		 test	 eax, eax
  00035	0f 85 c4 04 00
	00		 jne	 $LN42@zipOpenNew
$LN38@zipOpenNew:

; 1091 :             return err;
; 1092 :     }
; 1093 : 
; 1094 :     if (filename==NULL)

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0003e	85 c0		 test	 eax, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  00045	0f 45 c8	 cmovne	 ecx, eax

; 1095 :         filename="-";
; 1096 : 
; 1097 :     if (comment==NULL)

  00048	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0004b	53		 push	 ebx
  0004c	89 4d f8	 mov	 DWORD PTR _filename$2$[ebp], ecx
  0004f	85 c0		 test	 eax, eax
  00051	75 04		 jne	 SHORT $LN36@zipOpenNew

; 1098 :         size_comment = 0;

  00053	33 db		 xor	 ebx, ebx

; 1099 :     else

  00055	eb 12		 jmp	 SHORT $LN60@zipOpenNew
$LN36@zipOpenNew:

; 1100 :         size_comment = (uInt)strlen(comment);

  00057	8b d8		 mov	 ebx, eax
  00059	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  0005c	8d 64 24 00	 npad	 4
$LL55@zipOpenNew:
  00060	8a 03		 mov	 al, BYTE PTR [ebx]
  00062	43		 inc	 ebx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL55@zipOpenNew
  00067	2b da		 sub	 ebx, edx
$LN60@zipOpenNew:
  00069	57		 push	 edi

; 1101 : 
; 1102 :     size_filename = (uInt)strlen(filename);

  0006a	8b f9		 mov	 edi, ecx
  0006c	89 5d 08	 mov	 DWORD PTR _size_comment$1$[ebp], ebx
  0006f	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL56@zipOpenNew:
  00072	8a 07		 mov	 al, BYTE PTR [edi]
  00074	47		 inc	 edi
  00075	84 c0		 test	 al, al
  00077	75 f9		 jne	 SHORT $LL56@zipOpenNew

; 1103 : 
; 1104 :     if (zipfi == NULL)

  00079	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  0007c	2b f9		 sub	 edi, ecx
  0007e	85 c0		 test	 eax, eax
  00080	75 08		 jne	 SHORT $LN34@zipOpenNew

; 1105 :         zi->ci.dosDate = 0;

  00082	89 86 a4 00 01
	00		 mov	 DWORD PTR [esi+65700], eax

; 1106 :     else

  00088	eb 1e		 jmp	 SHORT $LN31@zipOpenNew
$LN34@zipOpenNew:

; 1107 :     {
; 1108 :         if (zipfi->dosDate != 0)

  0008a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 08		 je	 SHORT $LN32@zipOpenNew

; 1109 :             zi->ci.dosDate = zipfi->dosDate;

  00091	89 8e a4 00 01
	00		 mov	 DWORD PTR [esi+65700], ecx

; 1110 :         else

  00097	eb 0f		 jmp	 SHORT $LN31@zipOpenNew
$LN32@zipOpenNew:

; 1111 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _zip64local_TmzDateToDosDate
  0009f	83 c4 04	 add	 esp, 4
  000a2	89 86 a4 00 01
	00		 mov	 DWORD PTR [esi+65700], eax
$LN31@zipOpenNew:

; 1112 :     }
; 1113 : 
; 1114 :     zi->ci.flag = flagBase;
; 1115 :     if ((level==8) || (level==9))

  000a8	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  000ab	8b 45 4c	 mov	 eax, DWORD PTR _flagBase$[ebp]
  000ae	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  000b4	83 f9 08	 cmp	 ecx, 8
  000b7	74 05		 je	 SHORT $LN29@zipOpenNew
  000b9	83 f9 09	 cmp	 ecx, 9
  000bc	75 09		 jne	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1116 :       zi->ci.flag |= 2;

  000be	83 c8 02	 or	 eax, 2
  000c1	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN30@zipOpenNew:

; 1117 :     if ((level==2))

  000c7	83 f9 02	 cmp	 ecx, 2
  000ca	75 09		 jne	 SHORT $LN28@zipOpenNew

; 1118 :       zi->ci.flag |= 4;

  000cc	83 8e 98 00 00
	00 04		 or	 DWORD PTR [esi+152], 4

; 1119 :     if ((level==1))

  000d3	eb 0c		 jmp	 SHORT $LN27@zipOpenNew
$LN28@zipOpenNew:
  000d5	83 f9 01	 cmp	 ecx, 1
  000d8	75 07		 jne	 SHORT $LN27@zipOpenNew

; 1120 :       zi->ci.flag |= 6;

  000da	83 8e 98 00 00
	00 06		 or	 DWORD PTR [esi+152], 6
$LN27@zipOpenNew:

; 1121 :     if (password != NULL)

  000e1	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  000e5	74 07		 je	 SHORT $LN26@zipOpenNew

; 1122 :       zi->ci.flag |= 1;

  000e7	83 8e 98 00 00
	00 01		 or	 DWORD PTR [esi+152], 1
$LN26@zipOpenNew:

; 1123 : 
; 1124 :     zi->ci.crc32 = 0;
; 1125 :     zi->ci.method = method;

  000ee	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]

; 1126 :     zi->ci.encrypt = 0;
; 1127 :     zi->ci.stream_initialised = 0;
; 1128 :     zi->ci.pos_in_buffered_data = 0;
; 1129 :     zi->ci.raw = raw;
; 1130 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  000f1	ff 76 2c	 push	 DWORD PTR [esi+44]
  000f4	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  000fa	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  000fd	56		 push	 esi
  000fe	c7 86 a8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65704], 0
  00108	c7 86 ac 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65708], 0
  00112	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00119	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00120	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  00126	e8 00 00 00 00	 call	 _call_ztell64

; 1131 : 
; 1132 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  0012b	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  0012e	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00134	83 c1 2e	 add	 ecx, 46			; 0000002eH
  00137	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0013a	03 c1		 add	 eax, ecx
  0013c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1133 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data
; 1134 : 
; 1135 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  00142	83 c0 20	 add	 eax, 32			; 00000020H
  00145	50		 push	 eax
  00146	89 96 84 00 00
	00		 mov	 DWORD PTR [esi+132], edx
  0014c	c7 86 94 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+148], 32	; 00000020H
  00156	e8 00 00 00 00	 call	 _malloc

; 1136 : 
; 1137 :     zi->ci.size_centralExtra = size_extrafield_global;

  0015b	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]

; 1138 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  0015e	6a 04		 push	 4
  00160	6a 00		 push	 0
  00162	68 50 4b 01 02	 push	 33639248		; 02014b50H
  00167	50		 push	 eax
  00168	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0016e	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00174	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1139 :     /* version info */
; 1140 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  00179	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0017f	6a 02		 push	 2
  00181	6a 00		 push	 0
  00183	ff 75 48	 push	 DWORD PTR _versionMadeBy$[ebp]
  00186	83 c0 04	 add	 eax, 4
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  0018f	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00195	6a 02		 push	 2
  00197	6a 00		 push	 0
  00199	83 c0 06	 add	 eax, 6
  0019c	6a 14		 push	 20			; 00000014H
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  001a4	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001aa	6a 02		 push	 2
  001ac	6a 00		 push	 0
  001ae	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  001b4	83 c0 08	 add	 eax, 8
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  001bd	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001c3	83 c4 4c	 add	 esp, 76			; 0000004cH
  001c6	83 c0 0a	 add	 eax, 10			; 0000000aH
  001c9	6a 02		 push	 2
  001cb	6a 00		 push	 0
  001cd	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  001d9	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001df	6a 04		 push	 4
  001e1	6a 00		 push	 0
  001e3	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  001e9	83 c0 0c	 add	 eax, 12			; 0000000cH
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  001f2	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001f8	6a 04		 push	 4
  001fa	6a 00		 push	 0
  001fc	83 c0 10	 add	 eax, 16			; 00000010H
  001ff	6a 00		 push	 0
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00207	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0020d	6a 04		 push	 4
  0020f	6a 00		 push	 0
  00211	83 c0 14	 add	 eax, 20			; 00000014H
  00214	6a 00		 push	 0
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0021c	83 c4 40	 add	 esp, 64			; 00000040H

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  0021f	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00225	6a 04		 push	 4
  00227	6a 00		 push	 0
  00229	83 c0 18	 add	 eax, 24			; 00000018H
  0022c	6a 00		 push	 0
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00234	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0023a	6a 02		 push	 2
  0023c	6a 00		 push	 0
  0023e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00241	57		 push	 edi
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  00248	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0024e	6a 02		 push	 2
  00250	6a 00		 push	 0
  00252	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00255	83 c0 1e	 add	 eax, 30			; 0000001eH
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  0025e	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00264	6a 02		 push	 2
  00266	6a 00		 push	 0
  00268	83 c0 20	 add	 eax, 32			; 00000020H
  0026b	53		 push	 ebx
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  00272	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00278	83 c4 40	 add	 esp, 64			; 00000040H
  0027b	83 c0 22	 add	 eax, 34			; 00000022H
  0027e	6a 02		 push	 2
  00280	6a 00		 push	 0
  00282	6a 00		 push	 0
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1152 : 
; 1153 :     if (zipfi==NULL)

  0028a	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  0028d	83 c4 10	 add	 esp, 16			; 00000010H

; 1154 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  00290	6a 02		 push	 2
  00292	6a 00		 push	 0
  00294	85 c0		 test	 eax, eax
  00296	75 18		 jne	 SHORT $LN25@zipOpenNew
  00298	50		 push	 eax
  00299	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0029f	83 c0 24	 add	 eax, 36			; 00000024H
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1157 : 
; 1158 :     if (zipfi==NULL)
; 1159 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  002a8	6a 04		 push	 4
  002aa	6a 00		 push	 0
  002ac	6a 00		 push	 0

; 1160 :     else

  002ae	eb 1c		 jmp	 SHORT $LN61@zipOpenNew
$LN25@zipOpenNew:

; 1155 :     else
; 1156 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  002b0	ff 70 1c	 push	 DWORD PTR [eax+28]
  002b3	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  002b9	83 c0 24	 add	 eax, 36			; 00000024H
  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1161 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  002c2	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  002c5	6a 04		 push	 4
  002c7	6a 00		 push	 0
  002c9	ff 70 20	 push	 DWORD PTR [eax+32]
$LN61@zipOpenNew:
  002cc	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  002d2	83 c0 26	 add	 eax, 38			; 00000026H
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002db	83 c4 20	 add	 esp, 32			; 00000020H

; 1162 : 
; 1163 :     if(zi->ci.pos_local_header >= 0xffffffff)

  002de	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  002e5	77 23		 ja	 SHORT $LN57@zipOpenNew
  002e7	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  002ee	73 1a		 jae	 SHORT $LN57@zipOpenNew

; 1165 :     else
; 1166 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writting_offset,4);

  002f0	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  002f6	33 c0		 xor	 eax, eax
  002f8	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  002fe	6a 04		 push	 4
  00300	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]
  00306	50		 push	 eax
  00307	51		 push	 ecx
  00308	eb 06		 jmp	 SHORT $LN62@zipOpenNew
$LN57@zipOpenNew:

; 1164 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  0030a	6a 04		 push	 4
  0030c	6a 00		 push	 0
  0030e	6a ff		 push	 -1
$LN62@zipOpenNew:
  00310	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00316	83 c0 2a	 add	 eax, 42			; 0000002aH
  00319	50		 push	 eax
  0031a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0031f	83 c4 10	 add	 esp, 16			; 00000010H

; 1167 : 
; 1168 :     for (i=0;i<size_filename;i++)

  00322	33 d2		 xor	 edx, edx
  00324	85 ff		 test	 edi, edi
  00326	74 1d		 je	 SHORT $LN17@zipOpenNew
  00328	8b 5d f8	 mov	 ebx, DWORD PTR _filename$2$[ebp]
  0032b	eb 03 8d 49 00	 npad	 5
$LL19@zipOpenNew:

; 1169 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00330	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00336	8a 04 1a	 mov	 al, BYTE PTR [edx+ebx]
  00339	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  0033d	42		 inc	 edx
  0033e	3b d7		 cmp	 edx, edi
  00340	72 ee		 jb	 SHORT $LL19@zipOpenNew
  00342	8b 5d 08	 mov	 ebx, DWORD PTR _size_comment$1$[ebp]
$LN17@zipOpenNew:

; 1170 : 
; 1171 :     for (i=0;i<size_extrafield_global;i++)

  00345	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00348	85 c9		 test	 ecx, ecx
  0034a	74 22		 je	 SHORT $LN14@zipOpenNew
  0034c	33 db		 xor	 ebx, ebx
  0034e	8b ff		 npad	 2
$LL16@zipOpenNew:

; 1172 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 1173 :               *(((const char*)extrafield_global)+i);

  00350	8b 45 1c	 mov	 eax, DWORD PTR _extrafield_global$[ebp]
  00353	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00359	8a 04 03	 mov	 al, BYTE PTR [ebx+eax]
  0035c	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  0035f	43		 inc	 ebx
  00360	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  00364	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00367	3b d9		 cmp	 ebx, ecx
  00369	72 e5		 jb	 SHORT $LL16@zipOpenNew
  0036b	8b 5d 08	 mov	 ebx, DWORD PTR _size_comment$1$[ebp]
$LN14@zipOpenNew:

; 1174 : 
; 1175 :     for (i=0;i<size_comment;i++)

  0036e	33 c0		 xor	 eax, eax
  00370	89 45 fc	 mov	 DWORD PTR _i$3$[ebp], eax
  00373	85 db		 test	 ebx, ebx
  00375	74 24		 je	 SHORT $LN11@zipOpenNew
$LL13@zipOpenNew:

; 1176 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1177 :               size_extrafield_global+i) = *(comment+i);

  00377	8b 5d 24	 mov	 ebx, DWORD PTR _comment$[ebp]
  0037a	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  0037d	8a 04 18	 mov	 al, BYTE PTR [eax+ebx]
  00380	03 d1		 add	 edx, ecx
  00382	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00388	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  0038c	8b 45 fc	 mov	 eax, DWORD PTR _i$3$[ebp]
  0038f	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00392	40		 inc	 eax
  00393	89 45 fc	 mov	 DWORD PTR _i$3$[ebp], eax
  00396	3b 45 08	 cmp	 eax, DWORD PTR _size_comment$1$[ebp]
  00399	72 dc		 jb	 SHORT $LL13@zipOpenNew
$LN11@zipOpenNew:

; 1178 :     if (zi->ci.central_header == NULL)

  0039b	83 be 88 00 00
	00 00		 cmp	 DWORD PTR [esi+136], 0
  003a2	75 0c		 jne	 SHORT $LN10@zipOpenNew

; 1179 :         return ZIP_INTERNALERROR;

  003a4	5f		 pop	 edi
  003a5	5b		 pop	 ebx
  003a6	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  003ab	5e		 pop	 esi

; 1262 : }

  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c3		 ret	 0
$LN10@zipOpenNew:

; 1180 : 
; 1181 :     zi->ci.zip64 = zip64;
; 1182 :     zi->ci.totalCompressedData = 0;
; 1183 :     zi->ci.totalUncompressedData = 0;
; 1184 :     zi->ci.pos_zip64extrainfo = 0;
; 1185 : 
; 1186 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  003b0	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  003b3	8b 45 50	 mov	 eax, DWORD PTR _zip64$[ebp]
  003b6	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  003b9	89 86 b0 00 01
	00		 mov	 DWORD PTR [esi+65712], eax
  003bf	ff 75 f8	 push	 DWORD PTR _filename$2$[ebp]
  003c2	c7 86 c0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65728], 0
  003cc	56		 push	 esi
  003cd	c7 86 c4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65732], 0
  003d7	c7 86 c8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65736], 0
  003e1	c7 86 cc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65740], 0
  003eb	c7 86 b8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65720], 0
  003f5	c7 86 bc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65724], 0
  003ff	e8 00 00 00 00	 call	 _Write_LocalFileHeader
  00404	8b d8		 mov	 ebx, eax
  00406	83 c4 10	 add	 esp, 16			; 00000010H

; 1187 : 
; 1188 : #ifdef HAVE_BZIP2
; 1189 :     zi->ci.bstream.avail_in = (uInt)0;
; 1190 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1191 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1192 :     zi->ci.bstream.total_in_hi32 = 0;
; 1193 :     zi->ci.bstream.total_in_lo32 = 0;
; 1194 :     zi->ci.bstream.total_out_hi32 = 0;
; 1195 :     zi->ci.bstream.total_out_lo32 = 0;
; 1196 : #endif
; 1197 : 
; 1198 :     zi->ci.stream.avail_in = (uInt)0;
; 1199 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1200 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  00409	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  0040f	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00416	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H
  0041d	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx

; 1201 :     zi->ci.stream.total_in = 0;

  00420	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 1202 :     zi->ci.stream.total_out = 0;

  00427	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 1203 :     zi->ci.stream.data_type = Z_BINARY;

  0042e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1204 : 
; 1205 : #ifdef HAVE_BZIP2
; 1206 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1207 : #else
; 1208 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00435	85 db		 test	 ebx, ebx
  00437	75 4f		 jne	 SHORT $LN6@zipOpenNew
  00439	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00440	75 46		 jne	 SHORT $LN6@zipOpenNew
  00442	39 86 a0 00 00
	00		 cmp	 DWORD PTR [esi+160], eax
  00448	75 3e		 jne	 SHORT $LN6@zipOpenNew

; 1209 : #endif
; 1210 :     {
; 1211 :         if(zi->ci.method == Z_DEFLATED)
; 1212 :         {
; 1213 :           zi->ci.stream.zalloc = (alloc_func)0;

  0044a	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1214 :           zi->ci.stream.zfree = (free_func)0;

  0044d	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1215 :           zi->ci.stream.opaque = (voidpf)0;

  00450	89 46 68	 mov	 DWORD PTR [esi+104], eax

; 1216 : 
; 1217 :           if (windowBits>0)

  00453	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00456	85 c0		 test	 eax, eax
  00458	7e 02		 jle	 SHORT $LN7@zipOpenNew

; 1218 :               windowBits = -windowBits;

  0045a	f7 d8		 neg	 eax
$LN7@zipOpenNew:

; 1219 : 
; 1220 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  0045c	6a 38		 push	 56			; 00000038H
  0045e	68 00 00 00 00	 push	 OFFSET ??_C@_05DFCKICEH@1?42?45?$AA@
  00463	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00466	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00469	50		 push	 eax
  0046a	6a 08		 push	 8
  0046c	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0046f	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 _deflateInit2_
  00478	8b d8		 mov	 ebx, eax
  0047a	83 c4 20	 add	 esp, 32			; 00000020H

; 1221 : 
; 1222 :           if (err==Z_OK)

  0047d	85 db		 test	 ebx, ebx
  0047f	75 07		 jne	 SHORT $LN6@zipOpenNew

; 1223 :               zi->ci.stream_initialised = Z_DEFLATED;

  00481	c7 46 78 08 00
	00 00		 mov	 DWORD PTR [esi+120], 8
$LN6@zipOpenNew:

; 1224 :         }
; 1225 :         else if(zi->ci.method == Z_BZIP2ED)
; 1226 :         {
; 1227 : #ifdef HAVE_BZIP2
; 1228 :             // Init BZip stuff here
; 1229 :           zi->ci.bstream.bzalloc = 0;
; 1230 :           zi->ci.bstream.bzfree = 0;
; 1231 :           zi->ci.bstream.opaque = (voidpf)0;
; 1232 : 
; 1233 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1234 :           if(err == BZ_OK)
; 1235 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1236 : #endif
; 1237 :         }
; 1238 : 
; 1239 :     }
; 1240 : 
; 1241 : #    ifndef NOCRYPT
; 1242 :     zi->ci.crypt_header_size = 0;

  00488	c7 86 e0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65760], 0

; 1243 :     if ((err==Z_OK) && (password != NULL))

  00492	85 db		 test	 ebx, ebx
  00494	75 65		 jne	 SHORT $LN1@zipOpenNew
  00496	8b 7d 40	 mov	 edi, DWORD PTR _password$[ebp]
  00499	85 ff		 test	 edi, edi
  0049b	74 57		 je	 SHORT $LN54@zipOpenNew

; 1244 :     {
; 1245 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1246 :         unsigned int sizeHead;
; 1247 :         zi->ci.encrypt = 1;

  0049d	c7 86 ac 00 01
	00 01 00 00 00	 mov	 DWORD PTR [esi+65708], 1

; 1248 :         zi->ci.pcrc_32_tab = get_crc_table();

  004a7	e8 00 00 00 00	 call	 _get_crc_table

; 1249 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1250 : 
; 1251 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  004ac	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  004af	89 86 dc 00 01
	00		 mov	 DWORD PTR [esi+65756], eax
  004b5	50		 push	 eax
  004b6	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  004bc	50		 push	 eax
  004bd	6a 0c		 push	 12			; 0000000cH
  004bf	8d 45 ec	 lea	 eax, DWORD PTR _bufHead$1[ebp]
  004c2	50		 push	 eax
  004c3	57		 push	 edi
  004c4	e8 00 00 00 00	 call	 _crypthead

; 1252 :         zi->ci.crypt_header_size = sizeHead;
; 1253 : 
; 1254 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  004c9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  004cc	8b f8		 mov	 edi, eax
  004ce	57		 push	 edi
  004cf	8d 45 ec	 lea	 eax, DWORD PTR _bufHead$1[ebp]
  004d2	50		 push	 eax
  004d3	ff 76 2c	 push	 DWORD PTR [esi+44]
  004d6	89 be e0 00 01
	00		 mov	 DWORD PTR [esi+65760], edi
  004dc	ff 76 1c	 push	 DWORD PTR [esi+28]
  004df	ff d1		 call	 ecx
  004e1	83 c4 28	 add	 esp, 40			; 00000028H
  004e4	3b c7		 cmp	 eax, edi
  004e6	74 0c		 je	 SHORT $LN54@zipOpenNew

; 1255 :                 err = ZIP_ERRNO;

  004e8	83 cb ff	 or	 ebx, -1
  004eb	5f		 pop	 edi

; 1261 :     return err;

  004ec	8b c3		 mov	 eax, ebx
  004ee	5b		 pop	 ebx
  004ef	5e		 pop	 esi

; 1262 : }

  004f0	8b e5		 mov	 esp, ebp
  004f2	5d		 pop	 ebp
  004f3	c3		 ret	 0
$LN54@zipOpenNew:

; 1256 :     }
; 1257 : #    endif
; 1258 : 
; 1259 :     if (err==Z_OK)
; 1260 :         zi->in_opened_file_inzip = 1;

  004f4	c7 46 38 01 00
	00 00		 mov	 DWORD PTR [esi+56], 1
$LN1@zipOpenNew:
  004fb	5f		 pop	 edi

; 1261 :     return err;

  004fc	8b c3		 mov	 eax, ebx
  004fe	5b		 pop	 ebx
$LN42@zipOpenNew:
  004ff	5e		 pop	 esi

; 1262 : }

  00500	8b e5		 mov	 esp, ebp
  00502	5d		 pop	 ebp
  00503	c3		 ret	 0
_zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zipOpenNewFileInZip4 PROC				; COMDAT

; 1271 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1272 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1273 :                                  extrafield_local, size_extrafield_local,
; 1274 :                                  extrafield_global, size_extrafield_global,
; 1275 :                                  comment, method, level, raw,
; 1276 :                                  windowBits, memLevel, strategy,
; 1277 :                                  password, crcForCrypting, versionMadeBy, flagBase, 0);

  00003	6a 00		 push	 0
  00005	ff 75 4c	 push	 DWORD PTR _flagBase$[ebp]
  00008	ff 75 48	 push	 DWORD PTR _versionMadeBy$[ebp]
  0000b	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000e	ff 75 40	 push	 DWORD PTR _password$[ebp]
  00011	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00014	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00017	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  0001a	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001d	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00020	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00023	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00026	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00029	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002c	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002f	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00032	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00035	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0003b	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  00040	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1278 : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_zipOpenNewFileInZip4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3_64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zip64$ = 72						; size = 4
_zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1302 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1303 :                                  extrafield_local, size_extrafield_local,
; 1304 :                                  extrafield_global, size_extrafield_global,
; 1305 :                                  comment, method, level, raw,
; 1306 :                                  windowBits, memLevel, strategy,
; 1307 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);

  00003	ff 75 48	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000d	ff 75 40	 push	 DWORD PTR _password$[ebp]
  00010	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00013	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00016	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00019	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001c	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001f	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00022	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00025	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00028	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002b	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002e	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00031	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00034	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00037	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0003a	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  0003f	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1308 : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3 PROC				; COMDAT

; 1286 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1287 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1288 :                                  extrafield_local, size_extrafield_local,
; 1289 :                                  extrafield_global, size_extrafield_global,
; 1290 :                                  comment, method, level, raw,
; 1291 :                                  windowBits, memLevel, strategy,
; 1292 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000c	ff 75 40	 push	 DWORD PTR _password$[ebp]
  0000f	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00012	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00015	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00018	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001b	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001e	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00021	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00024	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00027	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002a	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002d	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00033	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00036	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00039	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  0003e	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1293 : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2_64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zip64$ = 52						; size = 4
_zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1328 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1329 :                                  extrafield_local, size_extrafield_local,
; 1330 :                                  extrafield_global, size_extrafield_global,
; 1331 :                                  comment, method, level, raw,
; 1332 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1333 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  00003	ff 75 34	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00017	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001a	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001d	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00020	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00023	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00026	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00029	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002c	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00032	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00035	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  0003a	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1334 : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2 PROC				; COMDAT

; 1314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1315 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1316 :                                  extrafield_local, size_extrafield_local,
; 1317 :                                  extrafield_global, size_extrafield_global,
; 1318 :                                  comment, method, level, raw,
; 1319 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1320 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  00039	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1321 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zip64$ = 48						; size = 4
_zipOpenNewFileInZip64 PROC				; COMDAT

; 1340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1342 :                                  extrafield_local, size_extrafield_local,
; 1343 :                                  extrafield_global, size_extrafield_global,
; 1344 :                                  comment, method, level, 0,
; 1345 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1346 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  00003	ff 75 30	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	6a 00		 push	 0
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  00039	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1347 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip PROC				; COMDAT

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1354 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1355 :                                  extrafield_local, size_extrafield_local,
; 1356 :                                  extrafield_global, size_extrafield_global,
; 1357 :                                  comment, method, level, 0,
; 1358 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1359 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	6a 00		 push	 0
  00015	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00018	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001b	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001e	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00021	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00024	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00027	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002a	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00033	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64
  00038	83 c4 4c	 add	 esp, 76			; 0000004cH

; 1360 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_zipOpenNewFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen2_64
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2_64 PROC					; COMDAT

; 933  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 934  :     if (pzlib_filefunc_def != NULL)

  00003	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	85 c0		 test	 eax, eax
  0000b	74 3b		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 45 d4	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp], xmm0
  00016	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  0001b	66 0f d6 45 dc	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+8], xmm0
  00020	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00025	66 0f d6 45 e4	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+16], xmm0
  0002a	f3 0f 7e 40 18	 movq	 xmm0, QWORD PTR [eax+24]

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  0002f	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00032	66 0f d6 45 ec	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+24], xmm0
  00037	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+36], 0
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+40], 0
  00045	50		 push	 eax
  00046	eb 02		 jmp	 SHORT $LN5@zipOpen2_6
$LN2@zipOpen2_6:

; 941  :     }
; 942  :     else
; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00048	6a 00		 push	 0
$LN5@zipOpen2_6:
  0004a	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0004d	ff 75 0c	 push	 DWORD PTR _append$[ebp]
  00050	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  00053	e8 00 00 00 00	 call	 _zipOpen3
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 944  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_zipOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen2
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc32_def$ = 20				; size = 4
_zipOpen2 PROC						; COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 922  :     if (pzlib_filefunc32_def != NULL)

  00003	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	85 c0		 test	 eax, eax
  0000b	74 23		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000d	50		 push	 eax
  0000e	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00017	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  0001a	50		 push	 eax
  0001b	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR _append$[ebp]
  00021	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  00024	e8 00 00 00 00	 call	 _zipOpen3
  00029	83 c4 18	 add	 esp, 24			; 00000018H

; 930  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN2@zipOpen2:

; 927  :     }
; 928  :     else
; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00030	6a 00		 push	 0
  00032	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  00035	ff 75 0c	 push	 DWORD PTR _append$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  0003b	e8 00 00 00 00	 call	 _zipOpen3
  00040	83 c4 10	 add	 esp, 16			; 00000010H

; 930  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_zipOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen64
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen64 PROC						; COMDAT

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 0c	 push	 DWORD PTR _append$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  0000d	e8 00 00 00 00	 call	 _zipOpen3
  00012	83 c4 10	 add	 esp, 16			; 00000010H

; 956  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_zipOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen PROC						; COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 0c	 push	 DWORD PTR _append$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _pathname$[ebp]
  0000d	e8 00 00 00 00	 call	 _zipOpen3
  00012	83 c4 10	 add	 esp, 16			; 00000010H

; 951  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_zipOpen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files\microsoft visual studio 11.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  : }

  00003	5d		 pop	 ebp

; 133  :     return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
END
