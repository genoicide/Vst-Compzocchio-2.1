; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Mattia\Desktop\Audio plugin developement\esempi\CompzocchioGui 2.10\zlib\compress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_compress
PUBLIC	_compress2
PUBLIC	_compressBound
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
EXTRN	_deflate:PROC
EXTRN	_deflateEnd:PROC
EXTRN	_deflateInit_:PROC
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\compress.c
;	COMDAT _compressBound
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 79   :            (sourceLen >> 25) + 13;

  00003	8b 55 08	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0000b	8b ca		 mov	 ecx, edx
  0000d	03 c2		 add	 eax, edx
  0000f	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00012	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00015	03 c1		 add	 eax, ecx
  00017	83 c2 0d	 add	 edx, 13			; 0000000dH
  0001a	03 c2		 add	 eax, edx

; 80   : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_compressBound ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\compress.c
;	COMDAT _compress2
_TEXT	SEGMENT
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2 PROC						; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 29   :     z_stream stream;
; 30   :     int err;
; 31   : 
; 32   :     stream.next_in = (Bytef*)source;

  00006	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00009	89 45 c8	 mov	 DWORD PTR _stream$[ebp], eax

; 33   :     stream.avail_in = (uInt)sourceLen;

  0000c	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  0000f	57		 push	 edi

; 34   : #ifdef MAXSEG_64K
; 35   :     /* Check for source > 64K on 16-bit machine: */
; 36   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
; 37   : #endif
; 38   :     stream.next_out = dest;
; 39   :     stream.avail_out = (uInt)*destLen;

  00010	8b 7d 0c	 mov	 edi, DWORD PTR _destLen$[ebp]
  00013	89 45 cc	 mov	 DWORD PTR _stream$[ebp+4], eax
  00016	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]

; 40   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
; 41   : 
; 42   :     stream.zalloc = (alloc_func)0;
; 43   :     stream.zfree = (free_func)0;
; 44   :     stream.opaque = (voidpf)0;
; 45   : 
; 46   :     err = deflateInit(&stream, level);

  00019	6a 38		 push	 56			; 00000038H
  0001b	89 45 d4	 mov	 DWORD PTR _stream$[ebp+12], eax
  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05DFCKICEH@1?42?45?$AA@
  00025	ff 75 18	 push	 DWORD PTR _level$[ebp]
  00028	89 45 d8	 mov	 DWORD PTR _stream$[ebp+16], eax
  0002b	8d 45 c8	 lea	 eax, DWORD PTR _stream$[ebp]
  0002e	50		 push	 eax
  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+32], 0
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+36], 0
  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+40], 0
  00044	e8 00 00 00 00	 call	 _deflateInit_
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 47   :     if (err != Z_OK) return err;

  0004c	85 c0		 test	 eax, eax
  0004e	75 46		 jne	 SHORT $LN4@compress2

; 48   : 
; 49   :     err = deflate(&stream, Z_FINISH);

  00050	56		 push	 esi
  00051	8d 45 c8	 lea	 eax, DWORD PTR _stream$[ebp]
  00054	6a 04		 push	 4
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _deflate
  0005c	8b f0		 mov	 esi, eax
  0005e	83 c4 08	 add	 esp, 8

; 50   :     if (err != Z_STREAM_END) {

  00061	83 fe 01	 cmp	 esi, 1
  00064	74 1e		 je	 SHORT $LN1@compress2

; 51   :         deflateEnd(&stream);

  00066	8d 45 c8	 lea	 eax, DWORD PTR _stream$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _deflateEnd
  0006f	83 c4 04	 add	 esp, 4

; 52   :         return err == Z_OK ? Z_BUF_ERROR : err;

  00072	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00077	85 f6		 test	 esi, esi
  00079	0f 44 f0	 cmove	 esi, eax
  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5f		 pop	 edi

; 57   :     return err;
; 58   : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN1@compress2:

; 53   :     }
; 54   :     *destLen = stream.total_out;

  00084	8b 45 dc	 mov	 eax, DWORD PTR _stream$[ebp+20]
  00087	89 07		 mov	 DWORD PTR [edi], eax

; 55   : 
; 56   :     err = deflateEnd(&stream);

  00089	8d 45 c8	 lea	 eax, DWORD PTR _stream$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _deflateEnd
  00092	83 c4 04	 add	 esp, 4
  00095	5e		 pop	 esi
$LN4@compress2:
  00096	5f		 pop	 edi

; 57   :     return err;
; 58   : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_compress2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\compress.c
;	COMDAT _compress
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress PROC						; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00003	6a ff		 push	 -1
  00005	ff 75 14	 push	 DWORD PTR _sourceLen$[ebp]
  00008	ff 75 10	 push	 DWORD PTR _source$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _destLen$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _dest$[ebp]
  00011	e8 00 00 00 00	 call	 _compress2
  00016	83 c4 14	 add	 esp, 20			; 00000014H

; 69   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_compress ENDP
_TEXT	ENDS
END
