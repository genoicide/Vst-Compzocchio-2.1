; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Mattia\Desktop\Audio plugin developement\esempi\CompzocchioGui 2.10\zlib\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_fill_win32_filefunc
PUBLIC	_fill_win32_filefunc64
PUBLIC	_fill_win32_filefunc64A
PUBLIC	_fill_win32_filefunc64W
PUBLIC	_win32_open_file_func
PUBLIC	_win32_read_file_func
PUBLIC	_win32_write_file_func
PUBLIC	_win32_tell64_file_func
PUBLIC	_win32_seek64_file_func
PUBLIC	_win32_close_file_func
PUBLIC	_win32_error_file_func
PUBLIC	_win32_open64_file_func
PUBLIC	_win32_open64_file_funcA
PUBLIC	_win32_open64_file_funcW
PUBLIC	_win32_tell_file_func
PUBLIC	_win32_seek_file_func
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 239  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 240  :     HANDLE hFile = NULL;
; 241  : 
; 242  :     long ret=-1;
; 243  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c9 ff	 or	 ecx, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek

; 244  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek:

; 245  :     switch (origin)

  00012	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  00015	83 e8 00	 sub	 eax, 0
  00018	74 1a		 je	 SHORT $LN5@win32_seek
  0001a	48		 dec	 eax
  0001b	74 10		 je	 SHORT $LN7@win32_seek
  0001d	48		 dec	 eax
  0001e	74 06		 je	 SHORT $LN6@win32_seek

; 255  :         break;
; 256  :     default: return -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 272  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN6@win32_seek:

; 250  :     case ZLIB_FILEFUNC_SEEK_END :
; 251  :         dwMoveMethod = FILE_END;

  00026	b8 02 00 00 00	 mov	 eax, 2

; 252  :         break;

  0002b	eb 09		 jmp	 SHORT $LN8@win32_seek
$LN7@win32_seek:

; 246  :     {
; 247  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 248  :         dwMoveMethod = FILE_CURRENT;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 249  :         break;

  00032	eb 02		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 253  :     case ZLIB_FILEFUNC_SEEK_SET :
; 254  :         dwMoveMethod = FILE_BEGIN;

  00034	33 c0		 xor	 eax, eax
$LN8@win32_seek:

; 257  :     }
; 258  : 
; 259  :     if (hFile != NULL)

  00036	85 d2		 test	 edx, edx
  00038	74 25		 je	 SHORT $LN1@win32_seek

; 260  :     {
; 261  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  0003a	50		 push	 eax
  0003b	6a 00		 push	 0
  0003d	ff 75 10	 push	 DWORD PTR _offset$[ebp]
  00040	52		 push	 edx
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 262  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00047	83 f8 ff	 cmp	 eax, -1
  0004a	75 11		 jne	 SHORT $LN2@win32_seek

; 263  :         {
; 264  :             DWORD dwErr = GetLastError();

  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 265  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00052	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 266  :             ret = -1;

  00055	83 c9 ff	 or	 ecx, -1

; 270  :     }
; 271  :     return ret;

  00058	8b c1		 mov	 eax, ecx
  0005a	5e		 pop	 esi

; 272  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN2@win32_seek:

; 267  :         }
; 268  :         else
; 269  :             ret=0;

  0005d	33 c9		 xor	 ecx, ecx
$LN1@win32_seek:

; 270  :     }
; 271  :     return ret;

  0005f	8b c1		 mov	 eax, ecx
  00061	5e		 pop	 esi

; 272  : }

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 193  :     long ret=-1;
; 194  :     HANDLE hFile = NULL;
; 195  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 21		 je	 SHORT $LN8@win32_tell

; 196  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]

; 197  :     if (hFile != NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 1b		 je	 SHORT $LN8@win32_tell

; 198  :     {
; 199  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  00011	6a 01		 push	 1
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 200  :         if (dwSet == INVALID_SET_FILE_POINTER)

  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 0c		 jne	 SHORT $LN1@win32_tell

; 201  :         {
; 202  :             DWORD dwErr = GetLastError();

  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 203  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00029	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN8@win32_tell:

; 204  :             ret = -1;
; 205  :         }
; 206  :         else
; 207  :             ret=(long)dwSet;
; 208  :     }
; 209  :     return ret;

  0002c	83 c8 ff	 or	 eax, -1
$LN1@win32_tell:
  0002f	5e		 pop	 esi

; 210  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 120  :     const char* mode_fopen = NULL;
; 121  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 122  :     HANDLE hFile = NULL;
; 123  : 
; 124  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8d 45 f0	 lea	 eax, DWORD PTR _dwShareMode$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00012	50		 push	 eax
  00013	8d 45 fc	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00016	50		 push	 eax
  00017	ff 75 10	 push	 DWORD PTR _mode$[ebp]
  0001a	33 f6		 xor	 esi, esi
  0001c	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 125  : 
; 126  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	85 c9		 test	 ecx, ecx
  00029	74 1c		 je	 SHORT $LN1@win32_open
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	74 15		 je	 SHORT $LN1@win32_open

; 127  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00032	56		 push	 esi
  00033	ff 75 f8	 push	 DWORD PTR _dwFlagsAndAttributes$[ebp]
  00036	ff 75 f4	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00039	56		 push	 esi
  0003a	ff 75 f0	 push	 DWORD PTR _dwShareMode$[ebp]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  00045	8b f0		 mov	 esi, eax
$LN1@win32_open:

; 128  : 
; 129  :     return win32_build_iowin(hFile);

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi

; 130  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 105  :     const char* mode_fopen = NULL;
; 106  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 107  :     HANDLE hFile = NULL;
; 108  : 
; 109  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8d 45 f0	 lea	 eax, DWORD PTR _dwShareMode$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00012	50		 push	 eax
  00013	8d 45 fc	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00016	50		 push	 eax
  00017	ff 75 10	 push	 DWORD PTR _mode$[ebp]
  0001a	33 f6		 xor	 esi, esi
  0001c	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 110  : 
; 111  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	85 c9		 test	 ecx, ecx
  00029	74 1c		 je	 SHORT $LN1@win32_open
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	74 15		 je	 SHORT $LN1@win32_open

; 112  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00032	56		 push	 esi
  00033	ff 75 f8	 push	 DWORD PTR _dwFlagsAndAttributes$[ebp]
  00036	ff 75 f4	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00039	56		 push	 esi
  0003a	ff 75 f0	 push	 DWORD PTR _dwShareMode$[ebp]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00045	8b f0		 mov	 esi, eax
$LN1@win32_open:

; 113  : 
; 114  :     return win32_build_iowin(hFile);

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi

; 115  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 90   :     const char* mode_fopen = NULL;
; 91   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 92   :     HANDLE hFile = NULL;
; 93   : 
; 94   :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8d 45 f0	 lea	 eax, DWORD PTR _dwShareMode$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00012	50		 push	 eax
  00013	8d 45 fc	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00016	50		 push	 eax
  00017	ff 75 10	 push	 DWORD PTR _mode$[ebp]
  0001a	33 f6		 xor	 esi, esi
  0001c	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	85 c9		 test	 ecx, ecx
  00029	74 1c		 je	 SHORT $LN1@win32_open
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	74 15		 je	 SHORT $LN1@win32_open

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00032	56		 push	 esi
  00033	ff 75 f8	 push	 DWORD PTR _dwFlagsAndAttributes$[ebp]
  00036	ff 75 f4	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00039	56		 push	 esi
  0003a	ff 75 f0	 push	 DWORD PTR _dwShareMode$[ebp]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00045	8b f0		 mov	 esi, eax
$LN1@win32_open:

; 98   : 
; 99   :     return win32_build_iowin(hFile);

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi

; 100  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_win32_open64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_hFile$ = 8						; size = 4
_win32_build_iowin PROC					; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 71   :     voidpf ret=NULL;
; 72   : 
; 73   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  00004	8b 75 08	 mov	 esi, DWORD PTR _hFile$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 30		 je	 SHORT $LN7@win32_buil
  0000b	83 fe ff	 cmp	 esi, -1
  0000e	74 2b		 je	 SHORT $LN7@win32_buil

; 74   :     {
; 75   :         WIN32FILE_IOWIN w32fiow;
; 76   :         w32fiow.hf = hFile;
; 77   :         w32fiow.error = 0;
; 78   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00010	57		 push	 edi
  00011	6a 08		 push	 8
  00013	e8 00 00 00 00	 call	 _malloc
  00018	8b f8		 mov	 edi, eax
  0001a	83 c4 04	 add	 esp, 4

; 79   : 
; 80   :         if (ret==NULL)

  0001d	85 ff		 test	 edi, edi
  0001f	75 0d		 jne	 SHORT $LN2@win32_buil

; 81   :             CloseHandle(hFile);

  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 84   :     }
; 85   :     return ret;

  00028	8b c7		 mov	 eax, edi
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 86   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN2@win32_buil:

; 82   :         else
; 83   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0002e	89 37		 mov	 DWORD PTR [edi], esi
  00030	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 86   : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN7@win32_buil:

; 84   :     }
; 85   :     return ret;

  0003b	33 c0		 xor	 eax, eax
  0003d	5e		 pop	 esi

; 86   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_win32_build_iowin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_lpdwDesiredAccess$ = 12				; size = 4
_lpdwCreationDisposition$ = 16				; size = 4
_lpdwShareMode$ = 20					; size = 4
_lpdwFlagsAndAttributes$ = 24				; size = 4
_win32_translate_open_mode PROC				; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  00006	8b 45 18	 mov	 eax, DWORD PTR _lpdwFlagsAndAttributes$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR _lpdwDesiredAccess$[ebp]
  0000c	53		 push	 ebx

; 50   : 
; 51   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _mode$[ebp]
  00010	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR _lpdwShareMode$[ebp]
  00020	8b c3		 mov	 eax, ebx
  00022	24 03		 and	 al, 3
  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00030	3c 01		 cmp	 al, 1
  00032	75 16		 jne	 SHORT $LN5@win32_tran

; 52   :     {
; 53   :         *lpdwDesiredAccess = GENERIC_READ;

  00034	c7 02 00 00 00
	80		 mov	 DWORD PTR [edx], -2147483648 ; 80000000H

; 54   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0003a	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3

; 55   :         *lpdwShareMode = FILE_SHARE_READ;

  00040	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 66   :     }
; 67   : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN5@win32_tran:

; 56   :     }
; 57   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0004a	f6 c3 04	 test	 bl, 4
  0004d	74 10		 je	 SHORT $LN3@win32_tran

; 58   :     {
; 59   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0004f	5e		 pop	 esi
  00050	c7 02 00 00 00
	c0		 mov	 DWORD PTR [edx], -1073741824 ; c0000000H

; 60   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00056	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
  0005c	5b		 pop	 ebx

; 66   :     }
; 67   : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN3@win32_tran:

; 61   :     }
; 62   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  0005f	f6 c3 08	 test	 bl, 8
  00062	74 0c		 je	 SHORT $LN1@win32_tran

; 63   :     {
; 64   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00064	c7 02 00 00 00
	c0		 mov	 DWORD PTR [edx], -1073741824 ; c0000000H

; 65   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  0006a	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN1@win32_tran:
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 66   :     }
; 67   : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_win32_translate_open_mode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  :     int ret=-1;
; 334  :     if (stream!=NULL)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN4@win32_erro

; 335  :     {
; 336  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;
; 337  :     }
; 338  :     return ret;

  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 339  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN4@win32_erro:

; 335  :     {
; 336  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;
; 337  :     }
; 338  :     return ret;

  0000f	83 c8 ff	 or	 eax, -1

; 339  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 315  :     int ret=-1;
; 316  : 
; 317  :     if (stream!=NULL)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _stream$[ebp]
  00008	83 ce ff	 or	 esi, -1
  0000b	85 ff		 test	 edi, edi
  0000d	74 18		 je	 SHORT $LN5@win32_clos

; 318  :     {
; 319  :         HANDLE hFile;
; 320  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0000f	8b 07		 mov	 eax, DWORD PTR [edi]

; 321  :         if (hFile != NULL)

  00011	85 c0		 test	 eax, eax
  00013	74 09		 je	 SHORT $LN1@win32_clos

; 322  :         {
; 323  :             CloseHandle(hFile);

  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 324  :             ret=0;

  0001c	33 f6		 xor	 esi, esi
$LN1@win32_clos:

; 325  :         }
; 326  :         free(stream);

  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 04	 add	 esp, 4
$LN5@win32_clos:

; 327  :     }
; 328  :     return ret;

  00027	5f		 pop	 edi
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi

; 329  : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_win32_close_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 276  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 277  :     HANDLE hFile = NULL;
; 278  :     long ret=-1;
; 279  : 
; 280  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c9 ff	 or	 ecx, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek

; 281  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek:

; 282  : 
; 283  :     switch (origin)

  00012	8b 45 18	 mov	 eax, DWORD PTR _origin$[ebp]
  00015	83 e8 00	 sub	 eax, 0
  00018	74 1a		 je	 SHORT $LN5@win32_seek
  0001a	48		 dec	 eax
  0001b	74 10		 je	 SHORT $LN7@win32_seek
  0001d	48		 dec	 eax
  0001e	74 06		 je	 SHORT $LN6@win32_seek

; 293  :             break;
; 294  :         default: return -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 311  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN6@win32_seek:

; 288  :         case ZLIB_FILEFUNC_SEEK_END :
; 289  :             dwMoveMethod = FILE_END;

  00026	b8 02 00 00 00	 mov	 eax, 2

; 290  :             break;

  0002b	eb 09		 jmp	 SHORT $LN8@win32_seek
$LN7@win32_seek:

; 284  :     {
; 285  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 286  :             dwMoveMethod = FILE_CURRENT;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 287  :             break;

  00032	eb 02		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 291  :         case ZLIB_FILEFUNC_SEEK_SET :
; 292  :             dwMoveMethod = FILE_BEGIN;

  00034	33 c0		 xor	 eax, eax
$LN8@win32_seek:

; 295  :     }
; 296  : 
; 297  :     if (hFile)

  00036	85 d2		 test	 edx, edx
  00038	74 27		 je	 SHORT $LN1@win32_seek

; 298  :     {
; 299  :         LARGE_INTEGER* li = (LARGE_INTEGER*)&offset;
; 300  :         DWORD dwSet = SetFilePointer(hFile, li->u.LowPart, &li->u.HighPart, dwMoveMethod);

  0003a	50		 push	 eax
  0003b	8d 45 14	 lea	 eax, DWORD PTR _offset$[ebp+4]
  0003e	50		 push	 eax
  0003f	ff 75 10	 push	 DWORD PTR _offset$[ebp]
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 301  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00049	83 f8 ff	 cmp	 eax, -1
  0004c	75 11		 jne	 SHORT $LN2@win32_seek

; 302  :         {
; 303  :             DWORD dwErr = GetLastError();

  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 304  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00054	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 305  :             ret = -1;

  00057	83 c9 ff	 or	 ecx, -1

; 309  :     }
; 310  :     return ret;

  0005a	8b c1		 mov	 eax, ecx
  0005c	5e		 pop	 esi

; 311  : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN2@win32_seek:

; 306  :         }
; 307  :         else
; 308  :             ret=0;

  0005f	33 c9		 xor	 ecx, ecx
$LN1@win32_seek:

; 309  :     }
; 310  :     return ret;

  00061	8b c1		 mov	 eax, ecx
  00063	5e		 pop	 esi

; 311  : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_li$1 = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 214  :     ZPOS64_T ret= (ZPOS64_T)-1;
; 215  :     HANDLE hFile = NULL;
; 216  :     if (stream!=NULL)

  00007	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 38		 je	 SHORT $LN8@win32_tell

; 217  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]

; 218  : 
; 219  :     if (hFile)

  00010	85 c0		 test	 eax, eax
  00012	74 32		 je	 SHORT $LN8@win32_tell

; 220  :     {
; 221  :         LARGE_INTEGER li;
; 222  :         li.QuadPart = 0;
; 223  :         li.u.LowPart = SetFilePointer(hFile, li.u.LowPart, &li.u.HighPart, FILE_CURRENT);

  00014	6a 01		 push	 1
  00016	8d 4d fc	 lea	 ecx, DWORD PTR _li$1[ebp+4]
  00019	51		 push	 ecx
  0001a	6a 00		 push	 0
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	50		 push	 eax
  00020	66 0f 13 45 f8	 movlpd	 QWORD PTR _li$1[ebp], xmm0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  0002b	89 45 f8	 mov	 DWORD PTR _li$1[ebp], eax

; 224  :         if ( (li.LowPart == 0xFFFFFFFF) && (GetLastError() != NO_ERROR))

  0002e	83 f8 ff	 cmp	 eax, -1
  00031	75 21		 jne	 SHORT $LN2@win32_tell
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00039	85 c0		 test	 eax, eax
  0003b	74 14		 je	 SHORT $LN9@win32_tell

; 225  :         {
; 226  :             DWORD dwErr = GetLastError();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 227  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN8@win32_tell:

; 231  :             ret=li.QuadPart;
; 232  :     }
; 233  :     return ret;

  00046	83 c8 ff	 or	 eax, -1
  00049	83 ca ff	 or	 edx, -1
  0004c	5e		 pop	 esi

; 234  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN9@win32_tell:

; 228  :             ret = (ZPOS64_T)-1;
; 229  :         }
; 230  :         else

  00051	8b 45 f8	 mov	 eax, DWORD PTR _li$1[ebp]
$LN2@win32_tell:

; 231  :             ret=li.QuadPart;
; 232  :     }
; 233  :     return ret;

  00054	8b 55 fc	 mov	 edx, DWORD PTR _li$1[ebp+4]
  00057	5e		 pop	 esi

; 234  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 172  :     uLong ret=0;
; 173  :     HANDLE hFile = NULL;
; 174  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
  0000f	85 f6		 test	 esi, esi
  00011	74 36		 je	 SHORT $LN9@win32_writ

; 175  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 06		 mov	 eax, DWORD PTR [esi]

; 176  : 
; 177  :     if (hFile != NULL)

  00015	85 c0		 test	 eax, eax
  00017	74 30		 je	 SHORT $LN9@win32_writ

; 178  :     {
; 179  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00019	6a 00		 push	 0
  0001b	8d 4d fc	 lea	 ecx, DWORD PTR _ret$[ebp]
  0001e	51		 push	 ecx
  0001f	ff 75 14	 push	 DWORD PTR _size$[ebp]
  00022	ff 75 10	 push	 DWORD PTR _buf$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0002c	85 c0		 test	 eax, eax
  0002e	75 11		 jne	 SHORT $LN7@win32_writ

; 180  :         {
; 181  :             DWORD dwErr = GetLastError();

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 182  :             if (dwErr == ERROR_HANDLE_EOF)

  00036	33 c9		 xor	 ecx, ecx
  00038	83 f8 26	 cmp	 eax, 38			; 00000026H
  0003b	0f 44 c1	 cmove	 eax, ecx

; 183  :                 dwErr = 0;
; 184  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_writ:

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     return ret;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00044	5e		 pop	 esi

; 189  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN9@win32_writ:

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     return ret;

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi

; 189  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 150  :     uLong ret=0;
; 151  :     HANDLE hFile = NULL;
; 152  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
  0000f	85 f6		 test	 esi, esi
  00011	74 36		 je	 SHORT $LN9@win32_read

; 153  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 06		 mov	 eax, DWORD PTR [esi]

; 154  : 
; 155  :     if (hFile != NULL)

  00015	85 c0		 test	 eax, eax
  00017	74 30		 je	 SHORT $LN9@win32_read

; 156  :     {
; 157  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00019	6a 00		 push	 0
  0001b	8d 4d fc	 lea	 ecx, DWORD PTR _ret$[ebp]
  0001e	51		 push	 ecx
  0001f	ff 75 14	 push	 DWORD PTR _size$[ebp]
  00022	ff 75 10	 push	 DWORD PTR _buf$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0002c	85 c0		 test	 eax, eax
  0002e	75 11		 jne	 SHORT $LN7@win32_read

; 158  :         {
; 159  :             DWORD dwErr = GetLastError();

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 160  :             if (dwErr == ERROR_HANDLE_EOF)

  00036	33 c9		 xor	 ecx, ecx
  00038	83 f8 26	 cmp	 eax, 38			; 00000026H
  0003b	0f 44 c1	 cmove	 eax, ecx

; 161  :                 dwErr = 0;
; 162  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_read:

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     return ret;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00044	5e		 pop	 esi

; 167  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN9@win32_read:

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     return ret;

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi

; 167  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_win32_read_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 135  :     const char* mode_fopen = NULL;
; 136  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 137  :     HANDLE hFile = NULL;
; 138  : 
; 139  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8d 45 f0	 lea	 eax, DWORD PTR _dwShareMode$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00012	50		 push	 eax
  00013	8d 45 fc	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00016	50		 push	 eax
  00017	ff 75 10	 push	 DWORD PTR _mode$[ebp]
  0001a	33 f6		 xor	 esi, esi
  0001c	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 140  : 
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	85 c9		 test	 ecx, ecx
  00029	74 1c		 je	 SHORT $LN1@win32_open
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	74 15		 je	 SHORT $LN1@win32_open

; 142  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00032	56		 push	 esi
  00033	ff 75 f8	 push	 DWORD PTR _dwFlagsAndAttributes$[ebp]
  00036	ff 75 f4	 push	 DWORD PTR _dwCreationDisposition$[ebp]
  00039	56		 push	 esi
  0003a	ff 75 f0	 push	 DWORD PTR _dwShareMode$[ebp]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00045	8b f0		 mov	 esi, eax
$LN1@win32_open:

; 143  : 
; 144  :     return win32_build_iowin(hFile);

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi

; 145  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 382  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 383  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 384  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 385  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 386  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 387  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 388  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 389  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 369  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 370  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 371  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 372  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 373  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 374  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 375  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 376  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 355  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 356  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 357  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 358  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 359  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 360  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 361  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 362  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 363  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\iowin32.c
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 343  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 344  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 345  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 346  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 347  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek_file_func

; 348  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 349  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 350  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 351  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc ENDP
_TEXT	ENDS
END
