; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Mattia\Desktop\Audio plugin developement\esempi\CompzocchioGui 2.10\zlib\adler32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_adler32
PUBLIC	_adler32_combine
PUBLIC	_adler32_combine64
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\adler32.c
;	COMDAT _adler32_combine_
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine_ PROC					; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     unsigned long sum1;
; 137  :     unsigned long sum2;
; 138  :     unsigned rem;
; 139  : 
; 140  :     /* the derivation of this formula is left as an exercise for the reader */
; 141  :     rem = (unsigned)(len2 % BASE);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _len2$[ebp]
  00006	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0000b	f7 e1		 mul	 ecx
  0000d	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00010	69 d2 f1 ff 00
	00		 imul	 edx, 65521		; 0000fff1H
  00016	53		 push	 ebx

; 142  :     sum1 = adler1 & 0xffff;

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _adler1$[ebp]
  0001a	2b ca		 sub	 ecx, edx
  0001c	56		 push	 esi

; 143  :     sum2 = rem * sum1;
; 144  :     MOD(sum2);
; 145  :     sum1 += (adler2 & 0xffff) + BASE - 1;

  0001d	8b 75 0c	 mov	 esi, DWORD PTR _adler2$[ebp]
  00020	0f b7 d3	 movzx	 edx, bx
  00023	57		 push	 edi
  00024	8b fa		 mov	 edi, edx
  00026	0f af f9	 imul	 edi, ecx
  00029	89 4d 10	 mov	 DWORD PTR _len2$[ebp], ecx
  0002c	0f b7 ce	 movzx	 ecx, si
  0002f	81 c2 f0 ff 00
	00		 add	 edx, 65520		; 0000fff0H
  00035	03 ca		 add	 ecx, edx
  00037	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0003c	f7 e7		 mul	 edi
  0003e	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 146  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  00041	69 d2 f1 ff 00
	00		 imul	 edx, 65521		; 0000fff1H
  00047	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0004a	2b da		 sub	 ebx, edx
  0004c	c1 ee 10	 shr	 esi, 16			; 00000010H
  0004f	81 c7 f1 ff 00
	00		 add	 edi, 65521		; 0000fff1H
  00055	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00058	2b 45 10	 sub	 eax, DWORD PTR _len2$[ebp]
  0005b	03 c7		 add	 eax, edi
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 147  :     if (sum1 >= BASE) sum1 -= BASE;

  00060	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00066	72 14		 jb	 SHORT $LN3@adler32_co
  00068	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H

; 148  :     if (sum1 >= BASE) sum1 -= BASE;

  0006e	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00074	72 06		 jb	 SHORT $LN3@adler32_co
  00076	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN3@adler32_co:

; 149  :     if (sum2 >= (BASE << 1)) sum2 -= (BASE << 1);

  0007c	3d e2 ff 01 00	 cmp	 eax, 131042		; 0001ffe2H
  00081	72 05		 jb	 SHORT $LN2@adler32_co
  00083	2d e2 ff 01 00	 sub	 eax, 131042		; 0001ffe2H
$LN2@adler32_co:

; 150  :     if (sum2 >= BASE) sum2 -= BASE;

  00088	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H
  0008d	72 05		 jb	 SHORT $LN1@adler32_co
  0008f	2d f1 ff 00 00	 sub	 eax, 65521		; 0000fff1H
$LN1@adler32_co:

; 151  :     return sum1 | (sum2 << 16);

  00094	c1 e0 10	 shl	 eax, 16			; 00000010H
  00097	0b c1		 or	 eax, ecx

; 152  : }

  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_adler32_combine_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\adler32.c
;	COMDAT _adler32_combine64
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine64 PROC					; COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  : }

  00003	5d		 pop	 ebp

; 168  :     return adler32_combine_(adler1, adler2, len2);

  00004	e9 00 00 00 00	 jmp	 _adler32_combine_
_adler32_combine64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\adler32.c
;	COMDAT _adler32_combine
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine PROC					; COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  : }

  00003	5d		 pop	 ebp

; 160  :     return adler32_combine_(adler1, adler2, len2);

  00004	e9 00 00 00 00	 jmp	 _adler32_combine_
_adler32_combine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\adler32.c
;	COMDAT _adler32
_TEXT	SEGMENT
tv1577 = 8						; size = 4
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32 PROC						; COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 65   :     unsigned long sum2;
; 66   :     unsigned n;
; 67   : 
; 68   :     /* split Adler-32 into component sums */
; 69   :     sum2 = (adler >> 16) & 0xffff;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _adler$[ebp]
  00006	53		 push	 ebx

; 70   :     adler &= 0xffff;
; 71   : 
; 72   :     /* in case user likes doing a byte at a time, keep it fast */
; 73   :     if (len == 1) {

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	c1 ee 10	 shr	 esi, 16			; 00000010H
  00010	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00016	83 fb 01	 cmp	 ebx, 1
  00019	75 31		 jne	 SHORT $LN18@adler32

; 74   :         adler += buf[0];

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0001e	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00021	03 c8		 add	 ecx, eax

; 75   :         if (adler >= BASE)

  00023	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00029	72 06		 jb	 SHORT $LN17@adler32

; 76   :             adler -= BASE;

  0002b	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN17@adler32:

; 77   :         sum2 += adler;

  00031	03 f1		 add	 esi, ecx

; 78   :         if (sum2 >= BASE)

  00033	81 fe f1 ff 00
	00		 cmp	 esi, 65521		; 0000fff1H
  00039	72 06		 jb	 SHORT $LN16@adler32

; 79   :             sum2 -= BASE;

  0003b	81 ee f1 ff 00
	00		 sub	 esi, 65521		; 0000fff1H
$LN16@adler32:

; 80   :         return adler | (sum2 << 16);

  00041	c1 e6 10	 shl	 esi, 16			; 00000010H
  00044	0b f1		 or	 esi, ecx
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 128  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN18@adler32:
  0004c	57		 push	 edi

; 81   :     }
; 82   : 
; 83   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 84   :     if (buf == Z_NULL)

  0004d	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00050	85 ff		 test	 edi, edi
  00052	75 08		 jne	 SHORT $LN15@adler32

; 85   :         return 1L;

  00054	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 128  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN15@adler32:

; 86   : 
; 87   :     /* in case short lengths are provided, keep it somewhat fast */
; 88   :     if (len < 16) {

  0005c	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0005f	73 3c		 jae	 SHORT $LN22@adler32

; 89   :         while (len--) {

  00061	85 db		 test	 ebx, ebx
  00063	74 0d		 je	 SHORT $LN26@adler32
$LL13@adler32:

; 90   :             adler += *buf++;

  00065	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00068	03 c8		 add	 ecx, eax

; 91   :             sum2 += adler;

  0006a	03 f1		 add	 esi, ecx
  0006c	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  0006f	4b		 dec	 ebx
  00070	75 f3		 jne	 SHORT $LL13@adler32
$LN26@adler32:

; 92   :         }
; 93   :         if (adler >= BASE)

  00072	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00078	72 06		 jb	 SHORT $LN11@adler32

; 94   :             adler -= BASE;

  0007a	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN11@adler32:

; 95   :         MOD4(sum2);             /* only added so many BASE's */

  00080	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00085	f7 e6		 mul	 esi
  00087	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 96   :         return adler | (sum2 << 16);

  0008a	8b c2		 mov	 eax, edx
  0008c	c1 e0 04	 shl	 eax, 4
  0008f	2b c2		 sub	 eax, edx
  00091	03 c6		 add	 eax, esi
  00093	5f		 pop	 edi
  00094	c1 e0 10	 shl	 eax, 16			; 00000010H
  00097	5e		 pop	 esi
  00098	0b c1		 or	 eax, ecx
  0009a	5b		 pop	 ebx

; 128  : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN22@adler32:

; 97   :     }
; 98   : 
; 99   :     /* do length NMAX blocks -- requires just one modulo operation */
; 100  :     while (len >= NMAX) {

  0009d	81 fb b0 15 00
	00		 cmp	 ebx, 5552		; 000015b0H
  000a3	0f 82 dd 00 00
	00		 jb	 $LN9@adler32
  000a9	b8 af a9 6e 5e	 mov	 eax, 1584310703		; 5e6ea9afH
  000ae	f7 e3		 mul	 ebx
  000b0	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  000b3	89 55 08	 mov	 DWORD PTR tv1577[ebp], edx
  000b6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL10@adler32:

; 101  :         len -= NMAX;

  000c0	81 eb b0 15 00
	00		 sub	 ebx, 5552		; 000015b0H

; 102  :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000c6	ba 5b 01 00 00	 mov	 edx, 347		; 0000015bH
  000cb	eb 03 8d 49 00	 npad	 5
$LL8@adler32:

; 103  :         do {
; 104  :             DO16(buf);          /* 16 sums unrolled */

  000d0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000d3	03 c8		 add	 ecx, eax
  000d5	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  000d9	03 f1		 add	 esi, ecx
  000db	03 c8		 add	 ecx, eax
  000dd	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  000e1	03 f1		 add	 esi, ecx
  000e3	03 c8		 add	 ecx, eax
  000e5	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  000e9	03 f1		 add	 esi, ecx
  000eb	03 c8		 add	 ecx, eax
  000ed	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  000f1	03 f1		 add	 esi, ecx
  000f3	03 c8		 add	 ecx, eax
  000f5	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  000f9	03 f1		 add	 esi, ecx
  000fb	03 c8		 add	 ecx, eax
  000fd	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00101	03 f1		 add	 esi, ecx
  00103	03 c8		 add	 ecx, eax
  00105	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  00109	03 f1		 add	 esi, ecx
  0010b	03 c8		 add	 ecx, eax
  0010d	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00111	03 f1		 add	 esi, ecx
  00113	03 c8		 add	 ecx, eax
  00115	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00119	03 f1		 add	 esi, ecx
  0011b	03 c8		 add	 ecx, eax
  0011d	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00121	03 f1		 add	 esi, ecx
  00123	03 c8		 add	 ecx, eax
  00125	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00129	03 f1		 add	 esi, ecx
  0012b	03 c8		 add	 ecx, eax
  0012d	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00131	03 f1		 add	 esi, ecx
  00133	03 c8		 add	 ecx, eax
  00135	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  00139	03 f1		 add	 esi, ecx
  0013b	03 c8		 add	 ecx, eax
  0013d	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00141	03 f1		 add	 esi, ecx
  00143	03 c8		 add	 ecx, eax
  00145	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  00149	03 f1		 add	 esi, ecx
  0014b	03 c8		 add	 ecx, eax
  0014d	03 f1		 add	 esi, ecx

; 105  :             buf += 16;

  0014f	83 c7 10	 add	 edi, 16			; 00000010H

; 106  :         } while (--n);

  00152	4a		 dec	 edx
  00153	0f 85 77 ff ff
	ff		 jne	 $LL8@adler32

; 107  :         MOD(adler);

  00159	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0015e	f7 e1		 mul	 ecx
  00160	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00163	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  00169	03 ca		 add	 ecx, edx

; 108  :         MOD(sum2);

  0016b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00170	f7 e6		 mul	 esi
  00172	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00175	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0017b	03 f2		 add	 esi, edx
  0017d	ff 4d 08	 dec	 DWORD PTR tv1577[ebp]
  00180	0f 85 3a ff ff
	ff		 jne	 $LL10@adler32
$LN9@adler32:

; 109  :     }
; 110  : 
; 111  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 112  :     if (len) {                  /* avoid modulos if none remaining */

  00186	85 db		 test	 ebx, ebx
  00188	0f 84 d3 00 00
	00		 je	 $LN5@adler32

; 113  :         while (len >= 16) {

  0018e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00191	0f 82 95 00 00
	00		 jb	 $LN25@adler32
  00197	8b d3		 mov	 edx, ebx
  00199	c1 ea 04	 shr	 edx, 4
  0019c	8d 64 24 00	 npad	 4
$LL4@adler32:

; 114  :             len -= 16;
; 115  :             DO16(buf);

  001a0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001a3	03 c8		 add	 ecx, eax
  001a5	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  001a9	03 f1		 add	 esi, ecx
  001ab	03 c8		 add	 ecx, eax
  001ad	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  001b1	03 f1		 add	 esi, ecx
  001b3	03 c8		 add	 ecx, eax
  001b5	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  001b9	03 f1		 add	 esi, ecx
  001bb	03 c8		 add	 ecx, eax
  001bd	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  001c1	03 f1		 add	 esi, ecx
  001c3	03 c8		 add	 ecx, eax
  001c5	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  001c9	03 f1		 add	 esi, ecx
  001cb	03 c8		 add	 ecx, eax
  001cd	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  001d1	03 f1		 add	 esi, ecx
  001d3	03 c8		 add	 ecx, eax
  001d5	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  001d9	03 f1		 add	 esi, ecx
  001db	03 c8		 add	 ecx, eax
  001dd	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  001e1	03 f1		 add	 esi, ecx
  001e3	03 c8		 add	 ecx, eax
  001e5	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  001e9	03 f1		 add	 esi, ecx
  001eb	03 c8		 add	 ecx, eax
  001ed	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  001f1	03 f1		 add	 esi, ecx
  001f3	03 c8		 add	 ecx, eax
  001f5	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  001f9	03 f1		 add	 esi, ecx
  001fb	03 c8		 add	 ecx, eax
  001fd	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00201	03 f1		 add	 esi, ecx
  00203	03 c8		 add	 ecx, eax
  00205	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  00209	03 f1		 add	 esi, ecx
  0020b	03 c8		 add	 ecx, eax
  0020d	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00211	03 f1		 add	 esi, ecx
  00213	03 c8		 add	 ecx, eax
  00215	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  00219	03 f1		 add	 esi, ecx
  0021b	03 c8		 add	 ecx, eax
  0021d	83 eb 10	 sub	 ebx, 16			; 00000010H
  00220	03 f1		 add	 esi, ecx

; 116  :             buf += 16;

  00222	83 c7 10	 add	 edi, 16			; 00000010H
  00225	4a		 dec	 edx
  00226	0f 85 74 ff ff
	ff		 jne	 $LL4@adler32
$LN25@adler32:

; 117  :         }
; 118  :         while (len--) {

  0022c	85 db		 test	 ebx, ebx
  0022e	74 0d		 je	 SHORT $LN30@adler32
$LL2@adler32:

; 119  :             adler += *buf++;

  00230	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00233	03 c8		 add	 ecx, eax

; 120  :             sum2 += adler;

  00235	03 f1		 add	 esi, ecx
  00237	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  0023a	4b		 dec	 ebx
  0023b	75 f3		 jne	 SHORT $LL2@adler32
$LN30@adler32:

; 121  :         }
; 122  :         MOD(adler);

  0023d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00242	f7 e1		 mul	 ecx
  00244	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00247	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0024d	03 ca		 add	 ecx, edx

; 123  :         MOD(sum2);

  0024f	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00254	f7 e6		 mul	 esi
  00256	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00259	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0025f	03 f2		 add	 esi, edx
$LN5@adler32:

; 124  :     }
; 125  : 
; 126  :     /* return recombined sums */
; 127  :     return adler | (sum2 << 16);

  00261	c1 e6 10	 shl	 esi, 16			; 00000010H
  00264	0b f1		 or	 esi, ecx
  00266	5f		 pop	 edi
  00267	8b c6		 mov	 eax, esi
  00269	5e		 pop	 esi
  0026a	5b		 pop	 ebx

; 128  : }

  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_adler32 ENDP
_TEXT	ENDS
END
