; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Mattia\Desktop\Audio plugin developement\esempi\CompzocchioGui 2.10\zlib\contrib\minizip\unzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_unz_copyright
CONST	SEGMENT
_unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:'
	DB	'//www.winimage.com/zLibDll', 00H
CONST	ENDS
PUBLIC	_unzStringFileNameCompare
PUBLIC	_unzOpen
PUBLIC	_unzOpen64
PUBLIC	_unzOpen2
PUBLIC	_unzOpen2_64
PUBLIC	_unzClose
PUBLIC	_unzGetGlobalInfo
PUBLIC	_unzGetGlobalInfo64
PUBLIC	_unzGetGlobalComment
PUBLIC	_unzGoToFirstFile
PUBLIC	_unzGoToNextFile
PUBLIC	_unzLocateFile
PUBLIC	_unzGetFilePos
PUBLIC	_unzGoToFilePos
PUBLIC	_unzGetFilePos64
PUBLIC	_unzGoToFilePos64
PUBLIC	_unzGetCurrentFileInfo64
PUBLIC	_unzGetCurrentFileInfo
PUBLIC	_unzGetCurrentFileZStreamPos64
PUBLIC	_unzOpenCurrentFile
PUBLIC	_unzOpenCurrentFilePassword
PUBLIC	_unzOpenCurrentFile2
PUBLIC	_unzOpenCurrentFile3
PUBLIC	_unzCloseCurrentFile
PUBLIC	_unzReadCurrentFile
PUBLIC	_unztell
PUBLIC	_unztell64
PUBLIC	_unzeof
PUBLIC	_unzGetLocalExtrafield
PUBLIC	_unzGetOffset64
PUBLIC	_unzGetOffset
PUBLIC	_unzSetOffset64
PUBLIC	_unzSetOffset
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_inflate:PROC
EXTRN	_inflateEnd:PROC
EXTRN	_crc32:PROC
EXTRN	_inflateInit2_:PROC
EXTRN	_fill_fopen64_filefunc:PROC
EXTRN	_call_zopen64:PROC
EXTRN	_call_zseek64:PROC
EXTRN	_call_ztell64:PROC
EXTRN	_fill_zlib_filefunc64_32_def_from_filefunc32:PROC
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
_uFlags$ = -4						; size = 4
_size_extra_field$ = 8					; size = 4
_size_filename$ = 8					; size = 4
_uData$ = 8						; size = 4
_uMagic$ = 8						; size = 4
_s$ = 8							; size = 4
_piSizeVar$ = 12					; size = 4
_poffset_local_extrafield$ = 16				; size = 4
_psize_local_extrafield$ = 20				; size = 4
_unz64local_CheckCurrentFileCoherencyHeader PROC	; COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;
; 1393 : 
; 1394 :     *piSizeVar = 0;

  00004	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00007	56		 push	 esi
  00008	33 f6		 xor	 esi, esi
  0000a	89 30		 mov	 DWORD PTR [eax], esi

; 1395 :     *poffset_local_extrafield = 0;

  0000c	8b 45 10	 mov	 eax, DWORD PTR _poffset_local_extrafield$[ebp]
  0000f	57		 push	 edi

; 1396 :     *psize_local_extrafield = 0;
; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00010	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00018	8b 45 14	 mov	 eax, DWORD PTR _psize_local_extrafield$[ebp]
  0001b	56		 push	 esi
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  00021	03 8f d8 00 00
	00		 add	 ecx, DWORD PTR [edi+216]
  00027	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0002a	13 87 dc 00 00
	00		 adc	 eax, DWORD PTR [edi+220]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	ff 77 30	 push	 DWORD PTR [edi+48]
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 _call_zseek64
  0003b	83 c4 14	 add	 esp, 20			; 00000014H
  0003e	85 c0		 test	 eax, eax
  00040	74 09		 je	 SHORT $LN28@unz64local

; 1400 :         return UNZ_ERRNO;

  00042	5f		 pop	 edi
  00043	83 c8 ff	 or	 eax, -1
  00046	5e		 pop	 esi

; 1466 : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN28@unz64local:
  0004b	53		 push	 ebx

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)
; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  0004c	8d 45 08	 lea	 eax, DWORD PTR _uMagic$[ebp]
  0004f	50		 push	 eax
  00050	ff 77 30	 push	 DWORD PTR [edi+48]
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 _unz64local_getLong
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	bb 99 ff ff ff	 mov	 ebx, -103		; ffffff99H
  00061	85 c0		 test	 eax, eax
  00063	74 05		 je	 SHORT $LN23@unz64local

; 1406 :             err=UNZ_ERRNO;

  00065	83 ce ff	 or	 esi, -1
  00068	eb 0a		 jmp	 SHORT $LN21@unz64local
$LN23@unz64local:

; 1407 :         else if (uMagic!=0x04034b50)

  0006a	81 7d 08 50 4b
	03 04		 cmp	 DWORD PTR _uMagic$[ebp], 67324752 ; 04034b50H
  00071	0f 45 f3	 cmovne	 esi, ebx
$LN21@unz64local:

; 1408 :             err=UNZ_BADZIPFILE;
; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  00074	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  00077	50		 push	 eax
  00078	ff 77 30	 push	 DWORD PTR [edi+48]
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 _unz64local_getShort
  00081	83 c9 ff	 or	 ecx, -1
  00084	85 c0		 test	 eax, eax

; 1412 :         err=UNZ_ERRNO;
; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  00086	8d 45 fc	 lea	 eax, DWORD PTR _uFlags$[ebp]
  00089	50		 push	 eax
  0008a	ff 77 30	 push	 DWORD PTR [edi+48]
  0008d	0f 45 f1	 cmovne	 esi, ecx
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 _unz64local_getShort
  00096	85 c0		 test	 eax, eax
  00098	b8 ff ff ff ff	 mov	 eax, -1
  0009d	0f 45 f0	 cmovne	 esi, eax

; 1418 :         err=UNZ_ERRNO;
; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000a0	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  000a3	50		 push	 eax
  000a4	ff 77 30	 push	 DWORD PTR [edi+48]
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 _unz64local_getShort
  000ad	83 c4 24	 add	 esp, 36			; 00000024H
  000b0	85 c0		 test	 eax, eax
  000b2	74 05		 je	 SHORT $LN18@unz64local

; 1421 :         err=UNZ_ERRNO;

  000b4	83 ce ff	 or	 esi, -1
  000b7	eb 22		 jmp	 SHORT $LN15@unz64local
$LN18@unz64local:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  000b9	85 f6		 test	 esi, esi
  000bb	75 1e		 jne	 SHORT $LN15@unz64local
  000bd	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  000c3	39 45 08	 cmp	 DWORD PTR _uData$[ebp], eax
  000c6	74 04		 je	 SHORT $LN29@unz64local

; 1423 :         err=UNZ_BADZIPFILE;

  000c8	8b f3		 mov	 esi, ebx

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))

  000ca	eb 0f		 jmp	 SHORT $LN15@unz64local
$LN29@unz64local:
  000cc	85 c0		 test	 eax, eax
  000ce	74 0b		 je	 SHORT $LN15@unz64local
  000d0	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000d3	74 06		 je	 SHORT $LN15@unz64local
  000d5	83 f8 08	 cmp	 eax, 8
  000d8	0f 45 f3	 cmovne	 esi, ebx
$LN15@unz64local:

; 1430 :         err=UNZ_BADZIPFILE;
; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  000db	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  000de	50		 push	 eax
  000df	ff 77 30	 push	 DWORD PTR [edi+48]
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 _unz64local_getLong
  000e8	85 c0		 test	 eax, eax
  000ea	b8 ff ff ff ff	 mov	 eax, -1
  000ef	0f 45 f0	 cmovne	 esi, eax

; 1433 :         err=UNZ_ERRNO;
; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  000f2	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  000f5	50		 push	 eax
  000f6	ff 77 30	 push	 DWORD PTR [edi+48]
  000f9	57		 push	 edi
  000fa	e8 00 00 00 00	 call	 _unz64local_getLong
  000ff	8b 5d fc	 mov	 ebx, DWORD PTR _uFlags$[ebp]
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	85 c0		 test	 eax, eax
  00107	74 05		 je	 SHORT $LN13@unz64local

; 1436 :         err=UNZ_ERRNO;

  00109	83 ce ff	 or	 esi, -1
  0010c	eb 1a		 jmp	 SHORT $LN11@unz64local
$LN13@unz64local:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  0010e	85 f6		 test	 esi, esi
  00110	75 16		 jne	 SHORT $LN11@unz64local
  00112	8b 45 08	 mov	 eax, DWORD PTR _uData$[ebp]
  00115	3b 87 94 00 00
	00		 cmp	 eax, DWORD PTR [edi+148]
  0011b	74 0b		 je	 SHORT $LN11@unz64local
  0011d	f6 c3 08	 test	 bl, 8
  00120	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00125	0f 44 f0	 cmove	 esi, eax
$LN11@unz64local:

; 1438 :         err=UNZ_BADZIPFILE;
; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  00128	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  0012b	50		 push	 eax
  0012c	ff 77 30	 push	 DWORD PTR [edi+48]
  0012f	57		 push	 edi
  00130	e8 00 00 00 00	 call	 _unz64local_getLong
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
  00138	85 c0		 test	 eax, eax
  0013a	74 05		 je	 SHORT $LN10@unz64local

; 1441 :         err=UNZ_ERRNO;

  0013c	83 ce ff	 or	 esi, -1
  0013f	eb 29		 jmp	 SHORT $LN8@unz64local
$LN10@unz64local:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  00141	8b 45 08	 mov	 eax, DWORD PTR _uData$[ebp]
  00144	83 f8 ff	 cmp	 eax, -1
  00147	74 21		 je	 SHORT $LN8@unz64local
  00149	85 f6		 test	 esi, esi
  0014b	75 1d		 jne	 SHORT $LN8@unz64local
  0014d	33 c9		 xor	 ecx, ecx
  0014f	3b 87 98 00 00
	00		 cmp	 eax, DWORD PTR [edi+152]
  00155	75 08		 jne	 SHORT $LN30@unz64local
  00157	3b 8f 9c 00 00
	00		 cmp	 ecx, DWORD PTR [edi+156]
  0015d	74 0b		 je	 SHORT $LN8@unz64local
$LN30@unz64local:
  0015f	f6 c3 08	 test	 bl, 8
  00162	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00167	0f 44 f0	 cmove	 esi, eax
$LN8@unz64local:

; 1443 :         err=UNZ_BADZIPFILE;
; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  0016a	8d 45 08	 lea	 eax, DWORD PTR _uData$[ebp]
  0016d	50		 push	 eax
  0016e	ff 77 30	 push	 DWORD PTR [edi+48]
  00171	57		 push	 edi
  00172	e8 00 00 00 00	 call	 _unz64local_getLong
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017a	85 c0		 test	 eax, eax
  0017c	74 05		 je	 SHORT $LN7@unz64local

; 1446 :         err=UNZ_ERRNO;

  0017e	83 ce ff	 or	 esi, -1
  00181	eb 29		 jmp	 SHORT $LN5@unz64local
$LN7@unz64local:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  00183	8b 45 08	 mov	 eax, DWORD PTR _uData$[ebp]
  00186	83 f8 ff	 cmp	 eax, -1
  00189	74 21		 je	 SHORT $LN5@unz64local
  0018b	85 f6		 test	 esi, esi
  0018d	75 1d		 jne	 SHORT $LN5@unz64local
  0018f	33 c9		 xor	 ecx, ecx
  00191	3b 87 a0 00 00
	00		 cmp	 eax, DWORD PTR [edi+160]
  00197	75 08		 jne	 SHORT $LN31@unz64local
  00199	3b 8f a4 00 00
	00		 cmp	 ecx, DWORD PTR [edi+164]
  0019f	74 0b		 je	 SHORT $LN5@unz64local
$LN31@unz64local:
  001a1	f6 c3 08	 test	 bl, 8
  001a4	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  001a9	0f 44 f0	 cmove	 esi, eax
$LN5@unz64local:

; 1448 :         err=UNZ_BADZIPFILE;
; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  001ac	8d 45 08	 lea	 eax, DWORD PTR _size_filename$[ebp]
  001af	50		 push	 eax
  001b0	ff 77 30	 push	 DWORD PTR [edi+48]
  001b3	57		 push	 edi
  001b4	e8 00 00 00 00	 call	 _unz64local_getShort
  001b9	8b 5d 08	 mov	 ebx, DWORD PTR _size_filename$[ebp]
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bf	85 c0		 test	 eax, eax
  001c1	74 05		 je	 SHORT $LN4@unz64local

; 1451 :         err=UNZ_ERRNO;

  001c3	83 ce ff	 or	 esi, -1
  001c6	eb 12		 jmp	 SHORT $LN2@unz64local
$LN4@unz64local:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  001c8	85 f6		 test	 esi, esi
  001ca	75 0e		 jne	 SHORT $LN2@unz64local
  001cc	3b 9f a8 00 00
	00		 cmp	 ebx, DWORD PTR [edi+168]
  001d2	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  001d7	0f 45 f0	 cmovne	 esi, eax
$LN2@unz64local:

; 1453 :         err=UNZ_BADZIPFILE;
; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;

  001da	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  001dd	01 18		 add	 DWORD PTR [eax], ebx

; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  001df	8d 45 08	 lea	 eax, DWORD PTR _size_extra_field$[ebp]
  001e2	50		 push	 eax
  001e3	ff 77 30	 push	 DWORD PTR [edi+48]
  001e6	57		 push	 edi
  001e7	e8 00 00 00 00	 call	 _unz64local_getShort
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ef	85 c0		 test	 eax, eax
  001f1	b8 ff ff ff ff	 mov	 eax, -1
  001f6	0f 45 f0	 cmovne	 esi, eax

; 1458 :         err=UNZ_ERRNO;
; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;

  001f9	8b 45 10	 mov	 eax, DWORD PTR _poffset_local_extrafield$[ebp]
  001fc	33 c9		 xor	 ecx, ecx
  001fe	03 9f d8 00 00
	00		 add	 ebx, DWORD PTR [edi+216]
  00204	13 8f dc 00 00
	00		 adc	 ecx, DWORD PTR [edi+220]
  0020a	83 c3 1e	 add	 ebx, 30			; 0000001eH
  0020d	89 18		 mov	 DWORD PTR [eax], ebx
  0020f	83 d1 00	 adc	 ecx, 0
  00212	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  00215	8b 45 14	 mov	 eax, DWORD PTR _psize_local_extrafield$[ebp]
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _size_extra_field$[ebp]
  0021b	89 08		 mov	 DWORD PTR [eax], ecx

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;

  0021d	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00220	5b		 pop	 ebx
  00221	01 08		 add	 DWORD PTR [eax], ecx
  00223	5f		 pop	 edi

; 1464 : 
; 1465 :     return err;

  00224	8b c6		 mov	 eax, esi
  00226	5e		 pop	 esi

; 1466 : }

  00227	8b e5		 mov	 esp, ebp
  00229	5d		 pop	 ebp
  0022a	c3		 ret	 0
_unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
_file_info$ = -116					; size = 88
_file_info_internal$ = -28				; size = 8
_uL$1 = -20						; size = 4
_headerId$2 = -16					; size = 4
_uSizeRead$1$ = -12					; size = 4
_acc$1$ = -12						; size = 4
_file_info_internal$1$ = -8				; size = 4
_uSizeRead$1$ = -4					; size = 4
_dataSize$3 = -4					; size = 4
_lSeek$1$ = 8						; size = 4
_uL$ = 8						; size = 4
_uMagic$ = 8						; size = 4
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_pfile_info_internal$ = 16				; size = 4
_szFileName$ = 20					; size = 4
_fileNameBufferSize$ = 24				; size = 4
_extraField$ = 28					; size = 4
_extraFieldBufferSize$ = 32				; size = 4
_szComment$ = 36					; size = 4
_commentBufferSize$ = 40				; size = 4
_unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;
; 894  :     uLong uMagic;
; 895  :     long lSeek=0;
; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	85 f6		 test	 esi, esi
  0000f	75 09		 jne	 SHORT $LN65@unz64local

; 899  :         return UNZ_PARAMERROR;

  00011	5e		 pop	 esi
  00012	8d 43 9a	 lea	 eax, DWORD PTR [ebx-102]
  00015	5b		 pop	 ebx

; 1115 : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN65@unz64local:

; 900  :     s=(unz64_s*)file;
; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  0001a	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0001d	03 4e 48	 add	 ecx, DWORD PTR [esi+72]
  00020	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00023	13 46 4c	 adc	 eax, DWORD PTR [esi+76]
  00026	6a 00		 push	 0
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	ff 76 30	 push	 DWORD PTR [esi+48]
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _call_zseek64
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	85 c0		 test	 eax, eax
  00038	74 05		 je	 SHORT $LN71@unz64local

; 904  :         err=UNZ_ERRNO;

  0003a	83 cb ff	 or	 ebx, -1

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  0003d	eb 28		 jmp	 SHORT $LN60@unz64local
$LN71@unz64local:

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  0003f	8d 45 08	 lea	 eax, DWORD PTR _uMagic$[ebp]
  00042	50		 push	 eax
  00043	ff 76 30	 push	 DWORD PTR [esi+48]
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _unz64local_getLong
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	85 c0		 test	 eax, eax
  00051	74 05		 je	 SHORT $LN62@unz64local

; 911  :             err=UNZ_ERRNO;

  00053	83 cb ff	 or	 ebx, -1
  00056	eb 0f		 jmp	 SHORT $LN60@unz64local
$LN62@unz64local:

; 912  :         else if (uMagic!=0x02014b50)

  00058	81 7d 08 50 4b
	01 02		 cmp	 DWORD PTR _uMagic$[ebp], 33639248 ; 02014b50H
  0005f	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00064	0f 45 d8	 cmovne	 ebx, eax
$LN60@unz64local:

; 913  :             err=UNZ_BADZIPFILE;
; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  00067	57		 push	 edi
  00068	8d 45 8c	 lea	 eax, DWORD PTR _file_info$[ebp]
  0006b	50		 push	 eax
  0006c	ff 76 30	 push	 DWORD PTR [esi+48]
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _unz64local_getShort
  00075	83 cf ff	 or	 edi, -1
  00078	85 c0		 test	 eax, eax

; 917  :         err=UNZ_ERRNO;
; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  0007a	8d 45 90	 lea	 eax, DWORD PTR _file_info$[ebp+4]
  0007d	50		 push	 eax
  0007e	ff 76 30	 push	 DWORD PTR [esi+48]
  00081	0f 45 df	 cmovne	 ebx, edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _unz64local_getShort
  0008a	85 c0		 test	 eax, eax

; 920  :         err=UNZ_ERRNO;
; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  0008c	8d 45 94	 lea	 eax, DWORD PTR _file_info$[ebp+8]
  0008f	50		 push	 eax
  00090	ff 76 30	 push	 DWORD PTR [esi+48]
  00093	0f 45 df	 cmovne	 ebx, edi
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _unz64local_getShort
  0009c	85 c0		 test	 eax, eax

; 923  :         err=UNZ_ERRNO;
; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  0009e	8d 45 98	 lea	 eax, DWORD PTR _file_info$[ebp+12]
  000a1	50		 push	 eax
  000a2	ff 76 30	 push	 DWORD PTR [esi+48]
  000a5	0f 45 df	 cmovne	 ebx, edi
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _unz64local_getShort
  000ae	85 c0		 test	 eax, eax

; 926  :         err=UNZ_ERRNO;
; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  000b0	8d 45 9c	 lea	 eax, DWORD PTR _file_info$[ebp+16]
  000b3	50		 push	 eax
  000b4	ff 76 30	 push	 DWORD PTR [esi+48]
  000b7	0f 45 df	 cmovne	 ebx, edi
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 _unz64local_getLong
  000c0	85 c0		 test	 eax, eax

; 929  :         err=UNZ_ERRNO;
; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  000c2	8d 45 cc	 lea	 eax, DWORD PTR _file_info$[ebp+64]
  000c5	50		 push	 eax
  000c6	6a 00		 push	 0
  000c8	ff 75 9c	 push	 DWORD PTR _file_info$[ebp+16]
  000cb	0f 45 df	 cmovne	 ebx, edi
  000ce	e8 00 00 00 00	 call	 _unz64local_DosDateToTmuDate
  000d3	83 c4 48	 add	 esp, 72			; 00000048H

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  000d6	8d 45 a0	 lea	 eax, DWORD PTR _file_info$[ebp+20]
  000d9	50		 push	 eax
  000da	ff 76 30	 push	 DWORD PTR [esi+48]
  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 _unz64local_getLong
  000e3	85 c0		 test	 eax, eax

; 934  :         err=UNZ_ERRNO;
; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  000e5	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  000e8	50		 push	 eax
  000e9	ff 76 30	 push	 DWORD PTR [esi+48]
  000ec	0f 45 df	 cmovne	 ebx, edi
  000ef	56		 push	 esi
  000f0	e8 00 00 00 00	 call	 _unz64local_getLong
  000f5	85 c0		 test	 eax, eax

; 937  :         err=UNZ_ERRNO;
; 938  :     file_info.compressed_size = uL;

  000f7	8b 45 08	 mov	 eax, DWORD PTR _uL$[ebp]
  000fa	89 45 a4	 mov	 DWORD PTR _file_info$[ebp+24], eax

; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  000fd	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  00100	50		 push	 eax
  00101	ff 76 30	 push	 DWORD PTR [esi+48]
  00104	0f 45 df	 cmovne	 ebx, edi
  00107	56		 push	 esi
  00108	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _file_info$[ebp+28], 0
  0010f	e8 00 00 00 00	 call	 _unz64local_getLong
  00114	85 c0		 test	 eax, eax

; 941  :         err=UNZ_ERRNO;
; 942  :     file_info.uncompressed_size = uL;

  00116	8b 45 08	 mov	 eax, DWORD PTR _uL$[ebp]
  00119	89 45 ac	 mov	 DWORD PTR _file_info$[ebp+32], eax

; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  0011c	8d 45 b4	 lea	 eax, DWORD PTR _file_info$[ebp+40]
  0011f	50		 push	 eax
  00120	ff 76 30	 push	 DWORD PTR [esi+48]
  00123	0f 45 df	 cmovne	 ebx, edi
  00126	56		 push	 esi
  00127	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _file_info$[ebp+36], 0
  0012e	e8 00 00 00 00	 call	 _unz64local_getShort
  00133	85 c0		 test	 eax, eax

; 945  :         err=UNZ_ERRNO;
; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  00135	8d 45 b8	 lea	 eax, DWORD PTR _file_info$[ebp+44]
  00138	50		 push	 eax
  00139	ff 76 30	 push	 DWORD PTR [esi+48]
  0013c	0f 45 df	 cmovne	 ebx, edi
  0013f	56		 push	 esi
  00140	e8 00 00 00 00	 call	 _unz64local_getShort
  00145	85 c0		 test	 eax, eax

; 948  :         err=UNZ_ERRNO;
; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  00147	8d 45 bc	 lea	 eax, DWORD PTR _file_info$[ebp+48]
  0014a	50		 push	 eax
  0014b	ff 76 30	 push	 DWORD PTR [esi+48]
  0014e	0f 45 df	 cmovne	 ebx, edi
  00151	56		 push	 esi
  00152	e8 00 00 00 00	 call	 _unz64local_getShort
  00157	83 c4 48	 add	 esp, 72			; 00000048H
  0015a	85 c0		 test	 eax, eax

; 951  :         err=UNZ_ERRNO;
; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  0015c	8d 45 c0	 lea	 eax, DWORD PTR _file_info$[ebp+52]
  0015f	50		 push	 eax
  00160	ff 76 30	 push	 DWORD PTR [esi+48]
  00163	0f 45 df	 cmovne	 ebx, edi
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _unz64local_getShort
  0016c	85 c0		 test	 eax, eax

; 954  :         err=UNZ_ERRNO;
; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  0016e	8d 45 c4	 lea	 eax, DWORD PTR _file_info$[ebp+56]
  00171	50		 push	 eax
  00172	ff 76 30	 push	 DWORD PTR [esi+48]
  00175	0f 45 df	 cmovne	 ebx, edi
  00178	56		 push	 esi
  00179	e8 00 00 00 00	 call	 _unz64local_getShort
  0017e	85 c0		 test	 eax, eax

; 957  :         err=UNZ_ERRNO;
; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  00180	8d 45 c8	 lea	 eax, DWORD PTR _file_info$[ebp+60]
  00183	50		 push	 eax
  00184	ff 76 30	 push	 DWORD PTR [esi+48]
  00187	0f 45 df	 cmovne	 ebx, edi
  0018a	56		 push	 esi
  0018b	e8 00 00 00 00	 call	 _unz64local_getLong
  00190	85 c0		 test	 eax, eax

; 960  :         err=UNZ_ERRNO;
; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00192	8d 45 08	 lea	 eax, DWORD PTR _uL$[ebp]
  00195	50		 push	 eax
  00196	ff 76 30	 push	 DWORD PTR [esi+48]
  00199	0f 45 df	 cmovne	 ebx, edi
  0019c	56		 push	 esi
  0019d	e8 00 00 00 00	 call	 _unz64local_getLong

; 964  :         err=UNZ_ERRNO;
; 965  :     file_info_internal.offset_curfile = uL;
; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  001a2	8b 4d b4	 mov	 ecx, DWORD PTR _file_info$[ebp+40]
  001a5	83 c4 30	 add	 esp, 48			; 00000030H
  001a8	85 c0		 test	 eax, eax
  001aa	8b 45 08	 mov	 eax, DWORD PTR _uL$[ebp]
  001ad	0f 45 df	 cmovne	 ebx, edi
  001b0	89 45 f8	 mov	 DWORD PTR _file_info_internal$1$[ebp], eax
  001b3	89 45 e4	 mov	 DWORD PTR _file_info_internal$[ebp], eax
  001b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _file_info_internal$[ebp+4], 0
  001bd	89 4d 08	 mov	 DWORD PTR _lSeek$1$[ebp], ecx

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  001c0	85 db		 test	 ebx, ebx
  001c2	0f 85 ce 00 00
	00		 jne	 $LN39@unz64local
  001c8	8b 55 14	 mov	 edx, DWORD PTR _szFileName$[ebp]
  001cb	85 d2		 test	 edx, edx
  001cd	74 42		 je	 SHORT $LN72@unz64local

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  001cf	8b 45 18	 mov	 eax, DWORD PTR _fileNameBufferSize$[ebp]
  001d2	3b c8		 cmp	 ecx, eax
  001d4	73 07		 jae	 SHORT $LN43@unz64local

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  001d6	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl

; 974  :             uSizeRead = file_info.size_filename;

  001d9	8b f9		 mov	 edi, ecx

; 975  :         }
; 976  :         else

  001db	eb 02		 jmp	 SHORT $LN42@unz64local
$LN43@unz64local:

; 977  :             uSizeRead = fileNameBufferSize;

  001dd	8b f8		 mov	 edi, eax
$LN42@unz64local:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  001df	85 c9		 test	 ecx, ecx
  001e1	74 21		 je	 SHORT $LN40@unz64local
  001e3	85 c0		 test	 eax, eax
  001e5	74 1d		 je	 SHORT $LN40@unz64local

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  001e7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001ea	57		 push	 edi
  001eb	52		 push	 edx
  001ec	ff 76 30	 push	 DWORD PTR [esi+48]
  001ef	ff 76 1c	 push	 DWORD PTR [esi+28]
  001f2	ff d0		 call	 eax
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _lSeek$1$[ebp]
  001f7	83 c4 10	 add	 esp, 16			; 00000010H
  001fa	3b c7		 cmp	 eax, edi
  001fc	b8 ff ff ff ff	 mov	 eax, -1
  00201	0f 45 d8	 cmovne	 ebx, eax
$LN40@unz64local:

; 981  :                 err=UNZ_ERRNO;
; 982  :         lSeek -= uSizeRead;

  00204	2b cf		 sub	 ecx, edi
  00206	89 4d 08	 mov	 DWORD PTR _lSeek$1$[ebp], ecx

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  00209	85 db		 test	 ebx, ebx
  0020b	0f 85 85 00 00
	00		 jne	 $LN39@unz64local
$LN72@unz64local:
  00211	8b 55 1c	 mov	 edx, DWORD PTR _extraField$[ebp]
  00214	85 d2		 test	 edx, edx
  00216	74 7e		 je	 SHORT $LN39@unz64local

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  00218	8b 7d b8	 mov	 edi, DWORD PTR _file_info$[ebp+44]
  0021b	8b 45 20	 mov	 eax, DWORD PTR _extraFieldBufferSize$[ebp]

; 990  :             uSizeRead = file_info.size_file_extra;

  0021e	89 7d fc	 mov	 DWORD PTR _uSizeRead$1$[ebp], edi
  00221	3b f8		 cmp	 edi, eax
  00223	72 03		 jb	 SHORT $LN37@unz64local

; 991  :         else
; 992  :             uSizeRead = extraFieldBufferSize;

  00225	89 45 fc	 mov	 DWORD PTR _uSizeRead$1$[ebp], eax
$LN37@unz64local:

; 993  : 
; 994  :         if (lSeek!=0)

  00228	85 c9		 test	 ecx, ecx
  0022a	74 2a		 je	 SHORT $LN34@unz64local

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  0022c	8b c1		 mov	 eax, ecx
  0022e	6a 01		 push	 1
  00230	99		 cdq
  00231	52		 push	 edx
  00232	50		 push	 eax
  00233	ff 76 30	 push	 DWORD PTR [esi+48]
  00236	56		 push	 esi
  00237	e8 00 00 00 00	 call	 _call_zseek64

; 998  :             else

  0023c	8b 55 1c	 mov	 edx, DWORD PTR _extraField$[ebp]
  0023f	83 c4 14	 add	 esp, 20			; 00000014H
  00242	85 c0		 test	 eax, eax
  00244	8b 45 20	 mov	 eax, DWORD PTR _extraFieldBufferSize$[ebp]
  00247	75 07		 jne	 SHORT $LN35@unz64local

; 997  :                 lSeek=0;

  00249	33 c9		 xor	 ecx, ecx
  0024b	89 4d 08	 mov	 DWORD PTR _lSeek$1$[ebp], ecx

; 998  :             else

  0024e	eb 06		 jmp	 SHORT $LN34@unz64local
$LN35@unz64local:
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _lSeek$1$[ebp]

; 999  :                 err=UNZ_ERRNO;

  00253	83 cb ff	 or	 ebx, -1
$LN34@unz64local:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00256	85 ff		 test	 edi, edi
  00258	74 31		 je	 SHORT $LN79@unz64local
  0025a	85 c0		 test	 eax, eax
  0025c	74 2d		 je	 SHORT $LN79@unz64local

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  0025e	ff 75 fc	 push	 DWORD PTR _uSizeRead$1$[ebp]
  00261	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00264	52		 push	 edx
  00265	ff 76 30	 push	 DWORD PTR [esi+48]
  00268	ff 76 1c	 push	 DWORD PTR [esi+28]
  0026b	ff d0		 call	 eax
  0026d	8b 55 fc	 mov	 edx, DWORD PTR _uSizeRead$1$[ebp]
  00270	83 c4 10	 add	 esp, 16			; 00000010H
  00273	33 c9		 xor	 ecx, ecx
  00275	3b c2		 cmp	 eax, edx
  00277	75 04		 jne	 SHORT $LN76@unz64local
  00279	85 c9		 test	 ecx, ecx
  0027b	74 03		 je	 SHORT $LN77@unz64local
$LN76@unz64local:

; 1004 :                 err=UNZ_ERRNO;

  0027d	83 cb ff	 or	 ebx, -1
$LN77@unz64local:
  00280	8b 4d 08	 mov	 ecx, DWORD PTR _lSeek$1$[ebp]

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00283	8b c7		 mov	 eax, edi
  00285	2b c2		 sub	 eax, edx
  00287	03 c8		 add	 ecx, eax

; 1007 :     }
; 1008 :     else

  00289	eb 10		 jmp	 SHORT $LN80@unz64local
$LN79@unz64local:
  0028b	8b 55 fc	 mov	 edx, DWORD PTR _uSizeRead$1$[ebp]

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  0028e	8b c7		 mov	 eax, edi
  00290	2b c2		 sub	 eax, edx
  00292	03 c8		 add	 ecx, eax

; 1007 :     }
; 1008 :     else

  00294	eb 05		 jmp	 SHORT $LN80@unz64local
$LN39@unz64local:

; 1009 :         lSeek += file_info.size_file_extra;

  00296	8b 7d b8	 mov	 edi, DWORD PTR _file_info$[ebp+44]
  00299	03 cf		 add	 ecx, edi
$LN80@unz64local:
  0029b	89 4d 08	 mov	 DWORD PTR _lSeek$1$[ebp], ecx

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  0029e	85 db		 test	 ebx, ebx
  002a0	0f 85 e1 01 00
	00		 jne	 $LN1@unz64local
  002a6	85 ff		 test	 edi, edi
  002a8	0f 84 42 01 00
	00		 je	 $LN73@unz64local

; 1013 :     {
; 1014 :                                 uLong acc = 0;
; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  002ae	2b cf		 sub	 ecx, edi
  002b0	89 5d f4	 mov	 DWORD PTR _acc$1$[ebp], ebx
  002b3	89 4d 08	 mov	 DWORD PTR _lSeek$1$[ebp], ecx

; 1018 : 
; 1019 :         if (lSeek!=0)

  002b6	74 1f		 je	 SHORT $LN68@unz64local

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  002b8	8b c1		 mov	 eax, ecx
  002ba	6a 01		 push	 1
  002bc	99		 cdq
  002bd	52		 push	 edx
  002be	50		 push	 eax
  002bf	ff 76 30	 push	 DWORD PTR [esi+48]
  002c2	56		 push	 esi
  002c3	e8 00 00 00 00	 call	 _call_zseek64
  002c8	83 c4 14	 add	 esp, 20			; 00000014H
  002cb	85 c0		 test	 eax, eax
  002cd	75 05		 jne	 SHORT $LN28@unz64local

; 1022 :                 lSeek=0;

  002cf	89 45 08	 mov	 DWORD PTR _lSeek$1$[ebp], eax

; 1023 :             else

  002d2	eb 03		 jmp	 SHORT $LN68@unz64local
$LN28@unz64local:

; 1024 :                 err=UNZ_ERRNO;

  002d4	83 cb ff	 or	 ebx, -1
$LN68@unz64local:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  002d7	85 ff		 test	 edi, edi
  002d9	0f 84 09 01 00
	00		 je	 $LN25@unz64local
  002df	90		 npad	 1
$LL26@unz64local:

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  002e0	8d 45 f0	 lea	 eax, DWORD PTR _headerId$2[ebp]
  002e3	50		 push	 eax
  002e4	ff 76 30	 push	 DWORD PTR [esi+48]
  002e7	56		 push	 esi
  002e8	e8 00 00 00 00	 call	 _unz64local_getShort
  002ed	85 c0		 test	 eax, eax
  002ef	b8 ff ff ff ff	 mov	 eax, -1
  002f4	0f 45 d8	 cmovne	 ebx, eax

; 1033 :                 err=UNZ_ERRNO;
; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  002f7	8d 45 fc	 lea	 eax, DWORD PTR _dataSize$3[ebp]
  002fa	50		 push	 eax
  002fb	ff 76 30	 push	 DWORD PTR [esi+48]
  002fe	56		 push	 esi
  002ff	e8 00 00 00 00	 call	 _unz64local_getShort
  00304	83 c4 18	 add	 esp, 24			; 00000018H
  00307	85 c0		 test	 eax, eax
  00309	b8 ff ff ff ff	 mov	 eax, -1
  0030e	0f 45 d8	 cmovne	 ebx, eax

; 1036 :                 err=UNZ_ERRNO;
; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  00311	83 7d f0 01	 cmp	 DWORD PTR _headerId$2[ebp], 1
  00315	0f 85 9c 00 00
	00		 jne	 $LN22@unz64local

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == (ZPOS64_T)(unsigned long)-1)

  0031b	39 45 ac	 cmp	 DWORD PTR _file_info$[ebp+32], eax
  0031e	75 23		 jne	 SHORT $LN20@unz64local
  00320	83 7d b0 00	 cmp	 DWORD PTR _file_info$[ebp+36], 0
  00324	75 1d		 jne	 SHORT $LN20@unz64local

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  00326	8d 45 ac	 lea	 eax, DWORD PTR _file_info$[ebp+32]
  00329	50		 push	 eax
  0032a	ff 76 30	 push	 DWORD PTR [esi+48]
  0032d	56		 push	 esi
  0032e	e8 00 00 00 00	 call	 _unz64local_getLong64
  00333	8b 7d b8	 mov	 edi, DWORD PTR _file_info$[ebp+44]
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH
  00339	85 c0		 test	 eax, eax
  0033b	b8 ff ff ff ff	 mov	 eax, -1
  00340	0f 45 d8	 cmovne	 ebx, eax
$LN20@unz64local:

; 1046 :                                                                                         err=UNZ_ERRNO;
; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == (ZPOS64_T)(unsigned long)-1)

  00343	83 7d a4 ff	 cmp	 DWORD PTR _file_info$[ebp+24], -1
  00347	75 23		 jne	 SHORT $LN18@unz64local
  00349	83 7d a8 00	 cmp	 DWORD PTR _file_info$[ebp+28], 0
  0034d	75 1d		 jne	 SHORT $LN18@unz64local

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  0034f	8d 45 a4	 lea	 eax, DWORD PTR _file_info$[ebp+24]
  00352	50		 push	 eax
  00353	ff 76 30	 push	 DWORD PTR [esi+48]
  00356	56		 push	 esi
  00357	e8 00 00 00 00	 call	 _unz64local_getLong64
  0035c	8b 7d b8	 mov	 edi, DWORD PTR _file_info$[ebp+44]
  0035f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00362	85 c0		 test	 eax, eax
  00364	b8 ff ff ff ff	 mov	 eax, -1
  00369	0f 45 d8	 cmovne	 ebx, eax
$LN18@unz64local:

; 1052 :                                                                                   err=UNZ_ERRNO;
; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == (ZPOS64_T)(unsigned long)-1)

  0036c	83 7d f8 ff	 cmp	 DWORD PTR _file_info_internal$1$[ebp], -1
  00370	75 26		 jne	 SHORT $LN16@unz64local
  00372	83 7d e8 00	 cmp	 DWORD PTR _file_info_internal$[ebp+4], 0
  00376	75 20		 jne	 SHORT $LN16@unz64local

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00378	8d 45 e4	 lea	 eax, DWORD PTR _file_info_internal$[ebp]
  0037b	50		 push	 eax
  0037c	ff 76 30	 push	 DWORD PTR [esi+48]
  0037f	56		 push	 esi
  00380	e8 00 00 00 00	 call	 _unz64local_getLong64
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH
  00388	85 c0		 test	 eax, eax
  0038a	b8 ff ff ff ff	 mov	 eax, -1
  0038f	0f 45 d8	 cmovne	 ebx, eax
  00392	8b 45 e4	 mov	 eax, DWORD PTR _file_info_internal$[ebp]
  00395	89 45 f8	 mov	 DWORD PTR _file_info_internal$1$[ebp], eax
$LN16@unz64local:

; 1059 :                                                                                 err=UNZ_ERRNO;
; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == (unsigned long)-1)

  00398	83 7d c0 ff	 cmp	 DWORD PTR _file_info$[ebp+52], -1
  0039c	75 36		 jne	 SHORT $LN12@unz64local

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0039e	8d 45 ec	 lea	 eax, DWORD PTR _uL$1[ebp]
  003a1	50		 push	 eax
  003a2	ff 76 30	 push	 DWORD PTR [esi+48]
  003a5	56		 push	 esi
  003a6	e8 00 00 00 00	 call	 _unz64local_getLong
  003ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ae	85 c0		 test	 eax, eax
  003b0	74 22		 je	 SHORT $LN12@unz64local

; 1066 :                                                                                 err=UNZ_ERRNO;

  003b2	83 cb ff	 or	 ebx, -1

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }
; 1070 :             else

  003b5	eb 1d		 jmp	 SHORT $LN12@unz64local
$LN22@unz64local:

; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  003b7	6a 01		 push	 1
  003b9	6a 00		 push	 0
  003bb	ff 75 fc	 push	 DWORD PTR _dataSize$3[ebp]
  003be	ff 76 30	 push	 DWORD PTR [esi+48]
  003c1	56		 push	 esi
  003c2	e8 00 00 00 00	 call	 _call_zseek64
  003c7	83 c4 14	 add	 esp, 20			; 00000014H
  003ca	85 c0		 test	 eax, eax
  003cc	b8 ff ff ff ff	 mov	 eax, -1
  003d1	0f 45 d8	 cmovne	 ebx, eax
$LN12@unz64local:

; 1073 :                     err=UNZ_ERRNO;
; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  003d4	8b 45 f4	 mov	 eax, DWORD PTR _acc$1$[ebp]
  003d7	83 c0 04	 add	 eax, 4
  003da	03 45 fc	 add	 eax, DWORD PTR _dataSize$3[ebp]
  003dd	89 45 f4	 mov	 DWORD PTR _acc$1$[ebp], eax
  003e0	3b c7		 cmp	 eax, edi
  003e2	0f 82 f8 fe ff
	ff		 jb	 $LL26@unz64local
$LN25@unz64local:

; 1077 :         }
; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  003e8	85 db		 test	 ebx, ebx
  003ea	0f 85 97 00 00
	00		 jne	 $LN1@unz64local
$LN73@unz64local:
  003f0	8b 55 24	 mov	 edx, DWORD PTR _szComment$[ebp]
  003f3	85 d2		 test	 edx, edx
  003f5	74 6d		 je	 SHORT $LN74@unz64local

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  003f7	8b 7d bc	 mov	 edi, DWORD PTR _file_info$[ebp+48]
  003fa	8b 4d 28	 mov	 ecx, DWORD PTR _commentBufferSize$[ebp]
  003fd	3b f9		 cmp	 edi, ecx
  003ff	73 09		 jae	 SHORT $LN10@unz64local

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  00401	c6 04 17 00	 mov	 BYTE PTR [edi+edx], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  00405	89 7d f4	 mov	 DWORD PTR _uSizeRead$1$[ebp], edi

; 1087 :         }
; 1088 :         else

  00408	eb 03		 jmp	 SHORT $LN9@unz64local
$LN10@unz64local:

; 1089 :             uSizeRead = commentBufferSize;

  0040a	89 4d f4	 mov	 DWORD PTR _uSizeRead$1$[ebp], ecx
$LN9@unz64local:

; 1090 : 
; 1091 :         if (lSeek!=0)

  0040d	8b 45 08	 mov	 eax, DWORD PTR _lSeek$1$[ebp]
  00410	85 c0		 test	 eax, eax
  00412	74 21		 je	 SHORT $LN6@unz64local

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00414	6a 01		 push	 1
  00416	99		 cdq
  00417	52		 push	 edx
  00418	50		 push	 eax
  00419	ff 76 30	 push	 DWORD PTR [esi+48]
  0041c	56		 push	 esi
  0041d	e8 00 00 00 00	 call	 _call_zseek64
  00422	8b 4d 28	 mov	 ecx, DWORD PTR _commentBufferSize$[ebp]
  00425	8b 55 24	 mov	 edx, DWORD PTR _szComment$[ebp]
  00428	83 c4 14	 add	 esp, 20			; 00000014H
  0042b	85 c0		 test	 eax, eax
  0042d	b8 ff ff ff ff	 mov	 eax, -1
  00432	0f 45 d8	 cmovne	 ebx, eax
$LN6@unz64local:

; 1094 :                 lSeek=0;
; 1095 :             else
; 1096 :                 err=UNZ_ERRNO;
; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  00435	85 ff		 test	 edi, edi
  00437	74 27		 je	 SHORT $LN4@unz64local
  00439	85 c9		 test	 ecx, ecx
  0043b	74 23		 je	 SHORT $LN4@unz64local

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  0043d	8b 7d f4	 mov	 edi, DWORD PTR _uSizeRead$1$[ebp]
  00440	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00443	57		 push	 edi
  00444	52		 push	 edx
  00445	ff 76 30	 push	 DWORD PTR [esi+48]
  00448	ff 76 1c	 push	 DWORD PTR [esi+28]
  0044b	ff d0		 call	 eax
  0044d	83 c4 10	 add	 esp, 16			; 00000010H
  00450	3b c7		 cmp	 eax, edi
  00452	74 0c		 je	 SHORT $LN4@unz64local

; 1101 :                 err=UNZ_ERRNO;

  00454	5f		 pop	 edi
  00455	83 cb ff	 or	 ebx, -1
  00458	5e		 pop	 esi

; 1113 : 
; 1114 :     return err;

  00459	8b c3		 mov	 eax, ebx
  0045b	5b		 pop	 ebx

; 1115 : }

  0045c	8b e5		 mov	 esp, ebp
  0045e	5d		 pop	 ebp
  0045f	c3		 ret	 0
$LN4@unz64local:

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;
; 1103 :     }
; 1104 :     else
; 1105 :         lSeek+=file_info.size_file_comment;
; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  00460	85 db		 test	 ebx, ebx
  00462	75 23		 jne	 SHORT $LN1@unz64local
$LN74@unz64local:
  00464	8b 7d 0c	 mov	 edi, DWORD PTR _pfile_info$[ebp]
  00467	85 ff		 test	 edi, edi
  00469	74 0a		 je	 SHORT $LN75@unz64local

; 1109 :         *pfile_info=file_info;

  0046b	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00470	8d 75 8c	 lea	 esi, DWORD PTR _file_info$[ebp]
  00473	f3 a5		 rep movsd
$LN75@unz64local:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  00475	8b 4d 10	 mov	 ecx, DWORD PTR _pfile_info_internal$[ebp]
  00478	85 c9		 test	 ecx, ecx
  0047a	74 0b		 je	 SHORT $LN1@unz64local

; 1112 :         *pfile_info_internal=file_info_internal;

  0047c	8b 45 f8	 mov	 eax, DWORD PTR _file_info_internal$1$[ebp]
  0047f	89 01		 mov	 DWORD PTR [ecx], eax
  00481	8b 45 e8	 mov	 eax, DWORD PTR _file_info_internal$[ebp+4]
  00484	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@unz64local:

; 1113 : 
; 1114 :     return err;

  00487	5f		 pop	 edi
  00488	5e		 pop	 esi
  00489	8b c3		 mov	 eax, ebx
  0048b	5b		 pop	 ebx

; 1115 : }

  0048c	8b e5		 mov	 esp, ebp
  0048e	5d		 pop	 ebp
  0048f	c3		 ret	 0
_unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_DosDateToTmuDate
_TEXT	SEGMENT
_ulDosDate$ = 8						; size = 8
_ptm$ = 16						; size = 4
_unz64local_DosDateToTmuDate PROC			; COMDAT

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _ulDosDate$[ebp+4]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _ulDosDate$[ebp]
  0000b	8b d3		 mov	 edx, ebx
  0000d	0f ac d6 10	 shrd	 esi, edx, 16

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00011	8b c6		 mov	 eax, esi
  00013	83 e0 1f	 and	 eax, 31			; 0000001fH
  00016	57		 push	 edi
  00017	8b 7d 10	 mov	 edi, DWORD PTR _ptm$[ebp]
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  00020	8b c2		 mov	 eax, edx
  00022	8b ce		 mov	 ecx, esi
  00024	0f ac c1 05	 shrd	 ecx, eax, 5

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  00028	0f ac d6 09	 shrd	 esi, edx, 9
  0002c	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0002f	c1 e8 05	 shr	 eax, 5
  00032	49		 dec	 ecx
  00033	c1 ea 09	 shr	 edx, 9

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00036	8b 55 08	 mov	 edx, DWORD PTR _ulDosDate$[ebp]
  00039	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003c	8b c3		 mov	 eax, ebx
  0003e	8b ca		 mov	 ecx, edx
  00040	0f ac c1 0b	 shrd	 ecx, eax, 11
  00044	c1 e8 0b	 shr	 eax, 11			; 0000000bH

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  00047	8b c2		 mov	 eax, edx
  00049	0f ac d8 05	 shrd	 eax, ebx, 5
  0004d	83 e6 7f	 and	 esi, 127		; 0000007fH
  00050	81 c6 bc 07 00
	00		 add	 esi, 1980		; 000007bcH
  00056	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00059	c1 eb 05	 shr	 ebx, 5
  0005c	83 e0 3f	 and	 eax, 63			; 0000003fH

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  0005f	83 e2 1f	 and	 edx, 31			; 0000001fH
  00062	03 d2		 add	 edx, edx
  00064	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00067	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  0006a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006d	89 17		 mov	 DWORD PTR [edi], edx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 863  : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenInternal
_TEXT	SEGMENT
_us$ = -260						; size = 240
_uL64$1 = -20						; size = 8
_number_disk$ = -16					; size = 4
_uS$2 = -16						; size = 4
_number_disk_with_CD$ = -12				; size = 4
_number_entry_CD$ = -8					; size = 8
_uL$ = -4						; size = 4
_path$ = 8						; size = 4
_pzlib_filefunc64_32_def$ = 12				; size = 4
_is64bitOpenFunction$ = 16				; size = 4
_unzOpenInternal PROC					; COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;
; 602  : 
; 603  :     if (unz_copyright[0]!=' ')
; 604  :         return NULL;
; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;
; 607  :     us.z_filefunc.ztell32_file = NULL;
; 608  :     if (pzlib_filefunc64_32_def==NULL)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  0000c	56		 push	 esi
  0000d	33 f6		 xor	 esi, esi
  0000f	89 b5 24 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+40], esi
  00015	89 b5 20 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+36], esi
  0001b	85 c0		 test	 eax, eax
  0001d	75 11		 jne	 SHORT $LN33@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  0001f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  0002b	83 c4 04	 add	 esp, 4

; 610  :     else

  0002e	eb 49		 jmp	 SHORT $LN32@unzOpenInt
$LN33@unzOpenInt:

; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00030	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00034	66 0f d6 85 fc
	fe ff ff	 movq	 QWORD PTR _us$[ebp], xmm0
  0003c	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  00041	66 0f d6 85 04
	ff ff ff	 movq	 QWORD PTR _us$[ebp+8], xmm0
  00049	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0004e	66 0f d6 85 0c
	ff ff ff	 movq	 QWORD PTR _us$[ebp+16], xmm0
  00056	f3 0f 7e 40 18	 movq	 xmm0, QWORD PTR [eax+24]
  0005b	66 0f d6 85 14
	ff ff ff	 movq	 QWORD PTR _us$[ebp+24], xmm0
  00063	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00068	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0006b	66 0f d6 85 1c
	ff ff ff	 movq	 QWORD PTR _us$[ebp+32], xmm0
  00073	89 85 24 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+40], eax
$LN32@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  00079	8b 45 10	 mov	 eax, DWORD PTR _is64bitOpenFunction$[ebp]

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,
; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);

  0007c	6a 05		 push	 5
  0007e	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00081	89 85 28 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+44], eax
  00087	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _call_zopen64
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	89 85 2c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+48], eax

; 620  :     if (us.filestream==NULL)

  0009c	85 c0		 test	 eax, eax
  0009e	75 05		 jne	 SHORT $LN31@unzOpenInt
  000a0	5e		 pop	 esi

; 762  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN31@unzOpenInt:
  000a5	53		 push	 ebx
  000a6	57		 push	 edi

; 621  :         return NULL;
; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  000a7	50		 push	 eax
  000a8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir64
  000b4	8b f8		 mov	 edi, eax
  000b6	8b da		 mov	 ebx, edx

; 624  :     if (central_pos)

  000b8	8b cf		 mov	 ecx, edi
  000ba	83 c4 08	 add	 esp, 8
  000bd	0b cb		 or	 ecx, ebx

; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;
; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000bf	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  000c5	0f 84 9d 01 00
	00		 je	 $LN30@unzOpenInt
  000cb	6a 00		 push	 0
  000cd	53		 push	 ebx
  000ce	57		 push	 edi
  000cf	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  000d5	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 1
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _call_zseek64
  000e2	83 c9 ff	 or	 ecx, -1
  000e5	85 c0		 test	 eax, eax

; 633  :         err=UNZ_ERRNO;
; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000e7	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  000ea	50		 push	 eax
  000eb	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  000f1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  000f7	50		 push	 eax
  000f8	0f 45 f1	 cmovne	 esi, ecx
  000fb	e8 00 00 00 00	 call	 _unz64local_getLong
  00100	85 c0		 test	 eax, eax
  00102	b8 ff ff ff ff	 mov	 eax, -1
  00107	0f 45 f0	 cmovne	 esi, eax

; 637  :             err=UNZ_ERRNO;
; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  0010a	8d 45 ec	 lea	 eax, DWORD PTR _uL64$1[ebp]
  0010d	50		 push	 eax
  0010e	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00114	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _unz64local_getLong64
  00120	85 c0		 test	 eax, eax
  00122	b8 ff ff ff ff	 mov	 eax, -1
  00127	0f 45 f0	 cmovne	 esi, eax

; 641  :             err=UNZ_ERRNO;
; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  0012a	8d 45 f0	 lea	 eax, DWORD PTR _uS$2[ebp]
  0012d	50		 push	 eax
  0012e	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00134	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _unz64local_getShort
  00140	85 c0		 test	 eax, eax
  00142	b8 ff ff ff ff	 mov	 eax, -1
  00147	0f 45 f0	 cmovne	 esi, eax

; 645  :             err=UNZ_ERRNO;
; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  0014a	8d 45 f0	 lea	 eax, DWORD PTR _uS$2[ebp]
  0014d	50		 push	 eax
  0014e	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00154	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _unz64local_getShort
  00160	83 c4 44	 add	 esp, 68			; 00000044H
  00163	85 c0		 test	 eax, eax
  00165	b8 ff ff ff ff	 mov	 eax, -1
  0016a	0f 45 f0	 cmovne	 esi, eax

; 649  :             err=UNZ_ERRNO;
; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  0016d	8d 45 f0	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00170	50		 push	 eax
  00171	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00177	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _unz64local_getLong
  00183	85 c0		 test	 eax, eax
  00185	b8 ff ff ff ff	 mov	 eax, -1
  0018a	0f 45 f0	 cmovne	 esi, eax

; 653  :             err=UNZ_ERRNO;
; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  0018d	8d 45 f4	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00190	50		 push	 eax
  00191	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00197	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 _unz64local_getLong
  001a3	85 c0		 test	 eax, eax
  001a5	b8 ff ff ff ff	 mov	 eax, -1
  001aa	0f 45 f0	 cmovne	 esi, eax

; 657  :             err=UNZ_ERRNO;
; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  001ad	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+56]
  001b3	50		 push	 eax
  001b4	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  001ba	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 _unz64local_getLong64
  001c6	85 c0		 test	 eax, eax
  001c8	b8 ff ff ff ff	 mov	 eax, -1
  001cd	0f 45 f0	 cmovne	 esi, eax

; 661  :             err=UNZ_ERRNO;
; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  001d0	8d 45 f8	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  001d3	50		 push	 eax
  001d4	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  001da	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _unz64local_getLong64
  001e6	83 c4 30	 add	 esp, 48			; 00000030H
  001e9	85 c0		 test	 eax, eax
  001eb	b8 ff ff ff ff	 mov	 eax, -1
  001f0	0f 45 f0	 cmovne	 esi, eax

; 665  :             err=UNZ_ERRNO;
; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||
; 669  :             (number_disk!=0))

  001f3	8b 45 f8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  001f6	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+56]
  001fc	75 17		 jne	 SHORT $LN19@unzOpenInt
  001fe	8b 45 fc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  00201	3b 85 38 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+60]
  00207	75 0c		 jne	 SHORT $LN19@unzOpenInt
  00209	83 7d f4 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0020d	75 06		 jne	 SHORT $LN19@unzOpenInt
  0020f	83 7d f0 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00213	74 05		 je	 SHORT $LN20@unzOpenInt
$LN19@unzOpenInt:

; 670  :             err=UNZ_BADZIPFILE;

  00215	be 99 ff ff ff	 mov	 esi, -103		; ffffff99H
$LN20@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  0021a	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+112]
  00220	50		 push	 eax
  00221	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00227	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _unz64local_getLong64
  00233	85 c0		 test	 eax, eax
  00235	b8 ff ff ff ff	 mov	 eax, -1
  0023a	0f 45 f0	 cmovne	 esi, eax

; 674  :             err=UNZ_ERRNO;
; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  0023d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+120]
  00243	50		 push	 eax
  00244	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  0024a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 _unz64local_getLong64
  00256	83 c4 18	 add	 esp, 24			; 00000018H

; 679  :             err=UNZ_ERRNO;
; 680  : 
; 681  :         us.gi.size_comment = 0;

  00259	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+64], 0

; 682  :     }
; 683  :     else

  00263	e9 9e 01 00 00	 jmp	 $LN41@unzOpenInt
$LN30@unzOpenInt:

; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  00268	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir
  00274	8b da		 mov	 ebx, edx
  00276	83 c4 08	 add	 esp, 8
  00279	8b f8		 mov	 edi, eax

; 686  :         if (central_pos==0)

  0027b	0b c3		 or	 eax, ebx
  0027d	75 03		 jne	 SHORT $LN15@unzOpenInt

; 687  :             err=UNZ_ERRNO;

  0027f	83 ce ff	 or	 esi, -1
$LN15@unzOpenInt:

; 688  : 
; 689  :         us.isZip64 = 0;
; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00282	6a 00		 push	 0
  00284	53		 push	 ebx
  00285	57		 push	 edi
  00286	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  0028c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00292	50		 push	 eax
  00293	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 0
  0029a	e8 00 00 00 00	 call	 _call_zseek64
  0029f	83 c9 ff	 or	 ecx, -1
  002a2	85 c0		 test	 eax, eax

; 693  :             err=UNZ_ERRNO;
; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002a4	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  002a7	50		 push	 eax
  002a8	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  002ae	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002b4	50		 push	 eax
  002b5	0f 45 f1	 cmovne	 esi, ecx
  002b8	e8 00 00 00 00	 call	 _unz64local_getLong
  002bd	85 c0		 test	 eax, eax
  002bf	b8 ff ff ff ff	 mov	 eax, -1
  002c4	0f 45 f0	 cmovne	 esi, eax

; 697  :             err=UNZ_ERRNO;
; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  002c7	8d 45 f0	 lea	 eax, DWORD PTR _number_disk$[ebp]
  002ca	50		 push	 eax
  002cb	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  002d1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _unz64local_getShort
  002dd	85 c0		 test	 eax, eax
  002df	b8 ff ff ff ff	 mov	 eax, -1
  002e4	0f 45 f0	 cmovne	 esi, eax

; 701  :             err=UNZ_ERRNO;
; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  002e7	8d 45 f4	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  002ea	50		 push	 eax
  002eb	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  002f1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _unz64local_getShort
  002fd	85 c0		 test	 eax, eax
  002ff	b8 ff ff ff ff	 mov	 eax, -1
  00304	0f 45 f0	 cmovne	 esi, eax

; 705  :             err=UNZ_ERRNO;
; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00307	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0030a	50		 push	 eax
  0030b	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  00311	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00317	50		 push	 eax
  00318	e8 00 00 00 00	 call	 _unz64local_getShort
  0031d	83 c4 44	 add	 esp, 68			; 00000044H
  00320	85 c0		 test	 eax, eax
  00322	b8 ff ff ff ff	 mov	 eax, -1
  00327	0f 45 f0	 cmovne	 esi, eax

; 709  :             err=UNZ_ERRNO;
; 710  :         us.gi.number_entry = uL;

  0032a	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  0032d	89 85 34 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+56], eax

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00333	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00336	50		 push	 eax
  00337	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  0033d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00343	50		 push	 eax
  00344	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+60], 0
  0034e	e8 00 00 00 00	 call	 _unz64local_getShort
  00353	83 c4 0c	 add	 esp, 12			; 0000000cH
  00356	85 c0		 test	 eax, eax
  00358	b8 ff ff ff ff	 mov	 eax, -1
  0035d	0f 45 f0	 cmovne	 esi, eax

; 714  :             err=UNZ_ERRNO;
; 715  :         number_entry_CD = uL;

  00360	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  00363	33 c9		 xor	 ecx, ecx

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||
; 719  :             (number_disk!=0))

  00365	3b 85 34 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+56]
  0036b	75 12		 jne	 SHORT $LN7@unzOpenInt
  0036d	3b 8d 38 ff ff
	ff		 cmp	 ecx, DWORD PTR _us$[ebp+60]
  00373	75 0a		 jne	 SHORT $LN7@unzOpenInt
  00375	39 4d f4	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], ecx
  00378	75 05		 jne	 SHORT $LN7@unzOpenInt
  0037a	39 4d f0	 cmp	 DWORD PTR _number_disk$[ebp], ecx
  0037d	74 05		 je	 SHORT $LN8@unzOpenInt
$LN7@unzOpenInt:

; 720  :             err=UNZ_BADZIPFILE;

  0037f	be 99 ff ff ff	 mov	 esi, -103		; ffffff99H
$LN8@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00384	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00387	50		 push	 eax
  00388	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  0038e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 _unz64local_getLong
  0039a	85 c0		 test	 eax, eax
  0039c	b8 ff ff ff ff	 mov	 eax, -1
  003a1	0f 45 f0	 cmovne	 esi, eax

; 724  :             err=UNZ_ERRNO;
; 725  :         us.size_central_dir = uL;

  003a4	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  003a7	89 85 6c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+112], eax

; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  003ad	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  003b0	50		 push	 eax
  003b1	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  003b7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  003bd	50		 push	 eax
  003be	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+116], 0
  003c8	e8 00 00 00 00	 call	 _unz64local_getLong
  003cd	85 c0		 test	 eax, eax
  003cf	b8 ff ff ff ff	 mov	 eax, -1
  003d4	0f 45 f0	 cmovne	 esi, eax

; 730  :             err=UNZ_ERRNO;
; 731  :         us.offset_central_dir = uL;

  003d7	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  003da	89 85 74 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+120], eax

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  003e0	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+64]
  003e6	50		 push	 eax
  003e7	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  003ed	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  003f3	50		 push	 eax
  003f4	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+124], 0
  003fe	e8 00 00 00 00	 call	 _unz64local_getShort
  00403	83 c4 24	 add	 esp, 36			; 00000024H
$LN41@unzOpenInt:

; 735  :             err=UNZ_ERRNO;
; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
; 739  :         (err==UNZ_OK))

  00406	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+120]
  0040c	85 c0		 test	 eax, eax
  0040e	b8 ff ff ff ff	 mov	 eax, -1
  00413	0f 45 f0	 cmovne	 esi, eax
  00416	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+124]
  0041c	8b ca		 mov	 ecx, edx
  0041e	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _us$[ebp+112]
  00424	13 85 70 ff ff
	ff		 adc	 eax, DWORD PTR _us$[ebp+116]
  0042a	3b d8		 cmp	 ebx, eax
  0042c	72 74		 jb	 SHORT $LN37@unzOpenInt
  0042e	77 04		 ja	 SHORT $LN38@unzOpenInt
  00430	3b f9		 cmp	 edi, ecx
  00432	72 6e		 jb	 SHORT $LN37@unzOpenInt
$LN38@unzOpenInt:

; 740  :         err=UNZ_BADZIPFILE;
; 741  : 
; 742  :     if (err!=UNZ_OK)

  00434	85 f6		 test	 esi, esi
  00436	75 6a		 jne	 SHORT $LN37@unzOpenInt

; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -
; 749  :                             (us.offset_central_dir+us.size_central_dir);

  00438	8b cf		 mov	 ecx, edi
  0043a	2b ca		 sub	 ecx, edx
  0043c	8b c3		 mov	 eax, ebx
  0043e	1b 85 78 ff ff
	ff		 sbb	 eax, DWORD PTR _us$[ebp+124]
  00444	2b 8d 6c ff ff
	ff		 sub	 ecx, DWORD PTR _us$[ebp+112]

; 750  :     us.central_pos = central_pos;
; 751  :     us.pfile_in_zip_read = NULL;
; 752  :     us.encrypted = 0;
; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  0044a	68 f0 00 00 00	 push	 240			; 000000f0H
  0044f	1b 85 70 ff ff
	ff		 sbb	 eax, DWORD PTR _us$[ebp+116]
  00455	89 8d 44 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+72], ecx
  0045b	89 85 48 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+76], eax
  00461	89 bd 64 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+104], edi
  00467	89 9d 68 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+108], ebx
  0046d	89 75 dc	 mov	 DWORD PTR _us$[ebp+224], esi
  00470	89 75 e0	 mov	 DWORD PTR _us$[ebp+228], esi
  00473	e8 00 00 00 00	 call	 _malloc
  00478	8b d8		 mov	 ebx, eax
  0047a	83 c4 04	 add	 esp, 4

; 756  :     if( s != NULL)

  0047d	85 db		 test	 ebx, ebx
  0047f	74 18		 je	 SHORT $LN1@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  00481	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00486	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _us$[ebp]
  0048c	8b fb		 mov	 edi, ebx

; 759  :         unzGoToFirstFile((unzFile)s);

  0048e	53		 push	 ebx
  0048f	f3 a5		 rep movsd
  00491	e8 00 00 00 00	 call	 _unzGoToFirstFile
  00496	83 c4 04	 add	 esp, 4
$LN1@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  00499	5f		 pop	 edi
  0049a	8b c3		 mov	 eax, ebx
  0049c	5b		 pop	 ebx
  0049d	5e		 pop	 esi

; 762  : }

  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c3		 ret	 0
$LN37@unzOpenInt:

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  004a2	ff b5 2c ff ff
	ff		 push	 DWORD PTR _us$[ebp+48]
  004a8	ff b5 18 ff ff
	ff		 push	 DWORD PTR _us$[ebp+28]
  004ae	ff 95 10 ff ff
	ff		 call	 DWORD PTR _us$[ebp+20]
  004b4	83 c4 08	 add	 esp, 8

; 745  :         return NULL;

  004b7	33 c0		 xor	 eax, eax
  004b9	5f		 pop	 edi
  004ba	5b		 pop	 ebx
  004bb	5e		 pop	 esi

; 762  : }

  004bc	8b e5		 mov	 esp, ebp
  004be	5d		 pop	 ebp
  004bf	c3		 ret	 0
_unzOpenInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir64
_TEXT	SEGMENT
_relativeOffset$ = -40					; size = 8
_uPosFound$ = -40					; size = 8
_uReadPos$1$ = -36					; size = 4
_uBackRead$2$ = -32					; size = 4
_uReadPos$2$ = -28					; size = 4
_uSizeFile$1$ = -24					; size = 4
_uSizeFile$2$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$2$ = -8					; size = 4
_uMaxBack$1$ = -4					; size = 4
_uL$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir64 PROC			; COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 485  :     ZPOS64_T uPosFound=0;
; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
  0000e	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00013	6a 02		 push	 2
  00015	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00018	33 c0		 xor	 eax, eax
  0001a	50		 push	 eax
  0001b	50		 push	 eax
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	89 45 f8	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00024	66 0f 13 45 d8	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  00029	e8 00 00 00 00	 call	 _call_zseek64
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	85 c0		 test	 eax, eax
  00033	74 0a		 je	 SHORT $LN25@unz64local

; 490  :         return 0;

  00035	5f		 pop	 edi
  00036	33 c0		 xor	 eax, eax
  00038	33 d2		 xor	 edx, edx
  0003a	5b		 pop	 ebx

; 573  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN25@unz64local:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003f	57		 push	 edi
  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 _call_ztell64
  00046	8b ca		 mov	 ecx, edx
  00048	83 c4 08	 add	 esp, 8
  0004b	89 45 e8	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004e	89 4d ec	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)

  00051	85 c9		 test	 ecx, ecx
  00053	77 0f		 ja	 SHORT $LN24@unz64local
  00055	72 07		 jb	 SHORT $LN40@unz64local
  00057	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005c	73 06		 jae	 SHORT $LN24@unz64local
$LN40@unz64local:

; 496  :         uMaxBack = uSizeFile;

  0005e	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00061	89 4d f8	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN24@unz64local:

; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00064	56		 push	 esi
  00065	68 04 04 00 00	 push	 1028			; 00000404H
  0006a	e8 00 00 00 00	 call	 _malloc
  0006f	8b f0		 mov	 esi, eax
  00071	83 c4 04	 add	 esp, 4

; 499  :     if (buf==NULL)
; 500  :         return 0;

  00074	33 c0		 xor	 eax, eax
  00076	85 f6		 test	 esi, esi
  00078	0f 84 ca 01 00
	00		 je	 $LN57@unz64local

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  0007e	8b 55 f8	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  00081	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00084	3b c2		 cmp	 eax, edx
  00086	0f 87 c5 01 00
	00		 ja	 $LN47@unz64local
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  0008f	72 08		 jb	 SHORT $LN45@unz64local
  00091	3b d9		 cmp	 ebx, ecx
  00093	0f 83 b8 01 00
	00		 jae	 $LN47@unz64local
$LN45@unz64local:
  00099	8b 7d dc	 mov	 edi, DWORD PTR _uPosFound$[ebp+4]
  0009c	89 7d f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0009f	8b 7d d8	 mov	 edi, DWORD PTR _uPosFound$[ebp]
  000a2	89 7d f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edi
  000a5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL22@unz64local:

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000b0	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000b6	83 d0 00	 adc	 eax, 0
  000b9	89 45 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000bc	3b c2		 cmp	 eax, edx
  000be	72 0d		 jb	 SHORT $LN20@unz64local
  000c0	77 04		 ja	 SHORT $LN42@unz64local
  000c2	3b d9		 cmp	 ebx, ecx
  000c4	76 07		 jbe	 SHORT $LN20@unz64local
$LN42@unz64local:

; 509  :             uBackRead = uMaxBack;

  000c6	8b d9		 mov	 ebx, ecx
  000c8	8b c2		 mov	 eax, edx
  000ca	89 55 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], edx
$LN20@unz64local:

; 510  :         else
; 511  :             uBackRead+=BUFREADCOMMENT;
; 512  :         uReadPos = uSizeFile-uBackRead ;

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000d0	8b 7d ec	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000d3	8b d1		 mov	 edx, ecx
  000d5	2b d3		 sub	 edx, ebx
  000d7	1b f8		 sbb	 edi, eax

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000d9	8b 45 ec	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000dc	2b ca		 sub	 ecx, edx
  000de	1b c7		 sbb	 eax, edi
  000e0	89 55 dc	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000e3	89 7d e4	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000e6	85 c0		 test	 eax, eax
  000e8	72 11		 jb	 SHORT $LN28@unz64local
  000ea	77 08		 ja	 SHORT $LN43@unz64local
  000ec	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000f2	76 07		 jbe	 SHORT $LN28@unz64local
$LN43@unz64local:
  000f4	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000f9	eb 05		 jmp	 SHORT $LN29@unz64local
$LN28@unz64local:
  000fb	8b 7d e8	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000fe	2b fa		 sub	 edi, edx
$LN29@unz64local:

; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00100	6a 00		 push	 0
  00102	ff 75 e4	 push	 DWORD PTR _uReadPos$2$[ebp]
  00105	52		 push	 edx
  00106	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00109	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0010c	e8 00 00 00 00	 call	 _call_zseek64
  00111	83 c4 14	 add	 esp, 20			; 00000014H
  00114	85 c0		 test	 eax, eax
  00116	75 70		 jne	 SHORT $LN52@unz64local

; 517  :             break;
; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00118	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0011b	57		 push	 edi
  0011c	56		 push	 esi
  0011d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00120	ff 70 1c	 push	 DWORD PTR [eax+28]
  00123	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00126	ff d0		 call	 eax
  00128	83 c4 10	 add	 esp, 16			; 00000010H
  0012b	3b c7		 cmp	 eax, edi
  0012d	75 59		 jne	 SHORT $LN52@unz64local

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  0012f	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00132	85 c0		 test	 eax, eax
  00134	7e 37		 jle	 SHORT $LN48@unz64local
$LL16@unz64local:
  00136	48		 dec	 eax

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00137	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  0013b	75 15		 jne	 SHORT $LN14@unz64local
  0013d	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  00142	75 0e		 jne	 SHORT $LN14@unz64local
  00144	80 7c 30 02 06	 cmp	 BYTE PTR [eax+esi+2], 6
  00149	75 07		 jne	 SHORT $LN14@unz64local
  0014b	80 7c 30 03 07	 cmp	 BYTE PTR [eax+esi+3], 7
  00150	74 06		 je	 SHORT $LN32@unz64local
$LN14@unz64local:

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  00152	85 c0		 test	 eax, eax
  00154	7f e0		 jg	 SHORT $LL16@unz64local
  00156	eb 15		 jmp	 SHORT $LN48@unz64local
$LN32@unz64local:

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  00158	99		 cdq
  00159	03 45 dc	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  0015c	8b fa		 mov	 edi, edx
  0015e	13 7d e4	 adc	 edi, DWORD PTR _uReadPos$2$[ebp]

; 527  :                 break;
; 528  :             }
; 529  : 
; 530  :         if (uPosFound!=0)

  00161	8b c8		 mov	 ecx, eax
  00163	0b cf		 or	 ecx, edi
  00165	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  00168	89 7d f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0016b	75 1b		 jne	 SHORT $LN52@unz64local
$LN48@unz64local:

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  0016d	8b 45 e0	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  00170	8b 55 f8	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  00176	3b c2		 cmp	 eax, edx
  00178	0f 82 32 ff ff
	ff		 jb	 $LL22@unz64local
  0017e	77 08		 ja	 SHORT $LN52@unz64local
  00180	3b d9		 cmp	 ebx, ecx
  00182	0f 82 28 ff ff
	ff		 jb	 $LL22@unz64local
$LN52@unz64local:
  00188	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
$LN44@unz64local:

; 531  :             break;
; 532  :     }
; 533  :     TRYFREE(buf);

  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 _free

; 534  :     if (uPosFound == 0)

  00191	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$2$[ebp]
  00194	8b 4d f0	 mov	 ecx, DWORD PTR _uPosFound$1$[ebp]
  00197	8b c2		 mov	 eax, edx
  00199	83 c4 04	 add	 esp, 4
  0019c	0b c1		 or	 eax, ecx
  0019e	0f 84 a2 00 00
	00		 je	 $LN56@unz64local

; 535  :         return 0;
; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001a4	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  001a7	6a 00		 push	 0
  001a9	51		 push	 ecx
  001aa	52		 push	 edx
  001ab	57		 push	 edi
  001ac	53		 push	 ebx
  001ad	e8 00 00 00 00	 call	 _call_zseek64
  001b2	83 c4 14	 add	 esp, 20			; 00000014H
  001b5	85 c0		 test	 eax, eax
  001b7	0f 85 89 00 00
	00		 jne	 $LN56@unz64local

; 539  :         return 0;
; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001bd	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001c0	50		 push	 eax
  001c1	57		 push	 edi
  001c2	53		 push	 ebx
  001c3	e8 00 00 00 00	 call	 _unz64local_getLong
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	85 c0		 test	 eax, eax
  001cd	75 77		 jne	 SHORT $LN56@unz64local

; 543  :         return 0;
; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001cf	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001d2	50		 push	 eax
  001d3	57		 push	 edi
  001d4	53		 push	 ebx
  001d5	e8 00 00 00 00	 call	 _unz64local_getLong
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH
  001dd	85 c0		 test	 eax, eax
  001df	75 65		 jne	 SHORT $LN56@unz64local

; 547  :         return 0;
; 548  :     if (uL != 0)

  001e1	39 45 fc	 cmp	 DWORD PTR _uL$[ebp], eax
  001e4	75 60		 jne	 SHORT $LN56@unz64local

; 549  :         return 0;
; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  001e6	8d 45 d8	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  001e9	50		 push	 eax
  001ea	57		 push	 edi
  001eb	53		 push	 ebx
  001ec	e8 00 00 00 00	 call	 _unz64local_getLong64
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f4	85 c0		 test	 eax, eax
  001f6	75 4e		 jne	 SHORT $LN56@unz64local

; 553  :         return 0;
; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001f8	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001fb	50		 push	 eax
  001fc	57		 push	 edi
  001fd	53		 push	 ebx
  001fe	e8 00 00 00 00	 call	 _unz64local_getLong
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH
  00206	85 c0		 test	 eax, eax
  00208	75 3c		 jne	 SHORT $LN56@unz64local

; 557  :         return 0;
; 558  :     if (uL != 1)

  0020a	83 7d fc 01	 cmp	 DWORD PTR _uL$[ebp], 1
  0020e	75 36		 jne	 SHORT $LN56@unz64local

; 559  :         return 0;
; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00210	8b 75 dc	 mov	 esi, DWORD PTR _relativeOffset$[ebp+4]
  00213	8b 7d d8	 mov	 edi, DWORD PTR _relativeOffset$[ebp]
  00216	50		 push	 eax
  00217	56		 push	 esi
  00218	57		 push	 edi
  00219	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0021c	53		 push	 ebx
  0021d	e8 00 00 00 00	 call	 _call_zseek64
  00222	83 c4 14	 add	 esp, 20			; 00000014H
  00225	85 c0		 test	 eax, eax
  00227	75 1d		 jne	 SHORT $LN56@unz64local

; 563  :         return 0;
; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00229	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0022c	50		 push	 eax
  0022d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00230	53		 push	 ebx
  00231	e8 00 00 00 00	 call	 _unz64local_getLong
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH
  00239	85 c0		 test	 eax, eax
  0023b	75 09		 jne	 SHORT $LN56@unz64local

; 567  :         return 0;
; 568  : 
; 569  :     if (uL != 0x06064b50)

  0023d	81 7d fc 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  00244	74 1c		 je	 SHORT $LN1@unz64local
$LN56@unz64local:

; 570  :         return 0;

  00246	33 c0		 xor	 eax, eax
$LN57@unz64local:
  00248	5e		 pop	 esi
  00249	5f		 pop	 edi
  0024a	33 d2		 xor	 edx, edx
  0024c	5b		 pop	 ebx

; 573  : }

  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c3		 ret	 0
$LN47@unz64local:

; 501  : 
; 502  :     uBackRead = 4;
; 503  :     while (uBackRead<uMaxBack)

  00251	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  00254	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  00257	8b 45 d8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0025a	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0025d	e9 29 ff ff ff	 jmp	 $LN44@unz64local
$LN1@unz64local:

; 571  : 
; 572  :     return relativeOffset;

  00262	8b d6		 mov	 edx, esi
  00264	5e		 pop	 esi
  00265	8b c7		 mov	 eax, edi
  00267	5f		 pop	 edi
  00268	5b		 pop	 ebx

; 573  : }

  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_unz64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_SearchCentralDir
_TEXT	SEGMENT
_uPosFound$ = -40					; size = 8
_uReadPos$1$ = -36					; size = 4
_uBackRead$2$ = -32					; size = 4
_uReadPos$2$ = -28					; size = 4
_uSizeFile$1$ = -24					; size = 4
_uSizeFile$2$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uMaxBack$2$ = -4					; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir PROC			; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 419  :     ZPOS64_T uPosFound=0;
; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _filestream$[ebp]
  0000e	57		 push	 edi
  0000f	33 c0		 xor	 eax, eax
  00011	6a 02		 push	 2
  00013	50		 push	 eax
  00014	50		 push	 eax
  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	56		 push	 esi
  00019	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  0001e	53		 push	 ebx
  0001f	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00022	89 45 fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00025	66 0f 13 45 d8	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002a	e8 00 00 00 00	 call	 _call_zseek64
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	85 c0		 test	 eax, eax
  00034	74 0b		 je	 SHORT $LN14@unz64local

; 422  :         return 0;

  00036	33 c0		 xor	 eax, eax
$LN38@unz64local:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	33 d2		 xor	 edx, edx
  0003c	5b		 pop	 ebx

; 467  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN14@unz64local:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00041	56		 push	 esi
  00042	53		 push	 ebx
  00043	e8 00 00 00 00	 call	 _call_ztell64
  00048	8b ca		 mov	 ecx, edx
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 45 e8	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  00050	89 4d ec	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)

  00053	85 c9		 test	 ecx, ecx
  00055	77 11		 ja	 SHORT $LN13@unz64local
  00057	72 07		 jb	 SHORT $LN29@unz64local
  00059	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005e	73 08		 jae	 SHORT $LN13@unz64local
$LN29@unz64local:

; 428  :         uMaxBack = uSizeFile;

  00060	8b f8		 mov	 edi, eax
  00062	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00065	89 4d fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN13@unz64local:

; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00068	68 04 04 00 00	 push	 1028			; 00000404H
  0006d	e8 00 00 00 00	 call	 _malloc
  00072	8b f0		 mov	 esi, eax
  00074	83 c4 04	 add	 esp, 4

; 431  :     if (buf==NULL)
; 432  :         return 0;

  00077	33 c0		 xor	 eax, eax
  00079	85 f6		 test	 esi, esi
  0007b	74 bb		 je	 SHORT $LN38@unz64local

; 433  : 
; 434  :     uBackRead = 4;
; 435  :     while (uBackRead<uMaxBack)

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00080	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00083	3b c1		 cmp	 eax, ecx
  00085	0f 87 ec 00 00
	00		 ja	 $LN36@unz64local
  0008b	72 08		 jb	 SHORT $LN34@unz64local
  0008d	3b df		 cmp	 ebx, edi
  0008f	0f 83 e2 00 00
	00		 jae	 $LN36@unz64local
$LN34@unz64local:
  00095	8b 55 dc	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  00098	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  0009b	8b 55 d8	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  0009e	89 55 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
$LL11@unz64local:

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a1	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000a7	83 d0 00	 adc	 eax, 0
  000aa	89 45 e0	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000ad	3b c1		 cmp	 eax, ecx
  000af	72 0d		 jb	 SHORT $LN9@unz64local
  000b1	77 04		 ja	 SHORT $LN31@unz64local
  000b3	3b df		 cmp	 ebx, edi
  000b5	76 07		 jbe	 SHORT $LN9@unz64local
$LN31@unz64local:

; 441  :             uBackRead = uMaxBack;

  000b7	8b df		 mov	 ebx, edi
  000b9	8b c1		 mov	 eax, ecx
  000bb	89 4d e0	 mov	 DWORD PTR _uBackRead$2$[ebp], ecx
$LN9@unz64local:

; 442  :         else
; 443  :             uBackRead+=BUFREADCOMMENT;
; 444  :         uReadPos = uSizeFile-uBackRead ;

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _uSizeFile$1$[ebp]
  000c1	8b 7d ec	 mov	 edi, DWORD PTR _uSizeFile$2$[ebp]
  000c4	8b d1		 mov	 edx, ecx
  000c6	2b d3		 sub	 edx, ebx
  000c8	1b f8		 sbb	 edi, eax

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _uSizeFile$2$[ebp]
  000cd	2b ca		 sub	 ecx, edx
  000cf	1b c7		 sbb	 eax, edi
  000d1	89 55 dc	 mov	 DWORD PTR _uReadPos$1$[ebp], edx
  000d4	89 7d e4	 mov	 DWORD PTR _uReadPos$2$[ebp], edi
  000d7	85 c0		 test	 eax, eax
  000d9	72 11		 jb	 SHORT $LN17@unz64local
  000db	77 08		 ja	 SHORT $LN32@unz64local
  000dd	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000e3	76 07		 jbe	 SHORT $LN17@unz64local
$LN32@unz64local:
  000e5	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000ea	eb 05		 jmp	 SHORT $LN18@unz64local
$LN17@unz64local:
  000ec	8b 7d e8	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000ef	2b fa		 sub	 edi, edx
$LN18@unz64local:

; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f1	6a 00		 push	 0
  000f3	ff 75 e4	 push	 DWORD PTR _uReadPos$2$[ebp]
  000f6	52		 push	 edx
  000f7	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000fa	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000fd	e8 00 00 00 00	 call	 _call_zseek64
  00102	83 c4 14	 add	 esp, 20			; 00000014H
  00105	85 c0		 test	 eax, eax
  00107	75 7a		 jne	 SHORT $LN33@unz64local

; 449  :             break;
; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00109	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0010c	57		 push	 edi
  0010d	56		 push	 esi
  0010e	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00111	ff 70 1c	 push	 DWORD PTR [eax+28]
  00114	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00117	ff d0		 call	 eax
  00119	83 c4 10	 add	 esp, 16			; 00000010H
  0011c	3b c7		 cmp	 eax, edi
  0011e	75 63		 jne	 SHORT $LN33@unz64local

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  00120	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00123	85 c0		 test	 eax, eax
  00125	7e 33		 jle	 SHORT $LN37@unz64local
$LL5@unz64local:
  00127	48		 dec	 eax

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00128	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  0012c	75 15		 jne	 SHORT $LN3@unz64local
  0012e	80 7c 30 01 4b	 cmp	 BYTE PTR [eax+esi+1], 75 ; 0000004bH
  00133	75 0e		 jne	 SHORT $LN3@unz64local
  00135	80 7c 30 02 05	 cmp	 BYTE PTR [eax+esi+2], 5
  0013a	75 07		 jne	 SHORT $LN3@unz64local
  0013c	80 7c 30 03 06	 cmp	 BYTE PTR [eax+esi+3], 6
  00141	74 06		 je	 SHORT $LN21@unz64local
$LN3@unz64local:

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  00143	85 c0		 test	 eax, eax
  00145	7f e0		 jg	 SHORT $LL5@unz64local
  00147	eb 11		 jmp	 SHORT $LN37@unz64local
$LN21@unz64local:

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  00149	99		 cdq
  0014a	03 45 dc	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  0014d	13 55 e4	 adc	 edx, DWORD PTR _uReadPos$2$[ebp]
  00150	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax

; 459  :                 break;
; 460  :             }
; 461  : 
; 462  :         if (uPosFound!=0)

  00153	0b c2		 or	 eax, edx
  00155	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  00158	75 29		 jne	 SHORT $LN33@unz64local
$LN37@unz64local:

; 433  : 
; 434  :     uBackRead = 4;
; 435  :     while (uBackRead<uMaxBack)

  0015a	8b 45 e0	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00160	8b 7d f8	 mov	 edi, DWORD PTR _uMaxBack$1$[ebp]
  00163	3b c1		 cmp	 eax, ecx
  00165	0f 82 36 ff ff
	ff		 jb	 $LL11@unz64local
  0016b	77 16		 ja	 SHORT $LN33@unz64local
  0016d	3b df		 cmp	 ebx, edi
  0016f	0f 82 2c ff ff
	ff		 jb	 $LL11@unz64local
  00175	eb 0c		 jmp	 SHORT $LN33@unz64local
$LN36@unz64local:
  00177	8b 45 dc	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  0017a	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  0017d	8b 45 d8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00180	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
$LN33@unz64local:

; 463  :             break;
; 464  :     }
; 465  :     TRYFREE(buf);

  00183	56		 push	 esi
  00184	e8 00 00 00 00	 call	 _free

; 466  :     return uPosFound;

  00189	8b 45 f4	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  0018c	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]
  0018f	83 c4 04	 add	 esp, 4
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	5b		 pop	 ebx

; 467  : }

  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
_unz64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _strcmpcasenosensitive_internal
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_strcmpcasenosensitive_internal PROC			; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 367  :     }

  00004	8b 75 0c	 mov	 esi, DWORD PTR _fileName2$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _fileName1$[ebp]
  0000b	2b fe		 sub	 edi, esi
  0000d	8d 49 00	 npad	 3
$LL8@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);
; 354  :         char c2=*(fileName2++);

  00010	8a 14 37	 mov	 dl, BYTE PTR [edi+esi]
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	8d 76 01	 lea	 esi, DWORD PTR [esi+1]

; 355  :         if ((c1>='a') && (c1<='z'))

  00018	8d 4a 9f	 lea	 ecx, DWORD PTR [edx-97]
  0001b	80 f9 19	 cmp	 cl, 25			; 00000019H
  0001e	77 03		 ja	 SHORT $LN6@strcmpcase

; 356  :             c1 -= 0x20;

  00020	80 c2 e0	 add	 dl, -32			; ffffffe0H
$LN6@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  00023	8d 48 9f	 lea	 ecx, DWORD PTR [eax-97]
  00026	80 f9 19	 cmp	 cl, 25			; 00000019H
  00029	77 02		 ja	 SHORT $LN5@strcmpcase

; 358  :             c2 -= 0x20;

  0002b	04 e0		 add	 al, -32			; ffffffe0H
$LN5@strcmpcase:

; 359  :         if (c1=='\0')

  0002d	84 d2		 test	 dl, dl
  0002f	74 1a		 je	 SHORT $LN13@strcmpcase

; 361  :         if (c2=='\0')

  00031	84 c0		 test	 al, al
  00033	74 06		 je	 SHORT $LN14@strcmpcase

; 362  :             return 1;
; 363  :         if (c1<c2)

  00035	3a d0		 cmp	 dl, al
  00037	7c 0b		 jl	 SHORT $LN15@strcmpcase

; 365  :         if (c1>c2)

  00039	7e d5		 jle	 SHORT $LL8@strcmpcase
$LN14@strcmpcase:
  0003b	5f		 pop	 edi

; 366  :             return 1;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi

; 368  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN15@strcmpcase:
  00044	5f		 pop	 edi

; 364  :             return -1;

  00045	83 c8 ff	 or	 eax, -1
  00048	5e		 pop	 esi

; 368  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN13@strcmpcase:

; 360  :             return ((c2=='\0') ? 0 : -1);

  0004b	0f be c0	 movsx	 eax, al
  0004e	f7 d8		 neg	 eax
  00050	5f		 pop	 edi
  00051	1b c0		 sbb	 eax, eax
  00053	5e		 pop	 esi

; 368  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong64
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong64 PROC				; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;
; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	e8 00 00 00 00	 call	 _unz64local_getByte

; 311  :     x = (ZPOS64_T)i;

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00020	8b f0		 mov	 esi, eax
  00022	8b c1		 mov	 eax, ecx
  00024	99		 cdq
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	8b f8		 mov	 edi, eax
  0002a	8b da		 mov	 ebx, edx

; 312  : 
; 313  :     if (err==UNZ_OK)

  0002c	85 f6		 test	 esi, esi
  0002e	75 17		 jne	 SHORT $LN9@unz64local

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00033	50		 push	 eax
  00034	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00037	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0003a	e8 00 00 00 00	 call	 _unz64local_getByte
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	8b f0		 mov	 esi, eax
$LN9@unz64local:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  00047	8b c1		 mov	 eax, ecx
  00049	99		 cdq
  0004a	0f a4 c2 08	 shld	 edx, eax, 8
  0004e	c1 e0 08	 shl	 eax, 8
  00051	0b f8		 or	 edi, eax
  00053	0b da		 or	 ebx, edx

; 316  : 
; 317  :     if (err==UNZ_OK)

  00055	85 f6		 test	 esi, esi
  00057	75 17		 jne	 SHORT $LN8@unz64local

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00059	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0005c	50		 push	 eax
  0005d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00060	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00063	e8 00 00 00 00	 call	 _unz64local_getByte
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	8b f0		 mov	 esi, eax
$LN8@unz64local:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  00070	8b c1		 mov	 eax, ecx
  00072	99		 cdq
  00073	0f a4 c2 10	 shld	 edx, eax, 16
  00077	c1 e0 10	 shl	 eax, 16			; 00000010H
  0007a	0b f8		 or	 edi, eax
  0007c	0b da		 or	 ebx, edx

; 320  : 
; 321  :     if (err==UNZ_OK)

  0007e	85 f6		 test	 esi, esi
  00080	75 17		 jne	 SHORT $LN7@unz64local

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00082	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00085	50		 push	 eax
  00086	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00089	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0008c	e8 00 00 00 00	 call	 _unz64local_getByte
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b f0		 mov	 esi, eax
$LN7@unz64local:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  00099	8b c1		 mov	 eax, ecx
  0009b	99		 cdq
  0009c	0f a4 c2 18	 shld	 edx, eax, 24
  000a0	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a3	0b f8		 or	 edi, eax
  000a5	0b da		 or	 ebx, edx

; 324  : 
; 325  :     if (err==UNZ_OK)

  000a7	85 f6		 test	 esi, esi
  000a9	75 17		 jne	 SHORT $LN6@unz64local

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000ab	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000ae	50		 push	 eax
  000af	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000b2	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000b5	e8 00 00 00 00	 call	 _unz64local_getByte
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	8b f0		 mov	 esi, eax
$LN6@unz64local:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  000c2	8b c1		 mov	 eax, ecx
  000c4	99		 cdq
  000c5	0b d8		 or	 ebx, eax

; 328  : 
; 329  :     if (err==UNZ_OK)

  000c7	85 f6		 test	 esi, esi
  000c9	75 17		 jne	 SHORT $LN5@unz64local

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000cb	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000ce	50		 push	 eax
  000cf	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000d2	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000d5	e8 00 00 00 00	 call	 _unz64local_getByte
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e0	8b f0		 mov	 esi, eax
$LN5@unz64local:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  000e2	8b c1		 mov	 eax, ecx
  000e4	99		 cdq
  000e5	c1 e0 08	 shl	 eax, 8
  000e8	0b d8		 or	 ebx, eax

; 332  : 
; 333  :     if (err==UNZ_OK)

  000ea	85 f6		 test	 esi, esi
  000ec	75 17		 jne	 SHORT $LN4@unz64local

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000ee	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  000f1	50		 push	 eax
  000f2	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  000f5	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  000f8	e8 00 00 00 00	 call	 _unz64local_getByte
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b f0		 mov	 esi, eax
$LN4@unz64local:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  00105	8b c1		 mov	 eax, ecx
  00107	99		 cdq
  00108	c1 e0 10	 shl	 eax, 16			; 00000010H
  0010b	0b d8		 or	 ebx, eax

; 336  : 
; 337  :     if (err==UNZ_OK)

  0010d	85 f6		 test	 esi, esi
  0010f	75 36		 jne	 SHORT $LN2@unz64local

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00111	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00114	50		 push	 eax
  00115	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00118	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  0011b	e8 00 00 00 00	 call	 _unz64local_getByte
  00120	8b f0		 mov	 esi, eax
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH

; 339  :     x |= ((ZPOS64_T)i)<<56;
; 340  : 
; 341  :     if (err==UNZ_OK)

  00125	85 f6		 test	 esi, esi
  00127	75 1e		 jne	 SHORT $LN2@unz64local

; 342  :         *pX = x;

  00129	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0012c	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  0012f	99		 cdq
  00130	33 d2		 xor	 edx, edx
  00132	c1 e0 18	 shl	 eax, 24			; 00000018H
  00135	0b d7		 or	 edx, edi
  00137	0b c3		 or	 eax, ebx
  00139	5f		 pop	 edi
  0013a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 345  :     return err;

  0013d	8b c6		 mov	 eax, esi
  0013f	5e		 pop	 esi
  00140	89 11		 mov	 DWORD PTR [ecx], edx
  00142	5b		 pop	 ebx

; 346  : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
$LN2@unz64local:

; 343  :     else
; 344  :         *pX = 0;

  00147	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  0014a	5f		 pop	 edi
  0014b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00151	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 345  :     return err;

  00158	8b c6		 mov	 eax, esi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx

; 346  : }

  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
_unz64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getLong
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong PROC				; COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 270  :     uLong x ;
; 271  :     int i = 0;
; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _filestream$[ebp]
  0000d	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001a	e8 00 00 00 00	 call	 _unz64local_getByte

; 275  :     x = (uLong)i;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00022	8b d0		 mov	 edx, eax
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	8b f1		 mov	 esi, ecx

; 276  : 
; 277  :     if (err==UNZ_OK)

  00029	85 d2		 test	 edx, edx
  0002b	75 13		 jne	 SHORT $LN5@unz64local

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0002d	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00030	50		 push	 eax
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _unz64local_getByte
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	8b d0		 mov	 edx, eax
$LN5@unz64local:

; 279  :     x |= ((uLong)i)<<8;

  00040	8b c1		 mov	 eax, ecx
  00042	c1 e0 08	 shl	 eax, 8
  00045	0b f0		 or	 esi, eax

; 280  : 
; 281  :     if (err==UNZ_OK)

  00047	85 d2		 test	 edx, edx
  00049	75 13		 jne	 SHORT $LN4@unz64local

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0004b	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _unz64local_getByte
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	8b d0		 mov	 edx, eax
$LN4@unz64local:

; 283  :     x |= ((uLong)i)<<16;

  0005e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00061	0b f1		 or	 esi, ecx

; 284  : 
; 285  :     if (err==UNZ_OK)

  00063	85 d2		 test	 edx, edx
  00065	75 2a		 jne	 SHORT $LN2@unz64local

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00067	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0006a	50		 push	 eax
  0006b	57		 push	 edi
  0006c	53		 push	 ebx
  0006d	e8 00 00 00 00	 call	 _unz64local_getByte
  00072	8b d0		 mov	 edx, eax
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 287  :     x += ((uLong)i)<<24;
; 288  : 
; 289  :     if (err==UNZ_OK)

  00077	85 d2		 test	 edx, edx
  00079	75 16		 jne	 SHORT $LN2@unz64local

; 290  :         *pX = x;

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007e	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00081	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00084	5f		 pop	 edi
  00085	03 ce		 add	 ecx, esi
  00087	5e		 pop	 esi
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 293  :     return err;

  0008a	8b c2		 mov	 eax, edx
  0008c	5b		 pop	 ebx

; 294  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN2@unz64local:

; 291  :     else
; 292  :         *pX = 0;

  00091	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  :     return err;

  0009c	8b c2		 mov	 eax, edx
  0009e	5b		 pop	 ebx

; 294  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_unz64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getShort
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getShort PROC				; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 243  :     uLong x ;
; 244  :     int i = 0;
; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  00008	50		 push	 eax
  00009	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00016	e8 00 00 00 00	 call	 _unz64local_getByte

; 248  :     x = (uLong)i;

  0001b	8b 5d fc	 mov	 ebx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 
; 250  :     if (err==UNZ_OK)

  00023	85 d2		 test	 edx, edx
  00025	75 2c		 jne	 SHORT $LN2@unz64local

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00027	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002a	50		 push	 eax
  0002b	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  0002e	ff 75 08	 push	 DWORD PTR _pzlib_filefunc_def$[ebp]
  00031	e8 00 00 00 00	 call	 _unz64local_getByte
  00036	8b d0		 mov	 edx, eax
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 252  :     x |= ((uLong)i)<<8;
; 253  : 
; 254  :     if (err==UNZ_OK)

  0003b	85 d2		 test	 edx, edx
  0003d	75 14		 jne	 SHORT $LN2@unz64local

; 255  :         *pX = x;

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00042	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00045	c1 e1 08	 shl	 ecx, 8
  00048	0b cb		 or	 ecx, ebx
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 258  :     return err;

  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx

; 259  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN2@unz64local:

; 256  :     else
; 257  :         *pX = 0;

  00053	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  00056	5b		 pop	 ebx
  00057	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 258  :     return err;

  0005d	8b c2		 mov	 eax, edx

; 259  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_unz64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unz64local_getByte
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_c$ = 11						; size = 1
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_unz64local_getByte PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  00007	6a 01		 push	 1
  00009	8d 45 0b	 lea	 eax, DWORD PTR _c$[ebp]
  0000c	50		 push	 eax
  0000d	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00010	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00013	ff 76 1c	 push	 DWORD PTR [esi+28]
  00016	ff d0		 call	 eax
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 216  :     if (err==1)

  0001b	83 f8 01	 cmp	 eax, 1
  0001e	75 0e		 jne	 SHORT $LN4@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  00020	0f b6 4d 0b	 movzx	 ecx, BYTE PTR _c$[ebp]
  00024	8b 45 10	 mov	 eax, DWORD PTR _pi$[ebp]
  00027	5e		 pop	 esi
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 219  :         return UNZ_OK;

  0002a	33 c0		 xor	 eax, eax

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN4@unz64local:

; 220  :     }
; 221  :     else
; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0002e	ff 75 0c	 push	 DWORD PTR _filestream$[ebp]
  00031	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00034	ff 76 1c	 push	 DWORD PTR [esi+28]
  00037	ff d0		 call	 eax
  00039	83 c4 08	 add	 esp, 8
  0003c	f7 d8		 neg	 eax
  0003e	1b c0		 sbb	 eax, eax
  00040	5e		 pop	 esi

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_unz64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzSetOffset
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pos$ = 12						; size = 4
_unzSetOffset PROC					; COMDAT

; 2123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2124 :     return unzSetOffset64(file,pos);

  00003	6a 00		 push	 0
  00005	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000b	e8 00 00 00 00	 call	 _unzSetOffset64
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2125 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_unzSetOffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzSetOffset64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pos$ = 12						; size = 8
_unzSetOffset64 PROC					; COMDAT

; 2105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2106 :     unz64_s* s;
; 2107 :     int err;
; 2108 : 
; 2109 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN1@unzSetOffs

; 2110 :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 2120 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN1@unzSetOffs:

; 2111 :     s=(unz64_s*)file;
; 2112 : 
; 2113 :     s->pos_in_central_dir = pos;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]

; 2114 :     s->num_file = s->gi.number_entry;      /* hack */
; 2115 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 2116 :                                               &s->cur_file_info_internal,
; 2117 :                                               NULL,0,NULL,0,NULL,0);

  00014	6a 00		 push	 0
  00016	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00019	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp+4]
  0001c	6a 00		 push	 0
  0001e	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00021	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	89 46 50	 mov	 DWORD PTR [esi+80], eax
  0002b	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0002e	6a 00		 push	 0
  00030	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00033	6a 00		 push	 0
  00035	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  0003b	50		 push	 eax
  0003c	8d 86 80 00 00
	00		 lea	 eax, DWORD PTR [esi+128]
  00042	50		 push	 eax
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00049	8b c8		 mov	 ecx, eax

; 2118 :     s->current_file_ok = (err == UNZ_OK);

  0004b	33 c0		 xor	 eax, eax
  0004d	83 c4 24	 add	 esp, 36			; 00000024H
  00050	85 c9		 test	 ecx, ecx
  00052	0f 94 c0	 sete	 al
  00055	99		 cdq
  00056	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00059	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 2119 :     return err;

  0005c	8b c1		 mov	 eax, ecx
  0005e	5e		 pop	 esi

; 2120 : }

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_unzSetOffset64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetOffset
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGetOffset PROC					; COMDAT

; 2095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2096 :     ZPOS64_T offset64;
; 2097 : 
; 2098 :     if (file==NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 02		 jne	 SHORT $LN1@unzGetOffs

; 2101 :     return (uLong)offset64;
; 2102 : }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN1@unzGetOffs:

; 2099 :           return 0; //UNZ_PARAMERROR;
; 2100 :     offset64 = unzGetOffset64(file);

  0000c	89 45 08	 mov	 DWORD PTR _file$[ebp], eax

; 2101 :     return (uLong)offset64;
; 2102 : }

  0000f	5d		 pop	 ebp

; 2099 :           return 0; //UNZ_PARAMERROR;
; 2100 :     offset64 = unzGetOffset64(file);

  00010	e9 00 00 00 00	 jmp	 _unzGetOffset64
_unzGetOffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetOffset64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGetOffset64 PROC					; COMDAT

; 2080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2081 :     unz64_s* s;
; 2082 : 
; 2083 :     if (file==NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 06		 jne	 SHORT $LN4@unzGetOffs
$LN9@unzGetOffs:

; 2084 :           return 0; //UNZ_PARAMERROR;

  0000a	33 c0		 xor	 eax, eax
  0000c	33 d2		 xor	 edx, edx

; 2092 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN4@unzGetOffs:

; 2085 :     s=(unz64_s*)file;
; 2086 :     if (!s->current_file_ok)

  00010	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00013	0b 42 64	 or	 eax, DWORD PTR [edx+100]
  00016	74 f2		 je	 SHORT $LN9@unzGetOffs

; 2087 :       return 0;
; 2088 :     if (s->gi.number_entry != 0 && s->gi.number_entry != 0xffff)

  00018	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  0001b	56		 push	 esi
  0001c	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  0001f	8b c6		 mov	 eax, esi
  00021	0b c1		 or	 eax, ecx
  00023	74 1d		 je	 SHORT $LN1@unzGetOffs
  00025	81 fe ff ff 00
	00		 cmp	 esi, 65535		; 0000ffffH
  0002b	75 04		 jne	 SHORT $LN7@unzGetOffs
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 11		 je	 SHORT $LN1@unzGetOffs
$LN7@unzGetOffs:

; 2089 :       if (s->num_file==s->gi.number_entry)

  00031	39 72 50	 cmp	 DWORD PTR [edx+80], esi
  00034	75 0c		 jne	 SHORT $LN1@unzGetOffs
  00036	39 4a 54	 cmp	 DWORD PTR [edx+84], ecx
  00039	75 07		 jne	 SHORT $LN1@unzGetOffs

; 2090 :          return 0;

  0003b	33 c0		 xor	 eax, eax
  0003d	33 d2		 xor	 edx, edx
  0003f	5e		 pop	 esi

; 2092 : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN1@unzGetOffs:

; 2091 :     return s->pos_in_central_dir;

  00042	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00045	8b 52 5c	 mov	 edx, DWORD PTR [edx+92]
  00048	5e		 pop	 esi

; 2092 : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_unzGetOffset64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetLocalExtrafield
_TEXT	SEGMENT
tv81 = 8						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzGetLocalExtrafield PROC				; COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 08		 jne	 SHORT $LN8@unzGetLoca
$LN14@unzGetLoca:

; 1964 :         return UNZ_PARAMERROR;

  0000b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00010	5f		 pop	 edi

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN8@unzGetLoca:

; 1965 :     s=(unz64_s*)file;
; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00013	8b bf e0 00 00
	00		 mov	 edi, DWORD PTR [edi+224]

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  00019	85 ff		 test	 edi, edi
  0001b	74 ee		 je	 SHORT $LN14@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;
; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);

  0001d	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00020	56		 push	 esi
  00021	8b 77 58	 mov	 esi, DWORD PTR [edi+88]
  00024	33 c9		 xor	 ecx, ecx
  00026	2b f2		 sub	 esi, edx
  00028	1b 4f 64	 sbb	 ecx, DWORD PTR [edi+100]

; 1973 : 
; 1974 :     if (buf==NULL)

  0002b	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0002f	74 73		 je	 SHORT $LN13@unzGetLoca

; 1975 :         return (int)size_to_read;
; 1976 : 
; 1977 :     if (len>size_to_read)

  00031	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
  0003b	39 4d 08	 cmp	 DWORD PTR tv81[ebp], ecx
  0003e	72 06		 jb	 SHORT $LN5@unzGetLoca
  00040	77 06		 ja	 SHORT $LN4@unzGetLoca
  00042	3b c6		 cmp	 eax, esi
  00044	77 02		 ja	 SHORT $LN4@unzGetLoca
$LN5@unzGetLoca:

; 1978 :         read_now = (uInt)size_to_read;
; 1979 :     else
; 1980 :         read_now = (uInt)len ;

  00046	8b f0		 mov	 esi, eax
$LN4@unzGetLoca:

; 1981 : 
; 1982 :     if (read_now==0)

  00048	85 f6		 test	 esi, esi
  0004a	75 06		 jne	 SHORT $LN3@unzGetLoca

; 1983 :         return 0;

  0004c	5e		 pop	 esi
  0004d	33 c0		 xor	 eax, eax
  0004f	5f		 pop	 edi

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN3@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00052	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00055	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00058	03 ca		 add	 ecx, edx
  0005a	13 47 64	 adc	 eax, DWORD PTR [edi+100]
  0005d	6a 00		 push	 0
  0005f	50		 push	 eax
  00060	51		 push	 ecx
  00061	ff b7 b4 00 00
	00		 push	 DWORD PTR [edi+180]
  00067	8d 87 88 00 00
	00		 lea	 eax, DWORD PTR [edi+136]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _call_zseek64
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	85 c0		 test	 eax, eax
  00078	74 07		 je	 SHORT $LN2@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  0007a	5e		 pop	 esi
  0007b	83 c8 ff	 or	 eax, -1
  0007e	5f		 pop	 edi

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN2@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  00081	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  00087	56		 push	 esi
  00088	ff 75 0c	 push	 DWORD PTR _buf$[ebp]
  0008b	ff b7 b4 00 00
	00		 push	 DWORD PTR [edi+180]
  00091	ff b7 a4 00 00
	00		 push	 DWORD PTR [edi+164]
  00097	ff d0		 call	 eax
  00099	83 c9 ff	 or	 ecx, -1
  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	3b c6		 cmp	 eax, esi
  000a1	0f 45 f1	 cmovne	 esi, ecx
$LN13@unzGetLoca:
  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5f		 pop	 edi

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_unzGetLocalExtrafield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzeof
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzeof	PROC						; COMDAT

; 1925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 07		 jne	 SHORT $LN4@unzeof
$LN7@unzeof:

; 1929 :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1940 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN4@unzeof:

; 1930 :     s=(unz64_s*)file;
; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00011	8b 89 e0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+224]

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00017	85 c9		 test	 ecx, ecx
  00019	74 ef		 je	 SHORT $LN7@unzeof

; 1934 :         return UNZ_PARAMERROR;
; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  0001b	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00021	0b 81 84 00 00
	00		 or	 eax, DWORD PTR [ecx+132]
  00027	75 07		 jne	 SHORT $LN2@unzeof

; 1937 :         return 1;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 1940 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN2@unzeof:

; 1938 :     else
; 1939 :         return 0;

  00030	33 c0		 xor	 eax, eax

; 1940 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_unzeof	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unztell64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unztell64 PROC						; COMDAT

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 08		 jne	 SHORT $LN2@unztell64
$LN5@unztell64:

; 1910 :         return (ZPOS64_T)-1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	83 ca ff	 or	 edx, -1

; 1918 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;
; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00012	8b 92 e0 00 00
	00		 mov	 edx, DWORD PTR [edx+224]

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  00018	85 d2		 test	 edx, edx
  0001a	74 ee		 je	 SHORT $LN5@unztell64

; 1915 :         return (ZPOS64_T)-1;
; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  0001c	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0001f	8b 52 6c	 mov	 edx, DWORD PTR [edx+108]

; 1918 : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_unztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unztell
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unztell PROC						; COMDAT

; 1890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 07		 jne	 SHORT $LN2@unztell
$LN5@unztell:

; 1894 :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1902 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;
; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00011	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  00017	85 c0		 test	 eax, eax
  00019	74 ef		 je	 SHORT $LN5@unztell

; 1899 :         return UNZ_PARAMERROR;
; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  0001b	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 1902 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_unztell ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzReadCurrentFile
_TEXT	SEGMENT
_uTotalOutAfter$1$ = -16				; size = 4
_bufBefore$1$ = -12					; size = 4
_err$1$ = -8						; size = 4
_iRead$1$ = -4						; size = 4
_uTotalOutBefore$1$ = 8					; size = 4
tv343 = 8						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzReadCurrentFile PROC				; COMDAT

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1686 :     int err=UNZ_OK;
; 1687 :     uInt iRead = 0;
; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	89 5d fc	 mov	 DWORD PTR _iRead$1$[ebp], ebx
  00010	85 f6		 test	 esi, esi
  00012	75 0b		 jne	 SHORT $LN28@unzReadCur
$LN52@unzReadCur:
  00014	5e		 pop	 esi

; 1691 :         return UNZ_PARAMERROR;

  00015	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001a	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN28@unzReadCur:

; 1692 :     s=(unz64_s*)file;
; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001f	8b b6 e0 00 00
	00		 mov	 esi, DWORD PTR [esi+224]

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  00025	85 f6		 test	 esi, esi
  00027	74 eb		 je	 SHORT $LN52@unzReadCur

; 1696 :         return UNZ_PARAMERROR;
; 1697 : 
; 1698 : 
; 1699 :     if ((pfile_in_zip_read_info->read_buffer == NULL))

  00029	39 1e		 cmp	 DWORD PTR [esi], ebx
  0002b	75 0b		 jne	 SHORT $LN26@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  0002d	5e		 pop	 esi
  0002e	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00033	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN26@unzReadCur:

; 1701 :     if (len==0)

  00038	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0003b	85 c9		 test	 ecx, ecx
  0003d	75 08		 jne	 SHORT $LN25@unzReadCur

; 1702 :         return 0;

  0003f	5e		 pop	 esi
  00040	33 c0		 xor	 eax, eax
  00042	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN25@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00047	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0004a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;
; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
; 1709 :         (!(pfile_in_zip_read_info->raw)))

  0004d	33 c0		 xor	 eax, eax
  0004f	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00052	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  00058	72 1b		 jb	 SHORT $LN24@unzReadCur
  0005a	77 08		 ja	 SHORT $LN44@unzReadCur
  0005c	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  00062	76 11		 jbe	 SHORT $LN24@unzReadCur
$LN44@unzReadCur:
  00064	39 86 c8 00 00
	00		 cmp	 DWORD PTR [esi+200], eax
  0006a	75 09		 jne	 SHORT $LN24@unzReadCur

; 1710 :         pfile_in_zip_read_info->stream.avail_out =
; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;

  0006c	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00072	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN24@unzReadCur:

; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&
; 1715 :          (pfile_in_zip_read_info->raw))

  00075	57		 push	 edi
  00076	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00079	33 c0		 xor	 eax, eax
  0007b	8b d7		 mov	 edx, edi
  0007d	03 56 78	 add	 edx, DWORD PTR [esi+120]
  00080	13 46 7c	 adc	 eax, DWORD PTR [esi+124]
  00083	3b d8		 cmp	 ebx, eax
  00085	72 16		 jb	 SHORT $LN31@unzReadCur
  00087	77 04		 ja	 SHORT $LN45@unzReadCur
  00089	3b ca		 cmp	 ecx, edx
  0008b	76 10		 jbe	 SHORT $LN31@unzReadCur
$LN45@unzReadCur:
  0008d	39 9e c8 00 00
	00		 cmp	 DWORD PTR [esi+200], ebx
  00093	74 08		 je	 SHORT $LN31@unzReadCur

; 1716 :         pfile_in_zip_read_info->stream.avail_out =
; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;

  00095	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00098	03 c7		 add	 eax, edi
  0009a	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN31@unzReadCur:

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  0009d	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
$LN50@unzReadCur:
  000a0	0f 86 d8 01 00
	00		 jbe	 $LN48@unzReadCur

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&
; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))

  000a6	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  000aa	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH
  000af	0f 85 9c 00 00
	00		 jne	 $LN20@unzReadCur
  000b5	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  000b8	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000bb	85 c9		 test	 ecx, ecx
  000bd	75 08		 jne	 SHORT $LN46@unzReadCur
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 8a 00 00
	00		 je	 $LN20@unzReadCur
$LN46@unzReadCur:

; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  000c7	bf 00 40 00 00	 mov	 edi, 16384		; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  000cc	85 c9		 test	 ecx, ecx
  000ce	77 11		 ja	 SHORT $LN43@unzReadCur
  000d0	72 04		 jb	 SHORT $LN47@unzReadCur
  000d2	3b c7		 cmp	 eax, edi
  000d4	73 0b		 jae	 SHORT $LN43@unzReadCur
$LN47@unzReadCur:

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  000d6	8b 7e 78	 mov	 edi, DWORD PTR [esi+120]

; 1728 :             if (uReadThis == 0)

  000d9	85 ff		 test	 edi, edi
  000db	0f 84 8a 01 00
	00		 je	 $LN33@unzReadCur
$LN43@unzReadCur:

; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  000e1	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]
  000e7	03 4e 40	 add	 ecx, DWORD PTR [esi+64]
  000ea	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  000f0	13 46 44	 adc	 eax, DWORD PTR [esi+68]
  000f3	6a 00		 push	 0
  000f5	50		 push	 eax
  000f6	51		 push	 ecx
  000f7	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  000fd	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _call_zseek64
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	85 c0		 test	 eax, eax
  0010e	0f 85 60 01 00
	00		 jne	 $LN35@unzReadCur

; 1735 :                 return UNZ_ERRNO;
; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  00114	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  0011a	57		 push	 edi
  0011b	ff 36		 push	 DWORD PTR [esi]
  0011d	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  00123	ff b6 a4 00 00
	00		 push	 DWORD PTR [esi+164]
  00129	ff d0		 call	 eax
  0012b	83 c4 10	 add	 esp, 16			; 00000010H
  0012e	3b c7		 cmp	 eax, edi
  00130	0f 85 3e 01 00
	00		 jne	 $LN35@unzReadCur

; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  00136	01 7e 40	 add	 DWORD PTR [esi+64], edi

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;
; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =
; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;

  00139	8b 06		 mov	 eax, DWORD PTR [esi]

; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  0013b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0013e	83 56 44 00	 adc	 DWORD PTR [esi+68], 0
  00142	29 7e 78	 sub	 DWORD PTR [esi+120], edi
  00145	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00148	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH
  0014d	83 5e 7c 00	 sbb	 DWORD PTR [esi+124], 0
$LN20@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  00151	8b 86 b8 00 00
	00		 mov	 eax, DWORD PTR [esi+184]
  00157	85 c0		 test	 eax, eax
  00159	0f 84 9c 00 00
	00		 je	 $LN14@unzReadCur
  0015f	83 be c8 00 00
	00 00		 cmp	 DWORD PTR [esi+200], 0
  00166	0f 85 8f 00 00
	00		 jne	 $LN14@unzReadCur

; 1794 :         }
; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  0016c	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0016f	0f 84 ed 00 00
	00		 je	 $LN2@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED
; 1838 :         else
; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;
; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  00175	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00178	89 45 08	 mov	 DWORD PTR _uTotalOutBefore$1$[ebp], eax

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 45 f4	 mov	 DWORD PTR _bufBefore$1$[ebp], eax

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  00181	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00184	6a 02		 push	 2
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 _inflate
  0018c	83 c4 08	 add	 esp, 8
  0018f	89 45 f8	 mov	 DWORD PTR _err$1$[ebp], eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  00192	85 c0		 test	 eax, eax
  00194	78 0a		 js	 SHORT $LN4@unzReadCur
  00196	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0019a	0f 45 c7	 cmovne	 eax, edi
  0019d	89 45 f8	 mov	 DWORD PTR _err$1$[ebp], eax
$LN4@unzReadCur:

; 1857 :               err = Z_DATA_ERROR;
; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  001a0	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  001a3	33 db		 xor	 ebx, ebx
  001a5	89 7d f0	 mov	 DWORD PTR _uTotalOutAfter$1$[ebp], edi

; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  001a8	2b 7d 08	 sub	 edi, DWORD PTR _uTotalOutBefore$1$[ebp]

; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =
; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));

  001ab	57		 push	 edi
  001ac	ff 75 f4	 push	 DWORD PTR _bufBefore$1$[ebp]
  001af	1b db		 sbb	 ebx, ebx
  001b1	01 7e 68	 add	 DWORD PTR [esi+104], edi
  001b4	ff 76 70	 push	 DWORD PTR [esi+112]
  001b7	11 5e 6c	 adc	 DWORD PTR [esi+108], ebx
  001ba	e8 00 00 00 00	 call	 _crc32
  001bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=
; 1869 :                 uOutThis;

  001c2	29 be 80 00 00
	00		 sub	 DWORD PTR [esi+128], edi
  001c8	89 46 70	 mov	 DWORD PTR [esi+112], eax

; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  001cb	8b 45 f0	 mov	 eax, DWORD PTR _uTotalOutAfter$1$[ebp]
  001ce	19 9e 84 00 00
	00		 sbb	 DWORD PTR [esi+132], ebx
  001d4	2b 45 08	 sub	 eax, DWORD PTR _uTotalOutBefore$1$[ebp]
  001d7	8b 5d fc	 mov	 ebx, DWORD PTR _iRead$1$[ebp]
  001da	03 d8		 add	 ebx, eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  001dc	8b 45 f8	 mov	 eax, DWORD PTR _err$1$[ebp]
  001df	89 5d fc	 mov	 DWORD PTR _iRead$1$[ebp], ebx
  001e2	83 f8 01	 cmp	 eax, 1
  001e5	0f 84 93 00 00
	00		 je	 $LN48@unzReadCur

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;
; 1875 :             if (err!=Z_OK)

  001eb	85 c0		 test	 eax, eax
  001ed	0f 85 8d 00 00
	00		 jne	 $LN49@unzReadCur

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  001f3	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  001f6	e9 a5 fe ff ff	 jmp	 $LN50@unzReadCur
$LN14@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))

  001fb	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  001fe	85 ff		 test	 edi, edi
  00200	75 08		 jne	 SHORT $LN13@unzReadCur
  00202	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00205	0b 46 7c	 or	 eax, DWORD PTR [esi+124]
  00208	74 74		 je	 SHORT $LN48@unzReadCur
$LN13@unzReadCur:

; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;
; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <
; 1773 :                             pfile_in_zip_read_info->stream.avail_in)

  0020a	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0020d	0f 42 7e 14	 cmovb	 edi, DWORD PTR [esi+20]

; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;
; 1775 :             else
; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;
; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  00211	33 d2		 xor	 edx, edx
  00213	85 ff		 test	 edi, edi
  00215	74 11		 je	 SHORT $LN8@unzReadCur
$LL10@unzReadCur:

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =
; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);

  00217	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0021d	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00220	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00223	42		 inc	 edx
  00224	3b d7		 cmp	 edx, edi
  00226	72 ef		 jb	 SHORT $LL10@unzReadCur
$LN8@unzReadCur:

; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;

  00228	01 7e 68	 add	 DWORD PTR [esi+104], edi

; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);

  0022b	57		 push	 edi
  0022c	ff 76 10	 push	 DWORD PTR [esi+16]
  0022f	83 56 6c 00	 adc	 DWORD PTR [esi+108], 0
  00233	ff 76 70	 push	 DWORD PTR [esi+112]
  00236	e8 00 00 00 00	 call	 _crc32
  0023b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  0023e	29 be 80 00 00
	00		 sub	 DWORD PTR [esi+128], edi
  00244	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00247	83 9e 84 00 00
	00 00		 sbb	 DWORD PTR [esi+132], 0

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  0024e	29 7e 08	 sub	 DWORD PTR [esi+8], edi

; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  00251	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  00254	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00257	01 7e 04	 add	 DWORD PTR [esi+4], edi

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  0025a	01 7e 18	 add	 DWORD PTR [esi+24], edi

; 1793 :             iRead += uDoCopy;

  0025d	03 df		 add	 ebx, edi
  0025f	89 5d fc	 mov	 DWORD PTR _iRead$1$[ebp], ebx
$LN2@unzReadCur:

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  00262	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00266	e9 35 fe ff ff	 jmp	 $LN50@unzReadCur
$LN33@unzReadCur:
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi

; 1729 :                 return UNZ_EOF;

  0026d	33 c0		 xor	 eax, eax
  0026f	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c3		 ret	 0
$LN35@unzReadCur:
  00274	5f		 pop	 edi
  00275	5e		 pop	 esi

; 1740 :                 return UNZ_ERRNO;

  00276	83 c8 ff	 or	 eax, -1
  00279	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c3		 ret	 0
$LN48@unzReadCur:

; 1876 :                 break;
; 1877 :         }
; 1878 :     }
; 1879 : 
; 1880 :     if (err==Z_OK)
; 1881 :         return iRead;

  0027e	8b c3		 mov	 eax, ebx
$LN49@unzReadCur:
  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5b		 pop	 ebx

; 1882 :     return err;
; 1883 : }

  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
_unzReadCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzCloseCurrentFile
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzCloseCurrentFile PROC				; COMDAT

; 2005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2006 :     int err=UNZ_OK;
; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 db		 test	 ebx, ebx
  0000c	75 07		 jne	 SHORT $LN7@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  0000e	8d 47 9a	 lea	 eax, DWORD PTR [edi-102]
  00011	5f		 pop	 edi
  00012	5b		 pop	 ebx

; 2043 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN7@unzCloseCu:
  00015	56		 push	 esi

; 2012 :     s=(unz64_s*)file;
; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00016	8b b3 e0 00 00
	00		 mov	 esi, DWORD PTR [ebx+224]

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0001c	85 f6		 test	 esi, esi
  0001e	75 08		 jne	 SHORT $LN6@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00020	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  00023	5e		 pop	 esi
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx

; 2043 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN6@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
; 2020 :         (!pfile_in_zip_read_info->raw))

  00028	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  0002e	0b 86 84 00 00
	00		 or	 eax, DWORD PTR [esi+132]
  00034	75 16		 jne	 SHORT $LN4@unzCloseCu
  00036	39 be c8 00 00
	00		 cmp	 DWORD PTR [esi+200], edi
  0003c	75 0e		 jne	 SHORT $LN4@unzCloseCu

; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  0003e	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00041	3b 46 74	 cmp	 eax, DWORD PTR [esi+116]
  00044	b9 97 ff ff ff	 mov	 ecx, -105		; ffffff97H
  00049	0f 45 f9	 cmovne	 edi, ecx
$LN4@unzCloseCu:

; 2023 :             err=UNZ_CRCERROR;
; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  0004c	8b 06		 mov	 eax, DWORD PTR [esi]
  0004e	85 c0		 test	 eax, eax
  00050	74 09		 je	 SHORT $LN3@unzCloseCu
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _free
  00058	83 c4 04	 add	 esp, 4
$LN3@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;
; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  0005b	83 7e 48 08	 cmp	 DWORD PTR [esi+72], 8
  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00065	75 0c		 jne	 SHORT $LN2@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  00067	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _inflateEnd
  00070	83 c4 04	 add	 esp, 4
$LN2@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;
; 2038 :     TRYFREE(pfile_in_zip_read_info);

  00073	56		 push	 esi
  00074	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;
; 2041 : 
; 2042 :     return err;

  00083	8b c7		 mov	 eax, edi
  00085	5e		 pop	 esi
  00086	5f		 pop	 edi
  00087	c7 83 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+224], 0
  00091	5b		 pop	 ebx

; 2043 : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_unzCloseCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile3
_TEXT	SEGMENT
_offset_local_extrafield$ = -12				; size = 8
_iSizeVar$ = -4						; size = 4
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_size_local_extrafield$ = 24				; size = 4
_password$ = 24						; size = 4
_unzOpenCurrentFile3 PROC				; COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1475 :     int err=UNZ_OK;
; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  00006	83 7d 18 00	 cmp	 DWORD PTR _password$[ebp], 0
  0000a	74 09		 je	 SHORT $LN22@unzOpenCur

; 1485 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1639 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN22@unzOpenCur:
  00015	57		 push	 edi

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  00016	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  00019	85 ff		 test	 edi, edi
  0001b	74 08		 je	 SHORT $LN29@unzOpenCur

; 1489 :         return UNZ_PARAMERROR;
; 1490 :     s=(unz64_s*)file;
; 1491 :     if (!s->current_file_ok)

  0001d	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00020	0b 47 64	 or	 eax, DWORD PTR [edi+100]
  00023	75 0a		 jne	 SHORT $LN20@unzOpenCur
$LN29@unzOpenCur:

; 1492 :         return UNZ_PARAMERROR;

  00025	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002a	5f		 pop	 edi

; 1639 : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN20@unzOpenCur:

; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  0002f	83 bf e0 00 00
	00 00		 cmp	 DWORD PTR [edi+224], 0
  00036	74 09		 je	 SHORT $LN19@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _unzCloseCurrentFile
  0003e	83 c4 04	 add	 esp, 4
$LN19@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00041	8d 45 18	 lea	 eax, DWORD PTR _size_local_extrafield$[ebp]
  00044	50		 push	 eax
  00045	8d 45 f4	 lea	 eax, DWORD PTR _offset_local_extrafield$[ebp]
  00048	50		 push	 eax
  00049	8d 45 fc	 lea	 eax, DWORD PTR _iSizeVar$[ebp]
  0004c	50		 push	 eax
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _unz64local_CheckCurrentFileCoherencyHeader
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	85 c0		 test	 eax, eax
  00058	74 0a		 je	 SHORT $LN18@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  0005a	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  0005f	5f		 pop	 edi

; 1639 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN18@unzOpenCur:
  00064	56		 push	 esi

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  00065	68 d0 00 00 00	 push	 208			; 000000d0H
  0006a	e8 00 00 00 00	 call	 _malloc
  0006f	8b f0		 mov	 esi, eax
  00071	83 c4 04	 add	 esp, 4

; 1501 :     if (pfile_in_zip_read_info==NULL)

  00074	85 f6		 test	 esi, esi
  00076	74 45		 je	 SHORT $LN28@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;
; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  00078	68 00 40 00 00	 push	 16384			; 00004000H
  0007d	e8 00 00 00 00	 call	 _malloc

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  00082	8b 4d f4	 mov	 ecx, DWORD PTR _offset_local_extrafield$[ebp]

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;
; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;
; 1508 :     pfile_in_zip_read_info->raw=raw;

  00085	8b 55 14	 mov	 edx, DWORD PTR _raw$[ebp]
  00088	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _offset_local_extrafield$[ebp+4]
  0008e	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  00091	8b 4d 18	 mov	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  00094	83 c4 04	 add	 esp, 4
  00097	89 06		 mov	 DWORD PTR [esi], eax
  00099	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
  0009c	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  000a3	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  000aa	89 96 c8 00 00
	00		 mov	 DWORD PTR [esi+200], edx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000b0	85 c0		 test	 eax, eax
  000b2	75 14		 jne	 SHORT $LN16@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 _free
  000ba	83 c4 04	 add	 esp, 4
$LN28@unzOpenCur:

; 1513 :         return UNZ_INTERNALERROR;

  000bd	5e		 pop	 esi
  000be	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000c3	5f		 pop	 edi

; 1639 : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN16@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;
; 1517 : 
; 1518 :     if (method!=NULL)

  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR _method$[ebp]
  000cb	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000d2	85 c9		 test	 ecx, ecx
  000d4	74 08		 je	 SHORT $LN14@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  000d6	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  000dc	89 01		 mov	 DWORD PTR [ecx], eax
$LN14@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  000de	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  000e1	85 c9		 test	 ecx, ecx
  000e3	74 34		 je	 SHORT $LN11@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  000e5	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  000eb	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  000f1	83 e0 06	 and	 eax, 6
  000f4	83 e8 02	 sub	 eax, 2
  000f7	74 1a		 je	 SHORT $LN8@unzOpenCur
  000f9	83 e8 02	 sub	 eax, 2
  000fc	74 0d		 je	 SHORT $LN9@unzOpenCur
  000fe	83 e8 02	 sub	 eax, 2
  00101	75 16		 jne	 SHORT $LN11@unzOpenCur

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  00103	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00109	eb 0e		 jmp	 SHORT $LN11@unzOpenCur
$LN9@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  0010b	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
  00111	eb 06		 jmp	 SHORT $LN11@unzOpenCur
$LN8@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  00113	c7 01 09 00 00
	00		 mov	 DWORD PTR [ecx], 9
$LN11@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;
; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  00119	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0011f	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1541 :     pfile_in_zip_read_info->crc32=0;

  00122	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  00129	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00130	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  00137	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  0013d	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;

  00143	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00146	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax

; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  0014c	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00150	66 0f d6 86 88
	00 00 00	 movq	 QWORD PTR [esi+136], xmm0
  00158	f3 0f 7e 47 08	 movq	 xmm0, QWORD PTR [edi+8]
  0015d	66 0f d6 86 90
	00 00 00	 movq	 QWORD PTR [esi+144], xmm0
  00165	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  0016a	66 0f d6 86 98
	00 00 00	 movq	 QWORD PTR [esi+152], xmm0
  00172	f3 0f 7e 47 18	 movq	 xmm0, QWORD PTR [edi+24]
  00177	66 0f d6 86 a0
	00 00 00	 movq	 QWORD PTR [esi+160], xmm0
  0017f	f3 0f 7e 47 20	 movq	 xmm0, QWORD PTR [edi+32]
  00184	66 0f d6 86 a8
	00 00 00	 movq	 QWORD PTR [esi+168], xmm0
  0018c	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0018f	89 86 b0 00 00
	00		 mov	 DWORD PTR [esi+176], eax

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  00195	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00198	89 86 c0 00 00
	00		 mov	 DWORD PTR [esi+192], eax
  0019e	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  001a1	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  001a7	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  001ae	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  001b4	53		 push	 ebx
  001b5	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  001b8	75 75		 jne	 SHORT $LN6@unzOpenCur
  001ba	85 d2		 test	 edx, edx
  001bc	75 71		 jne	 SHORT $LN6@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  001be	c7 86 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+200], 1
$LN2@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =
; 1601 :             s->cur_file_info.compressed_size ;

  001c8	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  001ce	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001d1	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  001d7	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1603 :             s->cur_file_info.uncompressed_size ;

  001da	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  001e0	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  001e6	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  001ec	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =
; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;

  001f2	8b 45 fc	 mov	 eax, DWORD PTR _iSizeVar$[ebp]
  001f5	33 c9		 xor	 ecx, ecx
  001f7	03 87 d8 00 00
	00		 add	 eax, DWORD PTR [edi+216]
  001fd	5b		 pop	 ebx
  001fe	13 8f dc 00 00
	00		 adc	 ecx, DWORD PTR [edi+220]
  00204	83 c0 1e	 add	 eax, 30			; 0000001eH
  00207	83 d1 00	 adc	 ecx, 0
  0020a	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0020d	89 4e 44	 mov	 DWORD PTR [esi+68], ecx

; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  00210	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  00217	89 b7 e0 00 00
	00		 mov	 DWORD PTR [edi+224], esi
  0021d	5e		 pop	 esi

; 1613 :                 s->encrypted = 0;

  0021e	c7 87 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+228], 0

; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  00228	33 c0		 xor	 eax, eax
  0022a	5f		 pop	 edi

; 1639 : }

  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
$LN6@unzOpenCur:

; 1574 : #endif
; 1575 :     }
; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  0022f	83 f8 08	 cmp	 eax, 8
  00232	75 94		 jne	 SHORT $LN2@unzOpenCur
  00234	85 d2		 test	 edx, edx
  00236	75 90		 jne	 SHORT $LN2@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;
; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  00238	6a 38		 push	 56			; 00000038H
  0023a	68 00 00 00 00	 push	 OFFSET ??_C@_05DFCKICEH@1?42?45?$AA@
  0023f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00242	6a f1		 push	 -15			; fffffff1H
  00244	50		 push	 eax
  00245	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00248	89 56 28	 mov	 DWORD PTR [esi+40], edx
  0024b	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  0024e	89 10		 mov	 DWORD PTR [eax], edx
  00250	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00253	e8 00 00 00 00	 call	 _inflateInit2_
  00258	8b d8		 mov	 ebx, eax
  0025a	83 c4 10	 add	 esp, 16			; 00000010H

; 1585 :       if (err == Z_OK)

  0025d	85 db		 test	 ebx, ebx
  0025f	75 0c		 jne	 SHORT $LN3@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  00261	c7 46 48 08 00
	00 00		 mov	 DWORD PTR [esi+72], 8

; 1587 :       else

  00268	e9 5b ff ff ff	 jmp	 $LN2@unzOpenCur
$LN3@unzOpenCur:

; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  0026d	56		 push	 esi
  0026e	e8 00 00 00 00	 call	 _free
  00273	83 c4 04	 add	 esp, 4

; 1590 :         return err;

  00276	8b c3		 mov	 eax, ebx
  00278	5b		 pop	 ebx
  00279	5e		 pop	 esi
  0027a	5f		 pop	 edi

; 1639 : }

  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c3		 ret	 0
_unzOpenCurrentFile3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile2
_TEXT	SEGMENT
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_unzOpenCurrentFile2 PROC				; COMDAT

; 1652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00003	6a 00		 push	 0
  00005	ff 75 14	 push	 DWORD PTR _raw$[ebp]
  00008	ff 75 10	 push	 DWORD PTR _level$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _method$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00011	e8 00 00 00 00	 call	 _unzOpenCurrentFile3
  00016	83 c4 14	 add	 esp, 20			; 00000014H

; 1654 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_unzOpenCurrentFile2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFilePassword
_TEXT	SEGMENT
_file$ = 8						; size = 4
_password$ = 12						; size = 4
_unzOpenCurrentFilePassword PROC			; COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00003	ff 75 0c	 push	 DWORD PTR _password$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000f	e8 00 00 00 00	 call	 _unzOpenCurrentFile3
  00014	83 c4 14	 add	 esp, 20			; 00000014H

; 1649 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_unzOpenCurrentFilePassword ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpenCurrentFile
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzOpenCurrentFile PROC				; COMDAT

; 1642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000e	e8 00 00 00 00	 call	 _unzOpenCurrentFile3
  00013	83 c4 14	 add	 esp, 20			; 00000014H

; 1644 : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_unzOpenCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileZStreamPos64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGetCurrentFileZStreamPos64 PROC			; COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;
; 1663 :     if (file==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN2@unzGetCurr
$LN5@unzGetCurr:

; 1664 :         return 0; //UNZ_PARAMERROR;

  0000a	33 c0		 xor	 eax, eax
  0000c	33 d2		 xor	 edx, edx

; 1670 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00010	8b 89 e0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+224]

; 1666 :     if (pfile_in_zip_read_info==NULL)

  00016	85 c9		 test	 ecx, ecx
  00018	74 f0		 je	 SHORT $LN5@unzGetCurr

; 1667 :         return 0; //UNZ_PARAMERROR;
; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +
; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;

  0001a	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00020	03 41 40	 add	 eax, DWORD PTR [ecx+64]
  00023	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  00029	13 51 44	 adc	 edx, DWORD PTR [ecx+68]

; 1670 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_unzGetCurrentFileZStreamPos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo
_TEXT	SEGMENT
_file_info64$ = -88					; size = 88
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo PROC				; COMDAT

; 1141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,
; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);

  00006	8d 45 a8	 lea	 eax, DWORD PTR _file_info64$[ebp]
  00009	56		 push	 esi
  0000a	ff 75 24	 push	 DWORD PTR _commentBufferSize$[ebp]
  0000d	ff 75 20	 push	 DWORD PTR _szComment$[ebp]
  00010	ff 75 1c	 push	 DWORD PTR _extraFieldBufferSize$[ebp]
  00013	ff 75 18	 push	 DWORD PTR _extraField$[ebp]
  00016	ff 75 14	 push	 DWORD PTR _fileNameBufferSize$[ebp]
  00019	ff 75 10	 push	 DWORD PTR _szFileName$[ebp]
  0001c	6a 00		 push	 0
  0001e	50		 push	 eax
  0001f	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00022	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00027	8b f0		 mov	 esi, eax
  00029	83 c4 24	 add	 esp, 36			; 00000024H

; 1148 :     if (err==UNZ_OK)

  0002c	85 f6		 test	 esi, esi
  0002e	75 76		 jne	 SHORT $LN1@unzGetCurr

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;

  00030	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]

; 1151 :         pfile_info->version_needed = file_info64.version_needed;
; 1152 :         pfile_info->flag = file_info64.flag;
; 1153 :         pfile_info->compression_method = file_info64.compression_method;

  00033	8b 45 b4	 mov	 eax, DWORD PTR _file_info64$[ebp+12]
  00036	8b 4d a8	 mov	 ecx, DWORD PTR _file_info64$[ebp]
  00039	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1154 :         pfile_info->dosDate = file_info64.dosDate;

  0003c	8b 45 b8	 mov	 eax, DWORD PTR _file_info64$[ebp+16]

; 1155 :         pfile_info->crc = file_info64.crc;
; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;
; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;
; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;
; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;
; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;
; 1163 :         pfile_info->external_fa = file_info64.external_fa;
; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,
; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;

  0003f	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR _file_info64$[ebp+64]
  00044	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00047	8b 45 bc	 mov	 eax, DWORD PTR _file_info64$[ebp+20]
  0004a	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0004d	8b 45 d0	 mov	 eax, DWORD PTR _file_info64$[ebp+40]
  00050	89 42 20	 mov	 DWORD PTR [edx+32], eax
  00053	8b 45 d4	 mov	 eax, DWORD PTR _file_info64$[ebp+44]
  00056	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00059	8b 45 d8	 mov	 eax, DWORD PTR _file_info64$[ebp+48]
  0005c	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0005f	8b 45 dc	 mov	 eax, DWORD PTR _file_info64$[ebp+52]
  00062	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  00065	8b 45 e0	 mov	 eax, DWORD PTR _file_info64$[ebp+56]
  00068	89 42 30	 mov	 DWORD PTR [edx+48], eax
  0006b	8b 45 e4	 mov	 eax, DWORD PTR _file_info64$[ebp+60]
  0006e	89 42 34	 mov	 DWORD PTR [edx+52], eax
  00071	8b 45 c0	 mov	 eax, DWORD PTR _file_info64$[ebp+24]
  00074	66 0f d6 42 38	 movq	 QWORD PTR [edx+56], xmm0
  00079	f3 0f 7e 45 f0	 movq	 xmm0, QWORD PTR _file_info64$[ebp+72]
  0007e	89 0a		 mov	 DWORD PTR [edx], ecx
  00080	8b 4d ac	 mov	 ecx, DWORD PTR _file_info64$[ebp+4]
  00083	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  00086	8b 45 c8	 mov	 eax, DWORD PTR _file_info64$[ebp+32]
  00089	66 0f d6 42 40	 movq	 QWORD PTR [edx+64], xmm0
  0008e	f3 0f 7e 45 f8	 movq	 xmm0, QWORD PTR _file_info64$[ebp+80]
  00093	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00096	8b 4d b0	 mov	 ecx, DWORD PTR _file_info64$[ebp+8]
  00099	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  0009c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0009f	66 0f d6 42 48	 movq	 QWORD PTR [edx+72], xmm0

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  000a4	8b c6		 mov	 eax, esi
$LN1@unzGetCurr:
  000a6	5e		 pop	 esi

; 1173 : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_unzGetCurrentFileInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetCurrentFileInfo64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo64 PROC				; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,
; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);

  00003	ff 75 24	 push	 DWORD PTR _commentBufferSize$[ebp]
  00006	ff 75 20	 push	 DWORD PTR _szComment$[ebp]
  00009	ff 75 1c	 push	 DWORD PTR _extraFieldBufferSize$[ebp]
  0000c	ff 75 18	 push	 DWORD PTR _extraField$[ebp]
  0000f	ff 75 14	 push	 DWORD PTR _fileNameBufferSize$[ebp]
  00012	ff 75 10	 push	 DWORD PTR _szFileName$[ebp]
  00015	6a 00		 push	 0
  00017	ff 75 0c	 push	 DWORD PTR _pfile_info$[ebp]
  0001a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0001d	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00022	83 c4 24	 add	 esp, 36			; 00000024H

; 1134 : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_unzGetCurrentFileInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos64 PROC					; COMDAT

; 1339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 56		 je	 SHORT $LN1@unzGoToFil
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 4f		 je	 SHORT $LN1@unzGoToFil

; 1345 :     s=(unz64_s*)file;
; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1349 :     s->num_file           = file_pos->num_of_file;
; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);

  00014	6a 00		 push	 0
  00016	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00019	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001c	6a 00		 push	 0
  0001e	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	89 46 50	 mov	 DWORD PTR [esi+80], eax
  0002b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0002e	6a 00		 push	 0
  00030	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00033	6a 00		 push	 0
  00035	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  0003b	50		 push	 eax
  0003c	8d 86 80 00 00
	00		 lea	 eax, DWORD PTR [esi+128]
  00042	50		 push	 eax
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00049	8b c8		 mov	 ecx, eax

; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  0004b	33 c0		 xor	 eax, eax
  0004d	83 c4 24	 add	 esp, 36			; 00000024H
  00050	85 c9		 test	 ecx, ecx
  00052	0f 94 c0	 sete	 al
  00055	99		 cdq
  00056	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00059	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1357 :     return err;

  0005c	8b c1		 mov	 eax, ecx
  0005e	5e		 pop	 esi

; 1358 : }

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN1@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  00061	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00066	5e		 pop	 esi

; 1358 : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_unzGoToFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos64 PROC					; COMDAT

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 31		 je	 SHORT $LN2@unzGetFile
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0000d	85 d2		 test	 edx, edx
  0000f	74 2a		 je	 SHORT $LN2@unzGetFile

; 1314 :     s=(unz64_s*)file;
; 1315 :     if (!s->current_file_ok)

  00011	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00014	0b 41 64	 or	 eax, DWORD PTR [ecx+100]
  00017	75 07		 jne	 SHORT $LN1@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  00019	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 1322 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN1@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  00020	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00023	89 02		 mov	 DWORD PTR [edx], eax
  00025	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1319 :     file_pos->num_of_file           = s->num_file;

  0002b	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0002e	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00031	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00034	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1320 : 
; 1321 :     return UNZ_OK;

  00037	33 c0		 xor	 eax, eax

; 1322 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  0003b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH

; 1322 : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_unzGetFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFilePos
_TEXT	SEGMENT
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos PROC					; COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	85 c9		 test	 ecx, ecx
  0000b	75 07		 jne	 SHORT $LN1@unzGoToFil

; 1366 :         return UNZ_PARAMERROR;

  0000d	8d 41 9a	 lea	 eax, DWORD PTR [ecx-102]

; 1371 : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN1@unzGoToFil:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	89 45 f0	 mov	 DWORD PTR _file_pos64$[ebp], eax

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  00019	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001c	89 45 f8	 mov	 DWORD PTR _file_pos64$[ebp+8], eax

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  0001f	8d 45 f0	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00022	50		 push	 eax
  00023	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _file_pos64$[ebp+4], 0
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file_pos64$[ebp+12], 0
  00034	e8 00 00 00 00	 call	 _unzGoToFilePos64
  00039	83 c4 08	 add	 esp, 8

; 1371 : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_unzGoToFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetFilePos
_TEXT	SEGMENT
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos PROC					; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  00006	8d 45 f0	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _unzGetFilePos64
  00012	83 c4 08	 add	 esp, 8

; 1330 :     if (err==UNZ_OK)

  00015	85 c0		 test	 eax, eax
  00017	75 0e		 jne	 SHORT $LN1@unzGetFile

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00019	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _file_pos64$[ebp]
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _file_pos64$[ebp+8]
  00024	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN1@unzGetFile:

; 1334 :     }
; 1335 :     return err;
; 1336 : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_unzGetFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzLocateFile
_TEXT	SEGMENT
_szCurrentFileName$1 = -368				; size = 257
_cur_file_infoSaved$ = -108				; size = 88
_pos_in_central_dirSaved$1$ = -20			; size = 4
_pos_in_central_dirSaved$2$ = -16			; size = 4
_cur_file_info_internalSaved$2$ = -12			; size = 4
_num_fileSaved$2$ = -8					; size = 4
_cur_file_info_internalSaved$1$ = -4			; size = 4
_num_fileSaved$1$ = 8					; size = 4
_file$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzLocateFile PROC					; COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	53		 push	 ebx

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  0000d	85 db		 test	 ebx, ebx
  0000f	75 0a		 jne	 SHORT $LN7@unzLocateF
$LN17@unzLocateF:

; 1247 :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00016	5b		 pop	 ebx

; 1286 :     return err;
; 1287 : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN7@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _szFileName$[ebp]
  0001e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL14@unzLocateF:
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	40		 inc	 eax
  00024	84 c9		 test	 cl, cl
  00026	75 f9		 jne	 SHORT $LL14@unzLocateF
  00028	2b c2		 sub	 eax, edx
  0002a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0002f	73 e0		 jae	 SHORT $LN17@unzLocateF

; 1250 :         return UNZ_PARAMERROR;
; 1251 : 
; 1252 :     s=(unz64_s*)file;
; 1253 :     if (!s->current_file_ok)

  00031	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]
  00034	0b 43 64	 or	 eax, DWORD PTR [ebx+100]
  00037	75 0a		 jne	 SHORT $LN5@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  00039	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0003e	5b		 pop	 ebx

; 1286 :     return err;
; 1287 : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN5@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;

  00043	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00046	89 45 08	 mov	 DWORD PTR _num_fileSaved$1$[ebp], eax
  00049	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  0004c	89 45 f8	 mov	 DWORD PTR _num_fileSaved$2$[ebp], eax

; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;

  0004f	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]
  00052	89 45 ec	 mov	 DWORD PTR _pos_in_central_dirSaved$1$[ebp], eax
  00055	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  00058	56		 push	 esi
  00059	89 45 f0	 mov	 DWORD PTR _pos_in_central_dirSaved$2$[ebp], eax

; 1259 :     cur_file_infoSaved = s->cur_file_info;
; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  0005c	8b 83 d8 00 00
	00		 mov	 eax, DWORD PTR [ebx+216]
  00062	57		 push	 edi
  00063	89 45 fc	 mov	 DWORD PTR _cur_file_info_internalSaved$1$[ebp], eax
  00066	8b 83 dc 00 00
	00		 mov	 eax, DWORD PTR [ebx+220]
  0006c	8d b3 80 00 00
	00		 lea	 esi, DWORD PTR [ebx+128]
  00072	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00077	8d 7d 94	 lea	 edi, DWORD PTR _cur_file_infoSaved$[ebp]

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  0007a	53		 push	 ebx
  0007b	f3 a5		 rep movsd
  0007d	89 45 f4	 mov	 DWORD PTR _cur_file_info_internalSaved$2$[ebp], eax
  00080	e8 00 00 00 00	 call	 _unzGoToFirstFile
  00085	83 c4 04	 add	 esp, 4

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  00088	85 c0		 test	 eax, eax
  0008a	75 4b		 jne	 SHORT $LN3@unzLocateF
  0008c	8b 7d 10	 mov	 edi, DWORD PTR _iCaseSensitivity$[ebp]
  0008f	8b 75 0c	 mov	 esi, DWORD PTR _szFileName$[ebp]
$LL4@unzLocateF:

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,
; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	68 00 01 00 00	 push	 256			; 00000100H
  0009f	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _szCurrentFileName$1[ebp]
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 _unzGetCurrentFileInfo64
  000ae	83 c4 20	 add	 esp, 32			; 00000020H

; 1270 :         if (err == UNZ_OK)

  000b1	85 c0		 test	 eax, eax
  000b3	75 22		 jne	 SHORT $LN3@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  000b5	57		 push	 edi
  000b6	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _szCurrentFileName$1[ebp]
  000bc	56		 push	 esi
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _unzStringFileNameCompare
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	85 c0		 test	 eax, eax
  000c8	74 4e		 je	 SHORT $LN11@unzLocateF

; 1275 :             err = unzGoToNextFile(file);

  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 _unzGoToNextFile
  000d0	83 c4 04	 add	 esp, 4
  000d3	85 c0		 test	 eax, eax
  000d5	74 bb		 je	 SHORT $LL4@unzLocateF
$LN3@unzLocateF:

; 1276 :         }
; 1277 :     }
; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;

  000d7	8b 55 08	 mov	 edx, DWORD PTR _num_fileSaved$1$[ebp]
  000da	89 53 50	 mov	 DWORD PTR [ebx+80], edx
  000dd	8b 55 f8	 mov	 edx, DWORD PTR _num_fileSaved$2$[ebp]

; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;
; 1284 :     s->cur_file_info = cur_file_infoSaved;

  000e0	8d bb 80 00 00
	00		 lea	 edi, DWORD PTR [ebx+128]
  000e6	89 53 54	 mov	 DWORD PTR [ebx+84], edx
  000e9	8b 55 ec	 mov	 edx, DWORD PTR _pos_in_central_dirSaved$1$[ebp]
  000ec	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000f1	8d 75 94	 lea	 esi, DWORD PTR _cur_file_infoSaved$[ebp]
  000f4	f3 a5		 rep movsd

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _cur_file_info_internalSaved$1$[ebp]
  000f9	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  000fc	8b 55 f0	 mov	 edx, DWORD PTR _pos_in_central_dirSaved$2$[ebp]
  000ff	89 8b d8 00 00
	00		 mov	 DWORD PTR [ebx+216], ecx
  00105	8b 4d f4	 mov	 ecx, DWORD PTR _cur_file_info_internalSaved$2$[ebp]
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	89 53 5c	 mov	 DWORD PTR [ebx+92], edx
  0010d	89 8b dc 00 00
	00		 mov	 DWORD PTR [ebx+220], ecx
  00113	5b		 pop	 ebx

; 1286 :     return err;
; 1287 : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN11@unzLocateF:
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi

; 1274 :                 return UNZ_OK;

  0011a	33 c0		 xor	 eax, eax
  0011c	5b		 pop	 ebx

; 1286 :     return err;
; 1287 : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
_unzLocateFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToNextFile
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGoToNextFile PROC					; COMDAT

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN4@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 1221 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN4@unzGoToNex:

; 1206 :     s=(unz64_s*)file;
; 1207 :     if (!s->current_file_ok)

  00011	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00014	0b 46 64	 or	 eax, DWORD PTR [esi+100]
  00017	75 08		 jne	 SHORT $LN3@unzGoToNex
$LN8@unzGoToNex:

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  00019	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0001e	5e		 pop	 esi

; 1221 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  00021	81 7e 38 ff ff
	00 00		 cmp	 DWORD PTR [esi+56], 65535 ; 0000ffffH
  00028	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0002b	75 04		 jne	 SHORT $LN7@unzGoToNex
  0002d	85 d2		 test	 edx, edx
  0002f	74 15		 je	 SHORT $LN1@unzGoToNex
$LN7@unzGoToNex:

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  00031	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00034	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00037	83 c0 01	 add	 eax, 1
  0003a	83 d1 00	 adc	 ecx, 0
  0003d	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  00040	75 04		 jne	 SHORT $LN1@unzGoToNex
  00042	3b ca		 cmp	 ecx, edx
  00044	74 d3		 je	 SHORT $LN8@unzGoToNex
$LN1@unzGoToNex:

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;
; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;

  00046	8b 8e b0 00 00
	00		 mov	 ecx, DWORD PTR [esi+176]
  0004c	03 8e ac 00 00
	00		 add	 ecx, DWORD PTR [esi+172]
  00052	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]

; 1215 :     s->num_file++;
; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);

  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	83 c0 2e	 add	 eax, 46			; 0000002eH
  00061	6a 00		 push	 0
  00063	03 c1		 add	 eax, ecx
  00065	01 46 58	 add	 DWORD PTR [esi+88], eax
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	83 56 5c 00	 adc	 DWORD PTR [esi+92], 0
  00070	83 46 50 01	 add	 DWORD PTR [esi+80], 1
  00074	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  0007a	50		 push	 eax
  0007b	83 56 54 00	 adc	 DWORD PTR [esi+84], 0
  0007f	8d 86 80 00 00
	00		 lea	 eax, DWORD PTR [esi+128]
  00085	50		 push	 eax
  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0008c	8b c8		 mov	 ecx, eax

; 1219 :     s->current_file_ok = (err == UNZ_OK);

  0008e	33 c0		 xor	 eax, eax
  00090	83 c4 24	 add	 esp, 36			; 00000024H
  00093	85 c9		 test	 ecx, ecx
  00095	0f 94 c0	 sete	 al
  00098	99		 cdq
  00099	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0009c	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1220 :     return err;

  0009f	8b c1		 mov	 eax, ecx
  000a1	5e		 pop	 esi

; 1221 : }

  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_unzGoToNextFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGoToFirstFile
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzGoToFirstFile PROC					; COMDAT

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1180 :     int err=UNZ_OK;
; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN1@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 1192 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN1@unzGoToFir:

; 1184 :     s=(unz64_s*)file;
; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  00011	8b 46 78	 mov	 eax, DWORD PTR [esi+120]

; 1186 :     s->num_file=0;
; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	89 46 58	 mov	 DWORD PTR [esi+88], eax
  0001f	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  00022	6a 00		 push	 0
  00024	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00027	6a 00		 push	 0
  00029	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  0002f	50		 push	 eax
  00030	8d 86 80 00 00
	00		 lea	 eax, DWORD PTR [esi+128]
  00036	50		 push	 eax
  00037	56		 push	 esi
  00038	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0003f	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00046	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0004b	8b c8		 mov	 ecx, eax

; 1190 :     s->current_file_ok = (err == UNZ_OK);

  0004d	33 c0		 xor	 eax, eax
  0004f	83 c4 24	 add	 esp, 36			; 00000024H
  00052	85 c9		 test	 ecx, ecx
  00054	0f 94 c0	 sete	 al
  00057	99		 cdq
  00058	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0005b	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1191 :     return err;

  0005e	8b c1		 mov	 eax, ecx
  00060	5e		 pop	 esi

; 1192 : }

  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_unzGoToFirstFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalComment
_TEXT	SEGMENT
_file$ = 8						; size = 4
_szComment$ = 12					; size = 4
_uSizeBuf$ = 16						; size = 4
_unzGetGlobalComment PROC				; COMDAT

; 2052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN6@unzGetGlob

; 2056 :         return (int)UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 2076 : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN6@unzGetGlob:

; 2057 :     s=(unz64_s*)file;
; 2058 : 
; 2059 :     uReadThis = uSizeBuf;

  00011	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]

; 2060 :     if (uReadThis>s->gi.size_comment)

  00014	3b 4e 40	 cmp	 ecx, DWORD PTR [esi+64]

; 2061 :         uReadThis = s->gi.size_comment;
; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00017	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
  0001d	0f 47 7e 40	 cmova	 edi, DWORD PTR [esi+64]
  00021	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00024	83 c1 16	 add	 ecx, 22			; 00000016H
  00027	6a 00		 push	 0
  00029	83 d0 00	 adc	 eax, 0
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	ff 76 30	 push	 DWORD PTR [esi+48]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _call_zseek64
  00037	83 c4 14	 add	 esp, 20			; 00000014H
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN4@unzGetGlob

; 2064 :         return UNZ_ERRNO;

  0003e	5f		 pop	 edi
  0003f	83 c8 ff	 or	 eax, -1
  00042	5e		 pop	 esi

; 2076 : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN4@unzGetGlob:
  00045	53		 push	 ebx

; 2065 : 
; 2066 :     if (uReadThis>0)

  00046	8b 5d 0c	 mov	 ebx, DWORD PTR _szComment$[ebp]
  00049	85 ff		 test	 edi, edi
  0004b	74 1f		 je	 SHORT $LN2@unzGetGlob

; 2067 :     {
; 2068 :       *szComment='\0';
; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  0004d	57		 push	 edi
  0004e	c6 03 00	 mov	 BYTE PTR [ebx], 0
  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	53		 push	 ebx
  00055	ff 76 30	 push	 DWORD PTR [esi+48]
  00058	ff 76 1c	 push	 DWORD PTR [esi+28]
  0005b	ff d0		 call	 eax
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b c7		 cmp	 eax, edi
  00062	74 08		 je	 SHORT $LN2@unzGetGlob

; 2070 :         return UNZ_ERRNO;

  00064	5b		 pop	 ebx
  00065	5f		 pop	 edi
  00066	83 c8 ff	 or	 eax, -1
  00069	5e		 pop	 esi

; 2076 : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN2@unzGetGlob:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  0006c	85 db		 test	 ebx, ebx
  0006e	74 0c		 je	 SHORT $LN1@unzGetGlob
  00070	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00073	39 45 10	 cmp	 DWORD PTR _uSizeBuf$[ebp], eax
  00076	76 04		 jbe	 SHORT $LN1@unzGetGlob

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  00078	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN1@unzGetGlob:
  0007c	5b		 pop	 ebx

; 2075 :     return (int)uReadThis;

  0007d	8b c7		 mov	 eax, edi
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi

; 2076 : }

  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_unzGetGlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pglobal_info$ = 12					; size = 4
_unzGetGlobalInfo64 PROC				; COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 05		 jne	 SHORT $LN1@unzGetGlob

; 832  :         return UNZ_PARAMERROR;

  0000a	8d 41 9a	 lea	 eax, DWORD PTR [ecx-102]

; 836  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN1@unzGetGlob:

; 833  :     s=(unz64_s*)file;
; 834  :     *pglobal_info=s->gi;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _pglobal_info$[ebp]
  00012	f3 0f 7e 41 38	 movq	 xmm0, QWORD PTR [ecx+56]
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	f3 0f 7e 41 40	 movq	 xmm0, QWORD PTR [ecx+64]
  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0

; 835  :     return UNZ_OK;

  00025	33 c0		 xor	 eax, eax

; 836  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_unzGetGlobalInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalInfo
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pglobal_info32$ = 12					; size = 4
_unzGetGlobalInfo PROC					; COMDAT

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 05		 jne	 SHORT $LN1@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  0000a	8d 42 9a	 lea	 eax, DWORD PTR [edx-102]

; 848  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN1@unzGetGlob:

; 843  :     s=(unz64_s*)file;
; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  0000f	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pglobal_info32$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00017	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 847  :     return UNZ_OK;

  0001d	33 c0		 xor	 eax, eax

; 848  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_unzGetGlobalInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzClose
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzClose PROC						; COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN3@unzClose

; 812  :         return UNZ_PARAMERROR;

  0000b	8d 46 9a	 lea	 eax, DWORD PTR [esi-102]
  0000e	5e		 pop	 esi

; 821  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN3@unzClose:

; 813  :     s=(unz64_s*)file;
; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00011	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  00018	74 09		 je	 SHORT $LN2@unzClose

; 816  :         unzCloseCurrentFile(file);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _unzCloseCurrentFile
  00020	83 c4 04	 add	 esp, 4
$LN2@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  00023	ff 76 30	 push	 DWORD PTR [esi+48]
  00026	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00029	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002c	ff d0		 call	 eax

; 819  :     TRYFREE(s);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _free
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  :     return UNZ_OK;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 821  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_unzClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen2_64
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc_def$ = 12				; size = 4
_unzOpen2_64 PROC					; COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 781  :     if (pzlib_filefunc_def != NULL)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00009	6a 01		 push	 1
  0000b	85 c0		 test	 eax, eax
  0000d	74 48		 je	 SHORT $LN2@unzOpen2_6

; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000f	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00013	66 0f d6 45 d4	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp], xmm0
  00018	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  0001d	66 0f d6 45 dc	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+8], xmm0
  00022	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00027	66 0f d6 45 e4	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+16], xmm0
  0002c	f3 0f 7e 40 18	 movq	 xmm0, QWORD PTR [eax+24]

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00031	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00034	50		 push	 eax

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00035	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00038	66 0f d6 45 ec	 movq	 QWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+24], xmm0
  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+36], 0
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp+40], 0
  0004b	e8 00 00 00 00	 call	 _unzOpenInternal
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 791  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN2@unzOpen2_6:

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00057	6a 00		 push	 0
  00059	ff 75 08	 push	 DWORD PTR _path$[ebp]
  0005c	e8 00 00 00 00	 call	 _unzOpenInternal
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 791  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_unzOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen2
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc32_def$ = 12				; size = 4
_unzOpen2 PROC						; COMDAT

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 768  :     if (pzlib_filefunc32_def != NULL)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	85 c0		 test	 eax, eax
  0000b	74 1f		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000d	50		 push	 eax
  0000e	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  00017	6a 00		 push	 0
  00019	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[ebp]
  0001c	50		 push	 eax
  0001d	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00020	e8 00 00 00 00	 call	 _unzOpenInternal
  00025	83 c4 14	 add	 esp, 20			; 00000014H

; 776  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@unzOpen2:

; 773  :     }
; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  0002c	6a 00		 push	 0
  0002e	6a 00		 push	 0
  00030	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00033	e8 00 00 00 00	 call	 _unzOpenInternal
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 776  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_unzOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen64
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen64 PROC						; COMDAT

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  :     return unzOpenInternal(path, NULL, 1);

  00003	6a 01		 push	 1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _path$[ebp]
  0000a	e8 00 00 00 00	 call	 _unzOpenInternal
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_unzOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzOpen
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen PROC						; COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 795  :     return unzOpenInternal(path, NULL, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _path$[ebp]
  0000a	e8 00 00 00 00	 call	 _unzOpenInternal
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_unzOpen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\mattia\desktop\audio plugin developement\esempi\compzocchiogui 2.10\zlib\contrib\minizip\unzip.c
;	COMDAT _unzStringFileNameCompare
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzStringFileNameCompare PROC				; COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :     if (iCaseSensitivity==0)

  00003	8b 45 10	 mov	 eax, DWORD PTR _iCaseSensitivity$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 32		 je	 SHORT $LN1@unzStringF

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;
; 397  : 
; 398  :     if (iCaseSensitivity==1)

  0000a	83 f8 01	 cmp	 eax, 1
  0000d	75 2d		 jne	 SHORT $LN1@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _fileName2$[ebp]
  00012	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
$LL5@unzStringF:
  00015	8a 10		 mov	 dl, BYTE PTR [eax]
  00017	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00019	75 1a		 jne	 SHORT $LN6@unzStringF
  0001b	84 d2		 test	 dl, dl
  0001d	74 12		 je	 SHORT $LN7@unzStringF
  0001f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00022	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00025	75 0e		 jne	 SHORT $LN6@unzStringF
  00027	83 c0 02	 add	 eax, 2
  0002a	83 c1 02	 add	 ecx, 2
  0002d	84 d2		 test	 dl, dl
  0002f	75 e4		 jne	 SHORT $LL5@unzStringF
$LN7@unzStringF:
  00031	33 c0		 xor	 eax, eax

; 402  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN6@unzStringF:

; 399  :         return strcmp(fileName1,fileName2);

  00035	1b c0		 sbb	 eax, eax
  00037	83 c8 01	 or	 eax, 1

; 402  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN1@unzStringF:

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  0003c	ff 75 0c	 push	 DWORD PTR _fileName2$[ebp]
  0003f	ff 75 08	 push	 DWORD PTR _fileName1$[ebp]
  00042	e8 00 00 00 00	 call	 _strcmpcasenosensitive_internal
  00047	83 c4 08	 add	 esp, 8

; 402  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_unzStringFileNameCompare ENDP
_TEXT	ENDS
END
